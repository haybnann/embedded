
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007038  08007038  00017038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007330  08007330  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007330  08007330  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007330  08007330  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e0  08007518  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007518  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088a1  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001579  00000000  00000000  00028aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c8  00000000  00000000  0002a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000838  00000000  00000000  0002a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016dae  00000000  00000000  0002b128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070c8  00000000  00000000  00041ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083c78  00000000  00000000  00048f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ccc16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ac  00000000  00000000  000ccc94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007020 	.word	0x08007020

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007020 	.word	0x08007020

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <read_calliberation_data>:

/*
 * This function
 */
void read_calliberation_data (void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};//empty buffer to store data in
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	829a      	strh	r2, [r3, #20]
	uint16_t Callib_Start = 0xAA; //first EEPROM register
 800103a:	23aa      	movs	r3, #170	; 0xaa
 800103c:	82fb      	strh	r3, [r7, #22]
	//send & receive i2c data
	//READ more on i2cmemread
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 800103e:	8afa      	ldrh	r2, [r7, #22]
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2316      	movs	r3, #22
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	463b      	mov	r3, r7
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	21ee      	movs	r1, #238	; 0xee
 8001052:	4836      	ldr	r0, [pc, #216]	; (800112c <read_calliberation_data+0x108>)
 8001054:	f001 fbba 	bl	80027cc <HAL_I2C_Mem_Read>
	//save values into respective uint16 variables
	//shifting and ORing as necessary(convert 2 8-bits into a single 16 bit value)
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8001058:	783b      	ldrb	r3, [r7, #0]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	787b      	ldrb	r3, [r7, #1]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <read_calliberation_data+0x10c>)
 8001068:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 800106a:	78bb      	ldrb	r3, [r7, #2]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <read_calliberation_data+0x110>)
 800107a:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 800107c:	793b      	ldrb	r3, [r7, #4]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <read_calliberation_data+0x114>)
 800108c:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b21b      	sxth	r3, r3
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <read_calliberation_data+0x118>)
 80010a0:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 80010a2:	7a3b      	ldrb	r3, [r7, #8]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7a7b      	ldrb	r3, [r7, #9]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <read_calliberation_data+0x11c>)
 80010b4:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 80010b6:	7abb      	ldrb	r3, [r7, #10]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <read_calliberation_data+0x120>)
 80010c8:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80010ca:	7b3b      	ldrb	r3, [r7, #12]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7b7b      	ldrb	r3, [r7, #13]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <read_calliberation_data+0x124>)
 80010da:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <read_calliberation_data+0x128>)
 80010ec:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80010ee:	7c3b      	ldrb	r3, [r7, #16]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	7c7b      	ldrb	r3, [r7, #17]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <read_calliberation_data+0x12c>)
 80010fe:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001100:	7cbb      	ldrb	r3, [r7, #18]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	7cfb      	ldrb	r3, [r7, #19]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <read_calliberation_data+0x130>)
 8001110:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001112:	7d3b      	ldrb	r3, [r7, #20]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7d7b      	ldrb	r3, [r7, #21]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <read_calliberation_data+0x134>)
 8001122:	801a      	strh	r2, [r3, #0]

}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000250 	.word	0x20000250
 8001130:	200001fc 	.word	0x200001fc
 8001134:	200001fe 	.word	0x200001fe
 8001138:	20000200 	.word	0x20000200
 800113c:	20000202 	.word	0x20000202
 8001140:	20000204 	.word	0x20000204
 8001144:	20000206 	.word	0x20000206
 8001148:	20000208 	.word	0x20000208
 800114c:	2000020a 	.word	0x2000020a
 8001150:	2000020c 	.word	0x2000020c
 8001154:	2000020e 	.word	0x2000020e
 8001158:	20000210 	.word	0x20000210

0800115c <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;//Temperature register address: page 21
 8001162:	232e      	movs	r3, #46	; 0x2e
 8001164:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0}; //empty buffer to write to
 8001166:	2300      	movs	r3, #0
 8001168:	80bb      	strh	r3, [r7, #4]

	//write data from temp register to 0xF4(control registrer)
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, BMP180_CTRL_MEAS_REG, 1, &datatowrite, 1, 1000);
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2301      	movs	r3, #1
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	22f4      	movs	r2, #244	; 0xf4
 800117c:	21ee      	movs	r1, #238	; 0xee
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <Get_UTemp+0x60>)
 8001180:	f001 fa2a 	bl	80025d8 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001184:	2005      	movs	r0, #5
 8001186:	f000 fe8f 	bl	8001ea8 <HAL_Delay>

	//read data from 0xF6 and write it to temp_raw
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, BMP180_ADC_OUT_MSB_REG , 1, Temp_RAW, 2, 1000);
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2302      	movs	r3, #2
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	22f6      	movs	r2, #246	; 0xf6
 800119c:	21ee      	movs	r1, #238	; 0xee
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <Get_UTemp+0x60>)
 80011a0:	f001 fb14 	bl	80027cc <HAL_I2C_Mem_Read>

	//return the 16 bit representation of non-calibrated temperature data
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	797b      	ldrb	r3, [r7, #5]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b29b      	uxth	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000250 	.word	0x20000250

080011c0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();//get non-calibrated temp
 80011c4:	f7ff ffca 	bl	800115c <Get_UTemp>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <BMP180_GetTemp+0x104>)
 80011ce:	601a      	str	r2, [r3, #0]
	//calibrate the temperature
	//formula is found on page 15 in datasheet
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <BMP180_GetTemp+0x104>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a3c      	ldr	r2, [pc, #240]	; (80012c8 <BMP180_GetTemp+0x108>)
 80011d6:	8812      	ldrh	r2, [r2, #0]
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f912 	bl	8000404 <__aeabi_i2d>
 80011e0:	4604      	mov	r4, r0
 80011e2:	460d      	mov	r5, r1
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <BMP180_GetTemp+0x10c>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f90b 	bl	8000404 <__aeabi_i2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <BMP180_GetTemp+0x110>)
 80011f4:	f7ff fa9a 	bl	800072c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7ff f96a 	bl	80004d8 <__aeabi_dmul>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4618      	mov	r0, r3
 800120a:	4621      	mov	r1, r4
 800120c:	f7ff fc14 	bl	8000a38 <__aeabi_d2iz>
 8001210:	4602      	mov	r2, r0
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <BMP180_GetTemp+0x114>)
 8001214:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <BMP180_GetTemp+0x118>)
 8001218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f8f1 	bl	8000404 <__aeabi_i2d>
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <BMP180_GetTemp+0x11c>)
 8001228:	f7ff f956 	bl	80004d8 <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4625      	mov	r5, r4
 8001232:	461c      	mov	r4, r3
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <BMP180_GetTemp+0x120>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	461a      	mov	r2, r3
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <BMP180_GetTemp+0x114>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4413      	add	r3, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8de 	bl	8000404 <__aeabi_i2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff fa6c 	bl	800072c <__aeabi_ddiv>
 8001254:	4603      	mov	r3, r0
 8001256:	460c      	mov	r4, r1
 8001258:	4618      	mov	r0, r3
 800125a:	4621      	mov	r1, r4
 800125c:	f7ff fbec 	bl	8000a38 <__aeabi_d2iz>
 8001260:	4602      	mov	r2, r0
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <BMP180_GetTemp+0x124>)
 8001264:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <BMP180_GetTemp+0x114>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <BMP180_GetTemp+0x124>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <BMP180_GetTemp+0x128>)
 8001272:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <BMP180_GetTemp+0x128>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3308      	adds	r3, #8
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8c2 	bl	8000404 <__aeabi_i2d>
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <BMP180_GetTemp+0x12c>)
 8001286:	f7ff fa51 	bl	800072c <__aeabi_ddiv>
 800128a:	4603      	mov	r3, r0
 800128c:	460c      	mov	r4, r1
 800128e:	4618      	mov	r0, r3
 8001290:	4621      	mov	r1, r4
 8001292:	f7ff fbd1 	bl	8000a38 <__aeabi_d2iz>
 8001296:	4602      	mov	r2, r0
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <BMP180_GetTemp+0x130>)
 800129a:	601a      	str	r2, [r3, #0]
	//reture calibrated floating point representation of the temperature
	return Temp/10.0;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <BMP180_GetTemp+0x130>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8af 	bl	8000404 <__aeabi_i2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <BMP180_GetTemp+0x134>)
 80012ac:	f7ff fa3e 	bl	800072c <__aeabi_ddiv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	4618      	mov	r0, r3
 80012b6:	4621      	mov	r1, r4
 80012b8:	f7ff fc06 	bl	8000ac8 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bdb0      	pop	{r4, r5, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000214 	.word	0x20000214
 80012c8:	20000206 	.word	0x20000206
 80012cc:	20000204 	.word	0x20000204
 80012d0:	40e00000 	.word	0x40e00000
 80012d4:	2000021c 	.word	0x2000021c
 80012d8:	2000020e 	.word	0x2000020e
 80012dc:	40a00000 	.word	0x40a00000
 80012e0:	20000210 	.word	0x20000210
 80012e4:	20000220 	.word	0x20000220
 80012e8:	2000022c 	.word	0x2000022c
 80012ec:	40300000 	.word	0x40300000
 80012f0:	20000240 	.word	0x20000240
 80012f4:	40240000 	.word	0x40240000

080012f8 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af04      	add	r7, sp, #16
 80012fe:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);//read from whichever register 0 to 3 (depends on oss)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	b2db      	uxtb	r3, r3
 8001308:	3334      	adds	r3, #52	; 0x34
 800130a:	b2db      	uxtb	r3, r3
 800130c:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0}; //registers to write raw data to
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2100      	movs	r1, #0
 8001314:	460a      	mov	r2, r1
 8001316:	801a      	strh	r2, [r3, #0]
 8001318:	460a      	mov	r2, r1
 800131a:	709a      	strb	r2, [r3, #2]
	//write data from 0x34 to control register 0xf4 ??
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, BMP180_CTRL_MEAS_REG, 1, &datatowrite, 1, 1000);
 800131c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 030f 	add.w	r3, r7, #15
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	22f4      	movs	r2, #244	; 0xf4
 8001330:	21ee      	movs	r1, #238	; 0xee
 8001332:	481f      	ldr	r0, [pc, #124]	; (80013b0 <Get_UPress+0xb8>)
 8001334:	f001 f950 	bl	80025d8 <HAL_I2C_Mem_Write>
	//delay time is dependent on oversampling setting
	switch (oss)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d81a      	bhi.n	8001374 <Get_UPress+0x7c>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <Get_UPress+0x4c>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001355 	.word	0x08001355
 8001348:	0800135d 	.word	0x0800135d
 800134c:	08001365 	.word	0x08001365
 8001350:	0800136d 	.word	0x0800136d
	{
		case (0):
			HAL_Delay (5);
 8001354:	2005      	movs	r0, #5
 8001356:	f000 fda7 	bl	8001ea8 <HAL_Delay>
			break;
 800135a:	e00b      	b.n	8001374 <Get_UPress+0x7c>
		case (1):
			HAL_Delay (8);
 800135c:	2008      	movs	r0, #8
 800135e:	f000 fda3 	bl	8001ea8 <HAL_Delay>
			break;
 8001362:	e007      	b.n	8001374 <Get_UPress+0x7c>
		case (2):
			HAL_Delay (14);
 8001364:	200e      	movs	r0, #14
 8001366:	f000 fd9f 	bl	8001ea8 <HAL_Delay>
			break;
 800136a:	e003      	b.n	8001374 <Get_UPress+0x7c>
		case (3):
			HAL_Delay (26);
 800136c:	201a      	movs	r0, #26
 800136e:	f000 fd9b 	bl	8001ea8 <HAL_Delay>
			break;
 8001372:	bf00      	nop
	}
	//read data from pressure register to empty pressure buffer
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, BMP180_ADC_OUT_MSB_REG , 1, Press_RAW, 3, 1000);
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2303      	movs	r3, #3
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	22f6      	movs	r2, #246	; 0xf6
 8001388:	21ee      	movs	r1, #238	; 0xee
 800138a:	4809      	ldr	r0, [pc, #36]	; (80013b0 <Get_UPress+0xb8>)
 800138c:	f001 fa1e 	bl	80027cc <HAL_I2C_Mem_Read>
	//return the non-calibrated value as 32 bit value
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001390:	7b3b      	ldrb	r3, [r7, #12]
 8001392:	041a      	lsls	r2, r3, #16
 8001394:	7b7b      	ldrb	r3, [r7, #13]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4413      	add	r3, r2
 800139a:	7bba      	ldrb	r2, [r7, #14]
 800139c:	441a      	add	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f1c3 0308 	rsb	r3, r3, #8
 80013a4:	fa42 f303 	asr.w	r3, r2, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000250 	.word	0x20000250

080013b4 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);//get non-calibrated pressure
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff9b 	bl	80012f8 <Get_UPress>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4ba8      	ldr	r3, [pc, #672]	; (8001668 <BMP180_GetPress+0x2b4>)
 80013c8:	601a      	str	r2, [r3, #0]
	//calibrate the prssure
	//change all the powers to bit shifts and get rid of math lib

	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80013ca:	4ba8      	ldr	r3, [pc, #672]	; (800166c <BMP180_GetPress+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4aa8      	ldr	r2, [pc, #672]	; (8001670 <BMP180_GetPress+0x2bc>)
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f815 	bl	8000404 <__aeabi_i2d>
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	4ba5      	ldr	r3, [pc, #660]	; (8001674 <BMP180_GetPress+0x2c0>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f80e 	bl	8000404 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4ba2      	ldr	r3, [pc, #648]	; (8001678 <BMP180_GetPress+0x2c4>)
 80013ee:	f7ff f99d 	bl	800072c <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4620      	mov	r0, r4
 80013f8:	4629      	mov	r1, r5
 80013fa:	f7ff f86d 	bl	80004d8 <__aeabi_dmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fb17 	bl	8000a38 <__aeabi_d2iz>
 800140a:	4602      	mov	r2, r0
 800140c:	4b9b      	ldr	r3, [pc, #620]	; (800167c <BMP180_GetPress+0x2c8>)
 800140e:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001410:	4b9b      	ldr	r3, [pc, #620]	; (8001680 <BMP180_GetPress+0x2cc>)
 8001412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fff4 	bl	8000404 <__aeabi_i2d>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b98      	ldr	r3, [pc, #608]	; (8001684 <BMP180_GetPress+0x2d0>)
 8001422:	f7ff f859 	bl	80004d8 <__aeabi_dmul>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	4625      	mov	r5, r4
 800142c:	461c      	mov	r4, r3
 800142e:	4b96      	ldr	r3, [pc, #600]	; (8001688 <BMP180_GetPress+0x2d4>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	461a      	mov	r2, r3
 8001436:	4b91      	ldr	r3, [pc, #580]	; (800167c <BMP180_GetPress+0x2c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ffe1 	bl	8000404 <__aeabi_i2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4620      	mov	r0, r4
 8001448:	4629      	mov	r1, r5
 800144a:	f7ff f96f 	bl	800072c <__aeabi_ddiv>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	4618      	mov	r0, r3
 8001454:	4621      	mov	r1, r4
 8001456:	f7ff faef 	bl	8000a38 <__aeabi_d2iz>
 800145a:	4602      	mov	r2, r0
 800145c:	4b8b      	ldr	r3, [pc, #556]	; (800168c <BMP180_GetPress+0x2d8>)
 800145e:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 8001460:	4b86      	ldr	r3, [pc, #536]	; (800167c <BMP180_GetPress+0x2c8>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b89      	ldr	r3, [pc, #548]	; (800168c <BMP180_GetPress+0x2d8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	4a89      	ldr	r2, [pc, #548]	; (8001690 <BMP180_GetPress+0x2dc>)
 800146c:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <BMP180_GetPress+0x2dc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001476:	4a87      	ldr	r2, [pc, #540]	; (8001694 <BMP180_GetPress+0x2e0>)
 8001478:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800147a:	4b87      	ldr	r3, [pc, #540]	; (8001698 <BMP180_GetPress+0x2e4>)
 800147c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe ffbf 	bl	8000404 <__aeabi_i2d>
 8001486:	4604      	mov	r4, r0
 8001488:	460d      	mov	r5, r1
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <BMP180_GetPress+0x2e0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a81      	ldr	r2, [pc, #516]	; (8001694 <BMP180_GetPress+0x2e0>)
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ffb4 	bl	8000404 <__aeabi_i2d>
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <BMP180_GetPress+0x2e8>)
 80014a2:	f7ff f943 	bl	800072c <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7ff f813 	bl	80004d8 <__aeabi_dmul>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b71      	ldr	r3, [pc, #452]	; (8001684 <BMP180_GetPress+0x2d0>)
 80014c0:	f7ff f934 	bl	800072c <__aeabi_ddiv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4618      	mov	r0, r3
 80014ca:	4621      	mov	r1, r4
 80014cc:	f7ff fab4 	bl	8000a38 <__aeabi_d2iz>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b6a      	ldr	r3, [pc, #424]	; (800167c <BMP180_GetPress+0x2c8>)
 80014d4:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <BMP180_GetPress+0x2ec>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <BMP180_GetPress+0x2e0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fb03 f302 	mul.w	r3, r3, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff8c 	bl	8000404 <__aeabi_i2d>
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b64      	ldr	r3, [pc, #400]	; (8001684 <BMP180_GetPress+0x2d0>)
 80014f2:	f7ff f91b 	bl	800072c <__aeabi_ddiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	460c      	mov	r4, r1
 80014fa:	4618      	mov	r0, r3
 80014fc:	4621      	mov	r1, r4
 80014fe:	f7ff fa9b 	bl	8000a38 <__aeabi_d2iz>
 8001502:	4602      	mov	r2, r0
 8001504:	4b61      	ldr	r3, [pc, #388]	; (800168c <BMP180_GetPress+0x2d8>)
 8001506:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <BMP180_GetPress+0x2c8>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b5f      	ldr	r3, [pc, #380]	; (800168c <BMP180_GetPress+0x2d8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4413      	add	r3, r2
 8001512:	4a64      	ldr	r2, [pc, #400]	; (80016a4 <BMP180_GetPress+0x2f0>)
 8001514:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001516:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <BMP180_GetPress+0x2f4>)
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	009a      	lsls	r2, r3, #2
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <BMP180_GetPress+0x2f0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	441a      	add	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	3302      	adds	r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	da00      	bge.n	8001532 <BMP180_GetPress+0x17e>
 8001530:	3303      	adds	r3, #3
 8001532:	109b      	asrs	r3, r3, #2
 8001534:	461a      	mov	r2, r3
 8001536:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <BMP180_GetPress+0x2f8>)
 8001538:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800153a:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <BMP180_GetPress+0x2fc>)
 800153c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001540:	461a      	mov	r2, r3
 8001542:	4b54      	ldr	r3, [pc, #336]	; (8001694 <BMP180_GetPress+0x2e0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fb03 f302 	mul.w	r3, r3, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff5a 	bl	8000404 <__aeabi_i2d>
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <BMP180_GetPress+0x300>)
 8001556:	f7ff f8e9 	bl	800072c <__aeabi_ddiv>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	4618      	mov	r0, r3
 8001560:	4621      	mov	r1, r4
 8001562:	f7ff fa69 	bl	8000a38 <__aeabi_d2iz>
 8001566:	4602      	mov	r2, r0
 8001568:	4b44      	ldr	r3, [pc, #272]	; (800167c <BMP180_GetPress+0x2c8>)
 800156a:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800156c:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <BMP180_GetPress+0x304>)
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ff46 	bl	8000404 <__aeabi_i2d>
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <BMP180_GetPress+0x2e0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a44      	ldr	r2, [pc, #272]	; (8001694 <BMP180_GetPress+0x2e0>)
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff3b 	bl	8000404 <__aeabi_i2d>
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <BMP180_GetPress+0x2e8>)
 8001594:	f7ff f8ca 	bl	800072c <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7fe ff9a 	bl	80004d8 <__aeabi_dmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	4618      	mov	r0, r3
 80015aa:	4621      	mov	r1, r4
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b42      	ldr	r3, [pc, #264]	; (80016bc <BMP180_GetPress+0x308>)
 80015b2:	f7ff f8bb 	bl	800072c <__aeabi_ddiv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	4618      	mov	r0, r3
 80015bc:	4621      	mov	r1, r4
 80015be:	f7ff fa3b 	bl	8000a38 <__aeabi_d2iz>
 80015c2:	4602      	mov	r2, r0
 80015c4:	4b31      	ldr	r3, [pc, #196]	; (800168c <BMP180_GetPress+0x2d8>)
 80015c6:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80015c8:	4b2c      	ldr	r3, [pc, #176]	; (800167c <BMP180_GetPress+0x2c8>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <BMP180_GetPress+0x2d8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	3302      	adds	r3, #2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff15 	bl	8000404 <__aeabi_i2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <BMP180_GetPress+0x30c>)
 80015e0:	f7ff f8a4 	bl	800072c <__aeabi_ddiv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	4618      	mov	r0, r3
 80015ea:	4621      	mov	r1, r4
 80015ec:	f7ff fa24 	bl	8000a38 <__aeabi_d2iz>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <BMP180_GetPress+0x2f0>)
 80015f4:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015f6:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <BMP180_GetPress+0x310>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <BMP180_GetPress+0x2f0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001604:	fb03 f302 	mul.w	r3, r3, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe feeb 	bl	80003e4 <__aeabi_ui2d>
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <BMP180_GetPress+0x2c4>)
 8001614:	f7ff f88a 	bl	800072c <__aeabi_ddiv>
 8001618:	4603      	mov	r3, r0
 800161a:	460c      	mov	r4, r1
 800161c:	4618      	mov	r0, r3
 800161e:	4621      	mov	r1, r4
 8001620:	f7ff fa32 	bl	8000a88 <__aeabi_d2uiz>
 8001624:	4602      	mov	r2, r0
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <BMP180_GetPress+0x314>)
 8001628:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <BMP180_GetPress+0x2b4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <BMP180_GetPress+0x2f8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f24c 3150 	movw	r1, #50000	; 0xc350
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	fa41 f202 	asr.w	r2, r1, r2
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <BMP180_GetPress+0x318>)
 8001646:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <BMP180_GetPress+0x318>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db41      	blt.n	80016d4 <BMP180_GetPress+0x320>
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <BMP180_GetPress+0x318>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	005a      	lsls	r2, r3, #1
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <BMP180_GetPress+0x314>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <BMP180_GetPress+0x31c>)
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e040      	b.n	80016e8 <BMP180_GetPress+0x334>
 8001666:	bf00      	nop
 8001668:	20000218 	.word	0x20000218
 800166c:	20000214 	.word	0x20000214
 8001670:	20000206 	.word	0x20000206
 8001674:	20000204 	.word	0x20000204
 8001678:	40e00000 	.word	0x40e00000
 800167c:	2000021c 	.word	0x2000021c
 8001680:	2000020e 	.word	0x2000020e
 8001684:	40a00000 	.word	0x40a00000
 8001688:	20000210 	.word	0x20000210
 800168c:	20000220 	.word	0x20000220
 8001690:	2000022c 	.word	0x2000022c
 8001694:	20000234 	.word	0x20000234
 8001698:	2000020a 	.word	0x2000020a
 800169c:	40b00000 	.word	0x40b00000
 80016a0:	200001fe 	.word	0x200001fe
 80016a4:	20000224 	.word	0x20000224
 80016a8:	200001fc 	.word	0x200001fc
 80016ac:	20000228 	.word	0x20000228
 80016b0:	20000200 	.word	0x20000200
 80016b4:	40c00000 	.word	0x40c00000
 80016b8:	20000208 	.word	0x20000208
 80016bc:	40f00000 	.word	0x40f00000
 80016c0:	40100000 	.word	0x40100000
 80016c4:	20000202 	.word	0x20000202
 80016c8:	20000230 	.word	0x20000230
 80016cc:	20000238 	.word	0x20000238
 80016d0:	2000023c 	.word	0x2000023c
	else Press = (B7/B4)*2;
 80016d4:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <BMP180_GetPress+0x43c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <BMP180_GetPress+0x440>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <BMP180_GetPress+0x444>)
 80016e6:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016e8:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <BMP180_GetPress+0x444>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fe89 	bl	8000404 <__aeabi_i2d>
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <BMP180_GetPress+0x448>)
 80016f8:	f7ff f818 	bl	800072c <__aeabi_ddiv>
 80016fc:	4603      	mov	r3, r0
 80016fe:	460c      	mov	r4, r1
 8001700:	4625      	mov	r5, r4
 8001702:	461c      	mov	r4, r3
 8001704:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <BMP180_GetPress+0x444>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe7b 	bl	8000404 <__aeabi_i2d>
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <BMP180_GetPress+0x448>)
 8001714:	f7ff f80a 	bl	800072c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7fe feda 	bl	80004d8 <__aeabi_dmul>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	4618      	mov	r0, r3
 800172a:	4621      	mov	r1, r4
 800172c:	f7ff f984 	bl	8000a38 <__aeabi_d2iz>
 8001730:	4602      	mov	r2, r0
 8001732:	4b33      	ldr	r3, [pc, #204]	; (8001800 <BMP180_GetPress+0x44c>)
 8001734:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <BMP180_GetPress+0x44c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f640 32de 	movw	r2, #3038	; 0xbde
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fe5e 	bl	8000404 <__aeabi_i2d>
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <BMP180_GetPress+0x450>)
 800174e:	f7fe ffed 	bl	800072c <__aeabi_ddiv>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4618      	mov	r0, r3
 8001758:	4621      	mov	r1, r4
 800175a:	f7ff f96d 	bl	8000a38 <__aeabi_d2iz>
 800175e:	4602      	mov	r2, r0
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <BMP180_GetPress+0x44c>)
 8001762:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <BMP180_GetPress+0x444>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <BMP180_GetPress+0x454>)
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe48 	bl	8000404 <__aeabi_i2d>
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <BMP180_GetPress+0x450>)
 800177a:	f7fe ffd7 	bl	800072c <__aeabi_ddiv>
 800177e:	4603      	mov	r3, r0
 8001780:	460c      	mov	r4, r1
 8001782:	4618      	mov	r0, r3
 8001784:	4621      	mov	r1, r4
 8001786:	f7ff f957 	bl	8000a38 <__aeabi_d2iz>
 800178a:	4602      	mov	r2, r0
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <BMP180_GetPress+0x458>)
 800178e:	601a      	str	r2, [r3, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <BMP180_GetPress+0x444>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe35 	bl	8000404 <__aeabi_i2d>
 800179a:	4604      	mov	r4, r0
 800179c:	460d      	mov	r5, r1
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <BMP180_GetPress+0x44c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <BMP180_GetPress+0x458>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe29 	bl	8000404 <__aeabi_i2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <BMP180_GetPress+0x45c>)
 80017b8:	f7fe ffb8 	bl	800072c <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fcd2 	bl	800016c <__adddf3>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4618      	mov	r0, r3
 80017ce:	4621      	mov	r1, r4
 80017d0:	f7ff f932 	bl	8000a38 <__aeabi_d2iz>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <BMP180_GetPress+0x444>)
 80017d8:	601a      	str	r2, [r3, #0]


	//return floating point value of calibrated pressure
	return Press;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <BMP180_GetPress+0x444>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fa7c 	bl	8000cdc <__aeabi_i2f>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000238 	.word	0x20000238
 80017f4:	20000230 	.word	0x20000230
 80017f8:	2000023c 	.word	0x2000023c
 80017fc:	40700000 	.word	0x40700000
 8001800:	2000021c 	.word	0x2000021c
 8001804:	40f00000 	.word	0x40f00000
 8001808:	ffffe343 	.word	0xffffe343
 800180c:	20000220 	.word	0x20000220
 8001810:	40300000 	.word	0x40300000
 8001814:	00000000 	.word	0x00000000

08001818 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);//get pressure
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fdc7 	bl	80013b4 <BMP180_GetPress>
	//compare it to sea level pressures
	//formula on  pg 16
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <BMP180_GetAlt+0x80>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fa56 	bl	8000cdc <__aeabi_i2f>
 8001830:	4603      	mov	r3, r0
 8001832:	491a      	ldr	r1, [pc, #104]	; (800189c <BMP180_GetAlt+0x84>)
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fb59 	bl	8000eec <__aeabi_fdiv>
 800183a:	4603      	mov	r3, r0
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fdf3 	bl	8000428 <__aeabi_f2d>
 8001842:	a311      	add	r3, pc, #68	; (adr r3, 8001888 <BMP180_GetAlt+0x70>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f004 fbc0 	bl	8005fcc <pow>
 800184c:	4603      	mov	r3, r0
 800184e:	460c      	mov	r4, r1
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	4911      	ldr	r1, [pc, #68]	; (80018a0 <BMP180_GetAlt+0x88>)
 800185a:	f7fe fc85 	bl	8000168 <__aeabi_dsub>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	4618      	mov	r0, r3
 8001864:	4621      	mov	r1, r4
 8001866:	a30a      	add	r3, pc, #40	; (adr r3, 8001890 <BMP180_GetAlt+0x78>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fe34 	bl	80004d8 <__aeabi_dmul>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4618      	mov	r0, r3
 8001876:	4621      	mov	r1, r4
 8001878:	f7ff f926 	bl	8000ac8 <__aeabi_d2f>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	bf00      	nop
 8001888:	ccd745e4 	.word	0xccd745e4
 800188c:	3fc85b95 	.word	0x3fc85b95
 8001890:	00000000 	.word	0x00000000
 8001894:	40e5a540 	.word	0x40e5a540
 8001898:	2000023c 	.word	0x2000023c
 800189c:	47c5e680 	.word	0x47c5e680
 80018a0:	3ff00000 	.word	0x3ff00000

080018a4 <BMP180_Start>:

void BMP180_Start (void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	//read calibration data from registers
	read_calliberation_data();
 80018a8:	f7ff fbbc 	bl	8001024 <read_calliberation_data>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b093      	sub	sp, #76	; 0x4c
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b6:	f000 fa95 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ba:	f000 f87d 	bl	80019b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018be:	f000 f919 	bl	8001af4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80018c2:	f000 f8bf 	bl	8001a44 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80018c6:	f000 f8eb 	bl	8001aa0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t msg[64] ={0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2240      	movs	r2, #64	; 0x40
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fb35 	bl	8003f40 <memset>


  BMP180_Start();
 80018d6:	f7ff ffe5 	bl	80018a4 <BMP180_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(500);
 80018da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018de:	f000 fae3 	bl	8001ea8 <HAL_Delay>

	  //read calibration data
	  read_calliberation_data();
 80018e2:	f7ff fb9f 	bl	8001024 <read_calliberation_data>
	  float temp = BMP180_GetTemp()*(9.0/5.0)+32.0;
 80018e6:	f7ff fc6b 	bl	80011c0 <BMP180_GetTemp>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fd9b 	bl	8000428 <__aeabi_f2d>
 80018f2:	a329      	add	r3, pc, #164	; (adr r3, 8001998 <main+0xe8>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fdee 	bl	80004d8 <__aeabi_dmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	4618      	mov	r0, r3
 8001902:	4621      	mov	r1, r4
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <main+0xf8>)
 800190a:	f7fe fc2f 	bl	800016c <__adddf3>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	4618      	mov	r0, r3
 8001914:	4621      	mov	r1, r4
 8001916:	f7ff f8d7 	bl	8000ac8 <__aeabi_d2f>
 800191a:	4603      	mov	r3, r0
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
	  memset(msg,0,sizeof(msg));
 800191e:	463b      	mov	r3, r7
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fb0b 	bl	8003f40 <memset>
	  sprintf(msg,"Temp: %.2f F\r\n",temp);
 800192a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800192c:	f7fe fd7c 	bl	8000428 <__aeabi_f2d>
 8001930:	4603      	mov	r3, r0
 8001932:	460c      	mov	r4, r1
 8001934:	4638      	mov	r0, r7
 8001936:	461a      	mov	r2, r3
 8001938:	4623      	mov	r3, r4
 800193a:	491c      	ldr	r1, [pc, #112]	; (80019ac <main+0xfc>)
 800193c:	f002 ff58 	bl	80047f0 <siprintf>
	  HAL_UART_Transmit(&huart2,msg, sizeof(msg),HAL_MAX_DELAY);
 8001940:	4639      	mov	r1, r7
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	4819      	ldr	r0, [pc, #100]	; (80019b0 <main+0x100>)
 800194a:	f002 f964 	bl	8003c16 <HAL_UART_Transmit>

	  float alt = BMP180_GetAlt(3);
 800194e:	2003      	movs	r0, #3
 8001950:	f7ff ff62 	bl	8001818 <BMP180_GetAlt>
 8001954:	6438      	str	r0, [r7, #64]	; 0x40
	  memset(msg,0,sizeof(msg));
 8001956:	463b      	mov	r3, r7
 8001958:	2240      	movs	r2, #64	; 0x40
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f002 faef 	bl	8003f40 <memset>
	  sprintf(msg,"Altitude: %.1f ft\r\n",alt*3.2808);
 8001962:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001964:	f7fe fd60 	bl	8000428 <__aeabi_f2d>
 8001968:	a30d      	add	r3, pc, #52	; (adr r3, 80019a0 <main+0xf0>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fdb3 	bl	80004d8 <__aeabi_dmul>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	4638      	mov	r0, r7
 8001978:	461a      	mov	r2, r3
 800197a:	4623      	mov	r3, r4
 800197c:	490d      	ldr	r1, [pc, #52]	; (80019b4 <main+0x104>)
 800197e:	f002 ff37 	bl	80047f0 <siprintf>
	  HAL_UART_Transmit(&huart2,msg, sizeof(msg),HAL_MAX_DELAY);
 8001982:	4639      	mov	r1, r7
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <main+0x100>)
 800198c:	f002 f943 	bl	8003c16 <HAL_UART_Transmit>
  {
 8001990:	e7a3      	b.n	80018da <main+0x2a>
 8001992:	bf00      	nop
 8001994:	f3af 8000 	nop.w
 8001998:	cccccccd 	.word	0xcccccccd
 800199c:	3ffccccc 	.word	0x3ffccccc
 80019a0:	1205bc02 	.word	0x1205bc02
 80019a4:	400a3f14 	.word	0x400a3f14
 80019a8:	40400000 	.word	0x40400000
 80019ac:	08007038 	.word	0x08007038
 80019b0:	200002a4 	.word	0x200002a4
 80019b4:	08007048 	.word	0x08007048

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b090      	sub	sp, #64	; 0x40
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	2228      	movs	r2, #40	; 0x28
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 faba 	bl	8003f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019da:	2301      	movs	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ec:	2302      	movs	r3, #2
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fc9f 	bl	8003344 <HAL_RCC_OscConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a0c:	f000 f8a0 	bl	8001b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a10:	230f      	movs	r3, #15
 8001a12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a14:	2302      	movs	r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 ff0a 	bl	8003844 <HAL_RCC_ClockConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a36:	f000 f88b 	bl	8001b50 <Error_Handler>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3740      	adds	r7, #64	; 0x40
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <MX_I2C2_Init+0x54>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <MX_I2C2_Init+0x58>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a82:	f000 fc71 	bl	8002368 <HAL_I2C_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a8c:	f000 f860 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000250 	.word	0x20000250
 8001a98:	40005800 	.word	0x40005800
 8001a9c:	000186a0 	.word	0x000186a0

08001aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_USART2_UART_Init+0x50>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_USART2_UART_Init+0x4c>)
 8001ad8:	f002 f850 	bl	8003b7c <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ae2:	f000 f835 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200002a4 	.word	0x200002a4
 8001af0:	40004400 	.word	0x40004400

08001af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001b00:	f043 0320 	orr.w	r3, r3, #32
 8001b04:	6193      	str	r3, [r2, #24]
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <MX_GPIO_Init+0x58>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <Error_Handler+0x6>

08001b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6193      	str	r3, [r2, #24]
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	61d3      	str	r3, [r2, #28]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_MspInit+0x60>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_MspInit+0x60>)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000

08001bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_I2C_MspInit+0x74>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d124      	bne.n	8001c26 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bf4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_I2C_MspInit+0x7c>)
 8001c0a:	f000 fa53 	bl	80020b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40005800 	.word	0x40005800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010c00 	.word	0x40010c00

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d12f      	bne.n	8001cbc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c66:	61d3      	str	r3, [r2, #28]
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <HAL_UART_MspInit+0x90>)
 8001ca0:	f000 fa08 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_UART_MspInit+0x90>)
 8001cb8:	f000 f9fc 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d16:	f000 f8ab 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <_sbrk+0x5c>)
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <_sbrk+0x60>)
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <_sbrk+0x64>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <_sbrk+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d207      	bcs.n	8001d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d50:	f002 f8cc 	bl	8003eec <__errno>
 8001d54:	4602      	mov	r2, r0
 8001d56:	230c      	movs	r3, #12
 8001d58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	e009      	b.n	8001d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <_sbrk+0x64>)
 8001d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20005000 	.word	0x20005000
 8001d80:	00000400 	.word	0x00000400
 8001d84:	20000244 	.word	0x20000244
 8001d88:	200002f0 	.word	0x200002f0

08001d8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d9a:	e003      	b.n	8001da4 <LoopCopyDataInit>

08001d9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001da0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001da2:	3104      	adds	r1, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001da8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001daa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dac:	d3f6      	bcc.n	8001d9c <CopyDataInit>
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001db0:	e002      	b.n	8001db8 <LoopFillZerobss>

08001db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001db4:	f842 3b04 	str.w	r3, [r2], #4

08001db8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001dbc:	d3f9      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dbe:	f7ff ffe5 	bl	8001d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f002 f899 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dc6:	f7ff fd73 	bl	80018b0 <main>
  bx lr
 8001dca:	4770      	bx	lr
  ldr r3, =_sidata
 8001dcc:	08007338 	.word	0x08007338
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001dd4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001dd8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001ddc:	200002ec 	.word	0x200002ec

08001de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_2_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x28>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x28>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f929 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff feaa 	bl	8001b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f933 	bl	800209a <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f000 f909 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_IncTick+0x1c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_IncTick+0x20>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a03      	ldr	r2, [pc, #12]	; (8001e90 <HAL_IncTick+0x20>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	200002e4 	.word	0x200002e4

08001e94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b02      	ldr	r3, [pc, #8]	; (8001ea4 <HAL_GetTick+0x10>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	200002e4 	.word	0x200002e4

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_Delay+0x40>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffe0 	bl	8001e94 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000008 	.word	0x20000008

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff90 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff49 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff5e 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff90 	bl	8001fa4 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5f 	bl	8001f50 <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffb0 	bl	8002008 <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b08b      	sub	sp, #44	; 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c6:	e127      	b.n	8002318 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020c8:	2201      	movs	r2, #1
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f040 8116 	bne.w	8002312 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d034      	beq.n	8002158 <HAL_GPIO_Init+0xa4>
 80020ee:	2b12      	cmp	r3, #18
 80020f0:	d80d      	bhi.n	800210e <HAL_GPIO_Init+0x5a>
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d02b      	beq.n	800214e <HAL_GPIO_Init+0x9a>
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d804      	bhi.n	8002104 <HAL_GPIO_Init+0x50>
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d031      	beq.n	8002162 <HAL_GPIO_Init+0xae>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d01c      	beq.n	800213c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002102:	e048      	b.n	8002196 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002104:	2b03      	cmp	r3, #3
 8002106:	d043      	beq.n	8002190 <HAL_GPIO_Init+0xdc>
 8002108:	2b11      	cmp	r3, #17
 800210a:	d01b      	beq.n	8002144 <HAL_GPIO_Init+0x90>
          break;
 800210c:	e043      	b.n	8002196 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800210e:	4a89      	ldr	r2, [pc, #548]	; (8002334 <HAL_GPIO_Init+0x280>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d026      	beq.n	8002162 <HAL_GPIO_Init+0xae>
 8002114:	4a87      	ldr	r2, [pc, #540]	; (8002334 <HAL_GPIO_Init+0x280>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d806      	bhi.n	8002128 <HAL_GPIO_Init+0x74>
 800211a:	4a87      	ldr	r2, [pc, #540]	; (8002338 <HAL_GPIO_Init+0x284>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d020      	beq.n	8002162 <HAL_GPIO_Init+0xae>
 8002120:	4a86      	ldr	r2, [pc, #536]	; (800233c <HAL_GPIO_Init+0x288>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01d      	beq.n	8002162 <HAL_GPIO_Init+0xae>
          break;
 8002126:	e036      	b.n	8002196 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002128:	4a85      	ldr	r2, [pc, #532]	; (8002340 <HAL_GPIO_Init+0x28c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0xae>
 800212e:	4a85      	ldr	r2, [pc, #532]	; (8002344 <HAL_GPIO_Init+0x290>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d016      	beq.n	8002162 <HAL_GPIO_Init+0xae>
 8002134:	4a84      	ldr	r2, [pc, #528]	; (8002348 <HAL_GPIO_Init+0x294>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0xae>
          break;
 800213a:	e02c      	b.n	8002196 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e028      	b.n	8002196 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	3304      	adds	r3, #4
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e023      	b.n	8002196 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	3308      	adds	r3, #8
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e01e      	b.n	8002196 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	330c      	adds	r3, #12
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e019      	b.n	8002196 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216a:	2304      	movs	r3, #4
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e012      	b.n	8002196 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	611a      	str	r2, [r3, #16]
          break;
 8002182:	e008      	b.n	8002196 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	615a      	str	r2, [r3, #20]
          break;
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2bff      	cmp	r3, #255	; 0xff
 800219a:	d801      	bhi.n	80021a0 <HAL_GPIO_Init+0xec>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	e001      	b.n	80021a4 <HAL_GPIO_Init+0xf0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2bff      	cmp	r3, #255	; 0xff
 80021aa:	d802      	bhi.n	80021b2 <HAL_GPIO_Init+0xfe>
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x104>
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	3b08      	subs	r3, #8
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	210f      	movs	r1, #15
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	401a      	ands	r2, r3
 80021ca:	6a39      	ldr	r1, [r7, #32]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	431a      	orrs	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8096 	beq.w	8002312 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e6:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_GPIO_Init+0x298>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_GPIO_Init+0x298>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6193      	str	r3, [r2, #24]
 80021f2:	4b56      	ldr	r3, [pc, #344]	; (800234c <HAL_GPIO_Init+0x298>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021fe:	4a54      	ldr	r2, [pc, #336]	; (8002350 <HAL_GPIO_Init+0x29c>)
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <HAL_GPIO_Init+0x2a0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x19e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <HAL_GPIO_Init+0x2a4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x19a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a49      	ldr	r2, [pc, #292]	; (800235c <HAL_GPIO_Init+0x2a8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x196>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a48      	ldr	r2, [pc, #288]	; (8002360 <HAL_GPIO_Init+0x2ac>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x192>
 8002242:	2303      	movs	r3, #3
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x1a0>
 8002246:	2304      	movs	r3, #4
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x1a0>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x1a0>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x1a0>
 8002252:	2300      	movs	r3, #0
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002264:	493a      	ldr	r1, [pc, #232]	; (8002350 <HAL_GPIO_Init+0x29c>)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4938      	ldr	r1, [pc, #224]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
 800228a:	e006      	b.n	800229a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	43db      	mvns	r3, r3
 8002294:	4933      	ldr	r1, [pc, #204]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 8002296:	4013      	ands	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	492e      	ldr	r1, [pc, #184]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
 80022b2:	e006      	b.n	80022c2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	4929      	ldr	r1, [pc, #164]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022be:	4013      	ands	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022ce:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	4924      	ldr	r1, [pc, #144]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
 80022da:	e006      	b.n	80022ea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	491f      	ldr	r1, [pc, #124]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60cb      	str	r3, [r1, #12]
 8002302:	e006      	b.n	8002312 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	43db      	mvns	r3, r3
 800230c:	4915      	ldr	r1, [pc, #84]	; (8002364 <HAL_GPIO_Init+0x2b0>)
 800230e:	4013      	ands	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	3301      	adds	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	f47f aed0 	bne.w	80020c8 <HAL_GPIO_Init+0x14>
  }
}
 8002328:	bf00      	nop
 800232a:	372c      	adds	r7, #44	; 0x2c
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	10210000 	.word	0x10210000
 8002338:	10110000 	.word	0x10110000
 800233c:	10120000 	.word	0x10120000
 8002340:	10310000 	.word	0x10310000
 8002344:	10320000 	.word	0x10320000
 8002348:	10220000 	.word	0x10220000
 800234c:	40021000 	.word	0x40021000
 8002350:	40010000 	.word	0x40010000
 8002354:	40010800 	.word	0x40010800
 8002358:	40010c00 	.word	0x40010c00
 800235c:	40011000 	.word	0x40011000
 8002360:	40011400 	.word	0x40011400
 8002364:	40010400 	.word	0x40010400

08002368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e11f      	b.n	80025ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fc14 	bl	8001bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023cc:	f001 fb90 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 80023d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a7b      	ldr	r2, [pc, #492]	; (80025c4 <HAL_I2C_Init+0x25c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d807      	bhi.n	80023ec <HAL_I2C_Init+0x84>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a7a      	ldr	r2, [pc, #488]	; (80025c8 <HAL_I2C_Init+0x260>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e006      	b.n	80023fa <HAL_I2C_Init+0x92>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a77      	ldr	r2, [pc, #476]	; (80025cc <HAL_I2C_Init+0x264>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf94      	ite	ls
 80023f4:	2301      	movls	r3, #1
 80023f6:	2300      	movhi	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0db      	b.n	80025ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a72      	ldr	r2, [pc, #456]	; (80025d0 <HAL_I2C_Init+0x268>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9b      	lsrs	r3, r3, #18
 800240c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a64      	ldr	r2, [pc, #400]	; (80025c4 <HAL_I2C_Init+0x25c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d802      	bhi.n	800243c <HAL_I2C_Init+0xd4>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3301      	adds	r3, #1
 800243a:	e009      	b.n	8002450 <HAL_I2C_Init+0xe8>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	4a63      	ldr	r2, [pc, #396]	; (80025d4 <HAL_I2C_Init+0x26c>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	3301      	adds	r3, #1
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	430b      	orrs	r3, r1
 8002456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4956      	ldr	r1, [pc, #344]	; (80025c4 <HAL_I2C_Init+0x25c>)
 800246c:	428b      	cmp	r3, r1
 800246e:	d80d      	bhi.n	800248c <HAL_I2C_Init+0x124>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e59      	subs	r1, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fbb1 f3f3 	udiv	r3, r1, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	2b04      	cmp	r3, #4
 8002486:	bf38      	it	cc
 8002488:	2304      	movcc	r3, #4
 800248a:	e04f      	b.n	800252c <HAL_I2C_Init+0x1c4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_I2C_Init+0x150>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e012      	b.n	80024de <HAL_I2C_Init+0x176>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e58      	subs	r0, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	0099      	lsls	r1, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x17e>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e022      	b.n	800252c <HAL_I2C_Init+0x1c4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10e      	bne.n	800250c <HAL_I2C_Init+0x1a4>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e58      	subs	r0, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	440b      	add	r3, r1
 80024fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250a:	e00f      	b.n	800252c <HAL_I2C_Init+0x1c4>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	0099      	lsls	r1, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	6809      	ldr	r1, [r1, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800255a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6911      	ldr	r1, [r2, #16]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68d2      	ldr	r2, [r2, #12]
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	000186a0 	.word	0x000186a0
 80025c8:	001e847f 	.word	0x001e847f
 80025cc:	003d08ff 	.word	0x003d08ff
 80025d0:	431bde83 	.word	0x431bde83
 80025d4:	10624dd3 	.word	0x10624dd3

080025d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	817b      	strh	r3, [r7, #10]
 80025ea:	460b      	mov	r3, r1
 80025ec:	813b      	strh	r3, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025f2:	f7ff fc4f 	bl	8001e94 <HAL_GetTick>
 80025f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b20      	cmp	r3, #32
 8002602:	f040 80d9 	bne.w	80027b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2319      	movs	r3, #25
 800260c:	2201      	movs	r2, #1
 800260e:	496d      	ldr	r1, [pc, #436]	; (80027c4 <HAL_I2C_Mem_Write+0x1ec>)
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fcbb 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
 800261e:	e0cc      	b.n	80027ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_I2C_Mem_Write+0x56>
 800262a:	2302      	movs	r3, #2
 800262c:	e0c5      	b.n	80027ba <HAL_I2C_Mem_Write+0x1e2>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d007      	beq.n	8002654 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2221      	movs	r2, #33	; 0x21
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a4d      	ldr	r2, [pc, #308]	; (80027c8 <HAL_I2C_Mem_Write+0x1f0>)
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002696:	88f8      	ldrh	r0, [r7, #6]
 8002698:	893a      	ldrh	r2, [r7, #8]
 800269a:	8979      	ldrh	r1, [r7, #10]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4603      	mov	r3, r0
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 faf2 	bl	8002c90 <I2C_RequestMemoryWrite>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d052      	beq.n	8002758 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e081      	b.n	80027ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fd3c 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d107      	bne.n	80026de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06b      	b.n	80027ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11b      	bne.n	8002758 <HAL_I2C_Mem_Write+0x180>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d017      	beq.n	8002758 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1aa      	bne.n	80026b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fd28 	bl	80031ba <I2C_WaitOnBTFFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00d      	beq.n	800278c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2b04      	cmp	r3, #4
 8002776:	d107      	bne.n	8002788 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002786:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e016      	b.n	80027ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	00100002 	.word	0x00100002
 80027c8:	ffff0000 	.word	0xffff0000

080027cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	817b      	strh	r3, [r7, #10]
 80027de:	460b      	mov	r3, r1
 80027e0:	813b      	strh	r3, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ea:	f7ff fb53 	bl	8001e94 <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	f040 823d 	bne.w	8002c78 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2319      	movs	r3, #25
 8002804:	2201      	movs	r2, #1
 8002806:	4981      	ldr	r1, [pc, #516]	; (8002a0c <HAL_I2C_Mem_Read+0x240>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fbbf 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	e230      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Mem_Read+0x5a>
 8002822:	2302      	movs	r3, #2
 8002824:	e229      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d007      	beq.n	800284c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2222      	movs	r2, #34	; 0x22
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a61      	ldr	r2, [pc, #388]	; (8002a10 <HAL_I2C_Mem_Read+0x244>)
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288e:	88f8      	ldrh	r0, [r7, #6]
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4603      	mov	r3, r0
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fa8c 	bl	8002dbc <I2C_RequestMemoryRead>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1e5      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d113      	bne.n	80028de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e1b9      	b.n	8002c52 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d11d      	bne.n	8002922 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800291e:	b662      	cpsie	i
 8002920:	e197      	b.n	8002c52 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	2b02      	cmp	r3, #2
 8002928:	d11d      	bne.n	8002966 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002938:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800293a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002960:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002962:	b662      	cpsie	i
 8002964:	e175      	b.n	8002c52 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002974:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800298c:	e161      	b.n	8002c52 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	2b03      	cmp	r3, #3
 8002994:	f200 811a 	bhi.w	8002bcc <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b01      	cmp	r3, #1
 800299e:	d123      	bne.n	80029e8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fc49 	bl	800323c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e162      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029e6:	e134      	b.n	8002c52 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d150      	bne.n	8002a92 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f6:	2200      	movs	r2, #0
 80029f8:	4906      	ldr	r1, [pc, #24]	; (8002a14 <HAL_I2C_Mem_Read+0x248>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fac6 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e137      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
 8002a0a:	bf00      	nop
 8002a0c:	00100002 	.word	0x00100002
 8002a10:	ffff0000 	.word	0xffff0000
 8002a14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a28:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a5c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a90:	e0df      	b.n	8002c52 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	2200      	movs	r2, #0
 8002a9a:	497a      	ldr	r1, [pc, #488]	; (8002c84 <HAL_I2C_Mem_Read+0x4b8>)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fa75 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0e6      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002af0:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <HAL_I2C_Mem_Read+0x4bc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_I2C_Mem_Read+0x4c0>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	0a1a      	lsrs	r2, r3, #8
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00da      	lsls	r2, r3, #3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d117      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b38:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e099      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d1da      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b96:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bca:	e042      	b.n	8002c52 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fb33 	bl	800323c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e04c      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d118      	bne.n	8002c52 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f47f ae99 	bne.w	800298e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3728      	adds	r7, #40	; 0x28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	00010004 	.word	0x00010004
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	14f8b589 	.word	0x14f8b589

08002c90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	817b      	strh	r3, [r7, #10]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	813b      	strh	r3, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f960 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce0:	d103      	bne.n	8002cea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e05f      	b.n	8002dae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	6a3a      	ldr	r2, [r7, #32]
 8002d02:	492d      	ldr	r1, [pc, #180]	; (8002db8 <I2C_RequestMemoryWrite+0x128>)
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f998 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e04c      	b.n	8002dae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa02 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e02b      	b.n	8002dae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5c:	893b      	ldrh	r3, [r7, #8]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	e021      	b.n	8002dac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d68:	893b      	ldrh	r3, [r7, #8]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	6a39      	ldr	r1, [r7, #32]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f9dc 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d107      	bne.n	8002d9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e005      	b.n	8002dae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	00010002 	.word	0x00010002

08002dbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	813b      	strh	r3, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002de4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f8c2 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1c:	d103      	bne.n	8002e26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0aa      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e2a:	897b      	ldrh	r3, [r7, #10]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	6a3a      	ldr	r2, [r7, #32]
 8002e3e:	4952      	ldr	r1, [pc, #328]	; (8002f88 <I2C_RequestMemoryRead+0x1cc>)
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f8fa 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e097      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f964 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e076      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e98:	893b      	ldrh	r3, [r7, #8]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	e021      	b.n	8002ee8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea4:	893b      	ldrh	r3, [r7, #8]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f93e 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d107      	bne.n	8002eda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e050      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	6a39      	ldr	r1, [r7, #32]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f923 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d107      	bne.n	8002f10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e035      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f82b 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00d      	beq.n	8002f58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4a:	d103      	bne.n	8002f54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e013      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	6a3a      	ldr	r2, [r7, #32]
 8002f6c:	4906      	ldr	r1, [pc, #24]	; (8002f88 <I2C_RequestMemoryRead+0x1cc>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f863 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	00010002 	.word	0x00010002

08002f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	e025      	b.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d021      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe ff75 	bl	8001e94 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e023      	b.n	8003032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10d      	bne.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	e00c      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	429a      	cmp	r2, r3
 800302e:	d0b6      	beq.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003048:	e051      	b.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003058:	d123      	bne.n	80030a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e046      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d021      	beq.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe fef3 	bl	8001e94 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e020      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10c      	bne.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e00b      	b.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	43da      	mvns	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d18d      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003144:	e02d      	b.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f8ce 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e02d      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d021      	beq.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe fe99 	bl	8001e94 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d116      	bne.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e007      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d1ca      	bne.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c6:	e02d      	b.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f88d 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e02d      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d021      	beq.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe fe58 	bl	8001e94 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b04      	cmp	r3, #4
 8003230:	d1ca      	bne.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003248:	e042      	b.n	80032d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b10      	cmp	r3, #16
 8003256:	d119      	bne.n	800328c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0210 	mvn.w	r2, #16
 8003260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e029      	b.n	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328c:	f7fe fe02 	bl	8001e94 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	d302      	bcc.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d1b5      	bne.n	800324a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d11b      	bne.n	8003338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e26c      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8087 	beq.w	8003472 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003364:	4b92      	ldr	r3, [pc, #584]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b04      	cmp	r3, #4
 800336e:	d00c      	beq.n	800338a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003370:	4b8f      	ldr	r3, [pc, #572]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b08      	cmp	r3, #8
 800337a:	d112      	bne.n	80033a2 <HAL_RCC_OscConfig+0x5e>
 800337c:	4b8c      	ldr	r3, [pc, #560]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d10b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338a:	4b89      	ldr	r3, [pc, #548]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d06c      	beq.n	8003470 <HAL_RCC_OscConfig+0x12c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d168      	bne.n	8003470 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e246      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x76>
 80033ac:	4b80      	ldr	r3, [pc, #512]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a7f      	ldr	r2, [pc, #508]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	e02e      	b.n	8003418 <HAL_RCC_OscConfig+0xd4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x98>
 80033c2:	4b7b      	ldr	r3, [pc, #492]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7a      	ldr	r2, [pc, #488]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b78      	ldr	r3, [pc, #480]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a77      	ldr	r2, [pc, #476]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e01d      	b.n	8003418 <HAL_RCC_OscConfig+0xd4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0xbc>
 80033e6:	4b72      	ldr	r3, [pc, #456]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a71      	ldr	r2, [pc, #452]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b6f      	ldr	r3, [pc, #444]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6e      	ldr	r2, [pc, #440]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0xd4>
 8003400:	4b6b      	ldr	r3, [pc, #428]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6a      	ldr	r2, [pc, #424]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a67      	ldr	r2, [pc, #412]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe fd38 	bl	8001e94 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe fd34 	bl	8001e94 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e1fa      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0xe4>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fd24 	bl	8001e94 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fd20 	bl	8001e94 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1e6      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x10c>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d063      	beq.n	8003546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800347e:	4b4c      	ldr	r3, [pc, #304]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800348a:	4b49      	ldr	r3, [pc, #292]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x18c>
 8003496:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_RCC_OscConfig+0x176>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1ba      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4939      	ldr	r1, [pc, #228]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	e03a      	b.n	8003546 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b36      	ldr	r3, [pc, #216]	; (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fcd9 	bl	8001e94 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fe fcd5 	bl	8001e94 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e19b      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4927      	ldr	r1, [pc, #156]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_RCC_OscConfig+0x270>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe fcb8 	bl	8001e94 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003528:	f7fe fcb4 	bl	8001e94 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e17a      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03a      	beq.n	80035c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d019      	beq.n	800358e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355a:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <HAL_RCC_OscConfig+0x274>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003560:	f7fe fc98 	bl	8001e94 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fe fc94 	bl	8001e94 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e15a      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <HAL_RCC_OscConfig+0x26c>)
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003586:	2001      	movs	r0, #1
 8003588:	f000 fada 	bl	8003b40 <RCC_Delay>
 800358c:	e01c      	b.n	80035c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_RCC_OscConfig+0x274>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003594:	f7fe fc7e 	bl	8001e94 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359a:	e00f      	b.n	80035bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359c:	f7fe fc7a 	bl	8001e94 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d908      	bls.n	80035bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e140      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	42420000 	.word	0x42420000
 80035b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	4b9e      	ldr	r3, [pc, #632]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e9      	bne.n	800359c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80a6 	beq.w	8003722 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b97      	ldr	r3, [pc, #604]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10d      	bne.n	8003602 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	4b94      	ldr	r3, [pc, #592]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4a93      	ldr	r2, [pc, #588]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	61d3      	str	r3, [r2, #28]
 80035f2:	4b91      	ldr	r3, [pc, #580]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b8e      	ldr	r3, [pc, #568]	; (800383c <HAL_RCC_OscConfig+0x4f8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d118      	bne.n	8003640 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360e:	4b8b      	ldr	r3, [pc, #556]	; (800383c <HAL_RCC_OscConfig+0x4f8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a8a      	ldr	r2, [pc, #552]	; (800383c <HAL_RCC_OscConfig+0x4f8>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361a:	f7fe fc3b 	bl	8001e94 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fe fc37 	bl	8001e94 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b64      	cmp	r3, #100	; 0x64
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0fd      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	4b81      	ldr	r3, [pc, #516]	; (800383c <HAL_RCC_OscConfig+0x4f8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x312>
 8003648:	4b7b      	ldr	r3, [pc, #492]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	4a7a      	ldr	r2, [pc, #488]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6213      	str	r3, [r2, #32]
 8003654:	e02d      	b.n	80036b2 <HAL_RCC_OscConfig+0x36e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x334>
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a75      	ldr	r2, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	4b73      	ldr	r3, [pc, #460]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a72      	ldr	r2, [pc, #456]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	e01c      	b.n	80036b2 <HAL_RCC_OscConfig+0x36e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d10c      	bne.n	800369a <HAL_RCC_OscConfig+0x356>
 8003680:	4b6d      	ldr	r3, [pc, #436]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4a6c      	ldr	r2, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6213      	str	r3, [r2, #32]
 800368c:	4b6a      	ldr	r3, [pc, #424]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a69      	ldr	r2, [pc, #420]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	e00b      	b.n	80036b2 <HAL_RCC_OscConfig+0x36e>
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	4a66      	ldr	r2, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6213      	str	r3, [r2, #32]
 80036a6:	4b64      	ldr	r3, [pc, #400]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a63      	ldr	r2, [pc, #396]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7fe fbeb 	bl	8001e94 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe fbe7 	bl	8001e94 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0ab      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	4b57      	ldr	r3, [pc, #348]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCC_OscConfig+0x37e>
 80036e4:	e014      	b.n	8003710 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fe fbd5 	bl	8001e94 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fe fbd1 	bl	8001e94 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e095      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	4b4c      	ldr	r3, [pc, #304]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b48      	ldr	r3, [pc, #288]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a47      	ldr	r2, [pc, #284]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8081 	beq.w	800382e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372c:	4b42      	ldr	r3, [pc, #264]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d061      	beq.n	80037fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d146      	bne.n	80037ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <HAL_RCC_OscConfig+0x4fc>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fe fba5 	bl	8001e94 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fe fba1 	bl	8001e94 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e067      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003760:	4b35      	ldr	r3, [pc, #212]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d108      	bne.n	8003788 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	492d      	ldr	r1, [pc, #180]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a19      	ldr	r1, [r3, #32]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	430b      	orrs	r3, r1
 800379a:	4927      	ldr	r1, [pc, #156]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x4fc>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fe fb75 	bl	8001e94 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe fb71 	bl	8001e94 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e037      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x46a>
 80037cc:	e02f      	b.n	800382e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_RCC_OscConfig+0x4fc>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe fb5e 	bl	8001e94 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe fb5a 	bl	8001e94 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e020      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x498>
 80037fa:	e018      	b.n	800382e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e013      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_OscConfig+0x4f4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	429a      	cmp	r2, r3
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	40007000 	.word	0x40007000
 8003840:	42420060 	.word	0x42420060

08003844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0d0      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b6a      	ldr	r3, [pc, #424]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d910      	bls.n	8003888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b67      	ldr	r3, [pc, #412]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4965      	ldr	r1, [pc, #404]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0b8      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a0:	4b59      	ldr	r3, [pc, #356]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a58      	ldr	r2, [pc, #352]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b8:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	494d      	ldr	r1, [pc, #308]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d040      	beq.n	8003964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d115      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e07f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e073      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003912:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06b      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4936      	ldr	r1, [pc, #216]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fe faae 	bl	8001e94 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fe faaa 	bl	8001e94 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e053      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d210      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4922      	ldr	r1, [pc, #136]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e032      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a0:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4916      	ldr	r1, [pc, #88]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	490e      	ldr	r1, [pc, #56]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039d2:	f000 f821 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80039d6:	4601      	mov	r1, r0
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	5cd3      	ldrb	r3, [r2, r3]
 80039e6:	fa21 f303 	lsr.w	r3, r1, r3
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_RCC_ClockConfig+0x1cc>)
 80039ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1d0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fa0c 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	08007070 	.word	0x08007070
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000004 	.word	0x20000004

08003a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	b490      	push	{r4, r7}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a20:	1d3c      	adds	r4, r7, #4
 8003a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a28:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x40>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x46>
 8003a56:	e02d      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a5a:	623b      	str	r3, [r7, #32]
      break;
 8003a5c:	e02d      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	0c9b      	lsrs	r3, r3, #18
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	0c5b      	lsrs	r3, r3, #17
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	4a0f      	ldr	r2, [pc, #60]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a96:	fb02 f203 	mul.w	r2, r2, r3
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	e004      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	623b      	str	r3, [r7, #32]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab6:	623b      	str	r3, [r7, #32]
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	6a3b      	ldr	r3, [r7, #32]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc90      	pop	{r4, r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	0800705c 	.word	0x0800705c
 8003acc:	0800706c 	.word	0x0800706c
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	007a1200 	.word	0x007a1200
 8003ad8:	003d0900 	.word	0x003d0900

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b02      	ldr	r3, [pc, #8]	; (8003aec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	20000000 	.word	0x20000000

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af4:	f7ff fff2 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003af8:	4601      	mov	r1, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4a03      	ldr	r2, [pc, #12]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	08007080 	.word	0x08007080

08003b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b1c:	f7ff ffde 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	0adb      	lsrs	r3, r3, #11
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08007080 	.word	0x08007080

08003b40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <RCC_Delay+0x34>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <RCC_Delay+0x38>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0a5b      	lsrs	r3, r3, #9
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b5c:	bf00      	nop
  }
  while (Delay --);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	60fa      	str	r2, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f9      	bne.n	8003b5c <RCC_Delay+0x1c>
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000000 	.word	0x20000000
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e03f      	b.n	8003c0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe f84a 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f905 	bl	8003dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b08a      	sub	sp, #40	; 0x28
 8003c1a:	af02      	add	r7, sp, #8
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d17c      	bne.n	8003d30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_UART_Transmit+0x2c>
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e075      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_UART_Transmit+0x3e>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e06e      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe f913 	bl	8001e94 <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c84:	d108      	bne.n	8003c98 <HAL_UART_Transmit+0x82>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	e003      	b.n	8003ca0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003ca8:	e02a      	b.n	8003d00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f840 	bl	8003d3a <UART_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e036      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e007      	b.n	8003cf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1cf      	bne.n	8003caa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2140      	movs	r1, #64	; 0x40
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f810 	bl	8003d3a <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e006      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4a:	e02c      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d028      	beq.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d5a:	f7fe f89b 	bl	8001e94 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d21d      	bcs.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e00f      	b.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4013      	ands	r3, r2
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	bf0c      	ite	eq
 8003db6:	2301      	moveq	r3, #1
 8003db8:	2300      	movne	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d0c3      	beq.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e0a:	f023 030c 	bic.w	r3, r3, #12
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <UART_SetConfig+0x114>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7ff fe6e 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	e002      	b.n	8003e46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7ff fe56 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8003e44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009a      	lsls	r2, r3, #2
 8003e50:	441a      	add	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	0119      	lsls	r1, r3, #4
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009a      	lsls	r2, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	2064      	movs	r0, #100	; 0x64
 8003e86:	fb00 f303 	mul.w	r3, r0, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	3332      	adds	r3, #50	; 0x32
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9c:	4419      	add	r1, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009a      	lsls	r2, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <UART_SetConfig+0x118>)
 8003eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	3332      	adds	r3, #50	; 0x32
 8003ec8:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <UART_SetConfig+0x118>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	440a      	add	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	51eb851f 	.word	0x51eb851f

08003eec <__errno>:
 8003eec:	4b01      	ldr	r3, [pc, #4]	; (8003ef4 <__errno+0x8>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000000c 	.word	0x2000000c

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	2500      	movs	r5, #0
 8003efc:	4e0c      	ldr	r6, [pc, #48]	; (8003f30 <__libc_init_array+0x38>)
 8003efe:	4c0d      	ldr	r4, [pc, #52]	; (8003f34 <__libc_init_array+0x3c>)
 8003f00:	1ba4      	subs	r4, r4, r6
 8003f02:	10a4      	asrs	r4, r4, #2
 8003f04:	42a5      	cmp	r5, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	f003 f88a 	bl	8007020 <_init>
 8003f0c:	2500      	movs	r5, #0
 8003f0e:	4e0a      	ldr	r6, [pc, #40]	; (8003f38 <__libc_init_array+0x40>)
 8003f10:	4c0a      	ldr	r4, [pc, #40]	; (8003f3c <__libc_init_array+0x44>)
 8003f12:	1ba4      	subs	r4, r4, r6
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	42a5      	cmp	r5, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f20:	4798      	blx	r3
 8003f22:	3501      	adds	r5, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f2a:	4798      	blx	r3
 8003f2c:	3501      	adds	r5, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08007330 	.word	0x08007330
 8003f34:	08007330 	.word	0x08007330
 8003f38:	08007330 	.word	0x08007330
 8003f3c:	08007334 	.word	0x08007334

08003f40 <memset>:
 8003f40:	4603      	mov	r3, r0
 8003f42:	4402      	add	r2, r0
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d100      	bne.n	8003f4a <memset+0xa>
 8003f48:	4770      	bx	lr
 8003f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4e:	e7f9      	b.n	8003f44 <memset+0x4>

08003f50 <__cvt>:
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f56:	461e      	mov	r6, r3
 8003f58:	bfbb      	ittet	lt
 8003f5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f5e:	461e      	movlt	r6, r3
 8003f60:	2300      	movge	r3, #0
 8003f62:	232d      	movlt	r3, #45	; 0x2d
 8003f64:	b088      	sub	sp, #32
 8003f66:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f68:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003f6c:	f027 0720 	bic.w	r7, r7, #32
 8003f70:	2f46      	cmp	r7, #70	; 0x46
 8003f72:	4614      	mov	r4, r2
 8003f74:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f76:	700b      	strb	r3, [r1, #0]
 8003f78:	d004      	beq.n	8003f84 <__cvt+0x34>
 8003f7a:	2f45      	cmp	r7, #69	; 0x45
 8003f7c:	d100      	bne.n	8003f80 <__cvt+0x30>
 8003f7e:	3501      	adds	r5, #1
 8003f80:	2302      	movs	r3, #2
 8003f82:	e000      	b.n	8003f86 <__cvt+0x36>
 8003f84:	2303      	movs	r3, #3
 8003f86:	aa07      	add	r2, sp, #28
 8003f88:	9204      	str	r2, [sp, #16]
 8003f8a:	aa06      	add	r2, sp, #24
 8003f8c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f90:	e9cd 3500 	strd	r3, r5, [sp]
 8003f94:	4622      	mov	r2, r4
 8003f96:	4633      	mov	r3, r6
 8003f98:	f000 fcda 	bl	8004950 <_dtoa_r>
 8003f9c:	2f47      	cmp	r7, #71	; 0x47
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	d102      	bne.n	8003fa8 <__cvt+0x58>
 8003fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fa4:	07db      	lsls	r3, r3, #31
 8003fa6:	d526      	bpl.n	8003ff6 <__cvt+0xa6>
 8003fa8:	2f46      	cmp	r7, #70	; 0x46
 8003faa:	eb08 0905 	add.w	r9, r8, r5
 8003fae:	d111      	bne.n	8003fd4 <__cvt+0x84>
 8003fb0:	f898 3000 	ldrb.w	r3, [r8]
 8003fb4:	2b30      	cmp	r3, #48	; 0x30
 8003fb6:	d10a      	bne.n	8003fce <__cvt+0x7e>
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2300      	movs	r3, #0
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	f7fc fcf2 	bl	80009a8 <__aeabi_dcmpeq>
 8003fc4:	b918      	cbnz	r0, 8003fce <__cvt+0x7e>
 8003fc6:	f1c5 0501 	rsb	r5, r5, #1
 8003fca:	f8ca 5000 	str.w	r5, [sl]
 8003fce:	f8da 3000 	ldr.w	r3, [sl]
 8003fd2:	4499      	add	r9, r3
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	4620      	mov	r0, r4
 8003fda:	4631      	mov	r1, r6
 8003fdc:	f7fc fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8003fe0:	b938      	cbnz	r0, 8003ff2 <__cvt+0xa2>
 8003fe2:	2230      	movs	r2, #48	; 0x30
 8003fe4:	9b07      	ldr	r3, [sp, #28]
 8003fe6:	454b      	cmp	r3, r9
 8003fe8:	d205      	bcs.n	8003ff6 <__cvt+0xa6>
 8003fea:	1c59      	adds	r1, r3, #1
 8003fec:	9107      	str	r1, [sp, #28]
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e7f8      	b.n	8003fe4 <__cvt+0x94>
 8003ff2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	9b07      	ldr	r3, [sp, #28]
 8003ffa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ffc:	eba3 0308 	sub.w	r3, r3, r8
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	b008      	add	sp, #32
 8004004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004008 <__exponent>:
 8004008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800400a:	2900      	cmp	r1, #0
 800400c:	bfb4      	ite	lt
 800400e:	232d      	movlt	r3, #45	; 0x2d
 8004010:	232b      	movge	r3, #43	; 0x2b
 8004012:	4604      	mov	r4, r0
 8004014:	bfb8      	it	lt
 8004016:	4249      	neglt	r1, r1
 8004018:	2909      	cmp	r1, #9
 800401a:	f804 2b02 	strb.w	r2, [r4], #2
 800401e:	7043      	strb	r3, [r0, #1]
 8004020:	dd21      	ble.n	8004066 <__exponent+0x5e>
 8004022:	f10d 0307 	add.w	r3, sp, #7
 8004026:	461f      	mov	r7, r3
 8004028:	260a      	movs	r6, #10
 800402a:	fb91 f5f6 	sdiv	r5, r1, r6
 800402e:	fb06 1115 	mls	r1, r6, r5, r1
 8004032:	2d09      	cmp	r5, #9
 8004034:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004038:	f803 1c01 	strb.w	r1, [r3, #-1]
 800403c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004040:	4629      	mov	r1, r5
 8004042:	dc09      	bgt.n	8004058 <__exponent+0x50>
 8004044:	3130      	adds	r1, #48	; 0x30
 8004046:	3b02      	subs	r3, #2
 8004048:	f802 1c01 	strb.w	r1, [r2, #-1]
 800404c:	42bb      	cmp	r3, r7
 800404e:	4622      	mov	r2, r4
 8004050:	d304      	bcc.n	800405c <__exponent+0x54>
 8004052:	1a10      	subs	r0, r2, r0
 8004054:	b003      	add	sp, #12
 8004056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004058:	4613      	mov	r3, r2
 800405a:	e7e6      	b.n	800402a <__exponent+0x22>
 800405c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004060:	f804 2b01 	strb.w	r2, [r4], #1
 8004064:	e7f2      	b.n	800404c <__exponent+0x44>
 8004066:	2330      	movs	r3, #48	; 0x30
 8004068:	4419      	add	r1, r3
 800406a:	7083      	strb	r3, [r0, #2]
 800406c:	1d02      	adds	r2, r0, #4
 800406e:	70c1      	strb	r1, [r0, #3]
 8004070:	e7ef      	b.n	8004052 <__exponent+0x4a>
	...

08004074 <_printf_float>:
 8004074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004078:	b091      	sub	sp, #68	; 0x44
 800407a:	460c      	mov	r4, r1
 800407c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800407e:	4693      	mov	fp, r2
 8004080:	461e      	mov	r6, r3
 8004082:	4605      	mov	r5, r0
 8004084:	f001 fa18 	bl	80054b8 <_localeconv_r>
 8004088:	6803      	ldr	r3, [r0, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	9309      	str	r3, [sp, #36]	; 0x24
 800408e:	f7fc f85f 	bl	8000150 <strlen>
 8004092:	2300      	movs	r3, #0
 8004094:	930e      	str	r3, [sp, #56]	; 0x38
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	900a      	str	r0, [sp, #40]	; 0x28
 800409a:	3307      	adds	r3, #7
 800409c:	f023 0307 	bic.w	r3, r3, #7
 80040a0:	f103 0208 	add.w	r2, r3, #8
 80040a4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80040a8:	f8d4 a000 	ldr.w	sl, [r4]
 80040ac:	603a      	str	r2, [r7, #0]
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040b6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80040ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040be:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	4ba6      	ldr	r3, [pc, #664]	; (8004360 <_printf_float+0x2ec>)
 80040c6:	4638      	mov	r0, r7
 80040c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040ca:	f7fc fc9f 	bl	8000a0c <__aeabi_dcmpun>
 80040ce:	bb68      	cbnz	r0, 800412c <_printf_float+0xb8>
 80040d0:	f04f 32ff 	mov.w	r2, #4294967295
 80040d4:	4ba2      	ldr	r3, [pc, #648]	; (8004360 <_printf_float+0x2ec>)
 80040d6:	4638      	mov	r0, r7
 80040d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040da:	f7fc fc79 	bl	80009d0 <__aeabi_dcmple>
 80040de:	bb28      	cbnz	r0, 800412c <_printf_float+0xb8>
 80040e0:	2200      	movs	r2, #0
 80040e2:	2300      	movs	r3, #0
 80040e4:	4638      	mov	r0, r7
 80040e6:	4649      	mov	r1, r9
 80040e8:	f7fc fc68 	bl	80009bc <__aeabi_dcmplt>
 80040ec:	b110      	cbz	r0, 80040f4 <_printf_float+0x80>
 80040ee:	232d      	movs	r3, #45	; 0x2d
 80040f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040f4:	4f9b      	ldr	r7, [pc, #620]	; (8004364 <_printf_float+0x2f0>)
 80040f6:	4b9c      	ldr	r3, [pc, #624]	; (8004368 <_printf_float+0x2f4>)
 80040f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040fc:	bf98      	it	ls
 80040fe:	461f      	movls	r7, r3
 8004100:	2303      	movs	r3, #3
 8004102:	f04f 0900 	mov.w	r9, #0
 8004106:	6123      	str	r3, [r4, #16]
 8004108:	f02a 0304 	bic.w	r3, sl, #4
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	9600      	str	r6, [sp, #0]
 8004110:	465b      	mov	r3, fp
 8004112:	aa0f      	add	r2, sp, #60	; 0x3c
 8004114:	4621      	mov	r1, r4
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f9e2 	bl	80044e0 <_printf_common>
 800411c:	3001      	adds	r0, #1
 800411e:	f040 8090 	bne.w	8004242 <_printf_float+0x1ce>
 8004122:	f04f 30ff 	mov.w	r0, #4294967295
 8004126:	b011      	add	sp, #68	; 0x44
 8004128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412c:	463a      	mov	r2, r7
 800412e:	464b      	mov	r3, r9
 8004130:	4638      	mov	r0, r7
 8004132:	4649      	mov	r1, r9
 8004134:	f7fc fc6a 	bl	8000a0c <__aeabi_dcmpun>
 8004138:	b110      	cbz	r0, 8004140 <_printf_float+0xcc>
 800413a:	4f8c      	ldr	r7, [pc, #560]	; (800436c <_printf_float+0x2f8>)
 800413c:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <_printf_float+0x2fc>)
 800413e:	e7db      	b.n	80040f8 <_printf_float+0x84>
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004146:	1c59      	adds	r1, r3, #1
 8004148:	a80d      	add	r0, sp, #52	; 0x34
 800414a:	a90e      	add	r1, sp, #56	; 0x38
 800414c:	d140      	bne.n	80041d0 <_printf_float+0x15c>
 800414e:	2306      	movs	r3, #6
 8004150:	6063      	str	r3, [r4, #4]
 8004152:	f04f 0c00 	mov.w	ip, #0
 8004156:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800415a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800415e:	6863      	ldr	r3, [r4, #4]
 8004160:	6022      	str	r2, [r4, #0]
 8004162:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	463a      	mov	r2, r7
 800416a:	464b      	mov	r3, r9
 800416c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004170:	4628      	mov	r0, r5
 8004172:	f7ff feed 	bl	8003f50 <__cvt>
 8004176:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800417a:	2b47      	cmp	r3, #71	; 0x47
 800417c:	4607      	mov	r7, r0
 800417e:	d109      	bne.n	8004194 <_printf_float+0x120>
 8004180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004182:	1cd8      	adds	r0, r3, #3
 8004184:	db02      	blt.n	800418c <_printf_float+0x118>
 8004186:	6862      	ldr	r2, [r4, #4]
 8004188:	4293      	cmp	r3, r2
 800418a:	dd47      	ble.n	800421c <_printf_float+0x1a8>
 800418c:	f1a8 0802 	sub.w	r8, r8, #2
 8004190:	fa5f f888 	uxtb.w	r8, r8
 8004194:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004198:	990d      	ldr	r1, [sp, #52]	; 0x34
 800419a:	d824      	bhi.n	80041e6 <_printf_float+0x172>
 800419c:	3901      	subs	r1, #1
 800419e:	4642      	mov	r2, r8
 80041a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041a4:	910d      	str	r1, [sp, #52]	; 0x34
 80041a6:	f7ff ff2f 	bl	8004008 <__exponent>
 80041aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ac:	4681      	mov	r9, r0
 80041ae:	1813      	adds	r3, r2, r0
 80041b0:	2a01      	cmp	r2, #1
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	dc02      	bgt.n	80041bc <_printf_float+0x148>
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	07d1      	lsls	r1, r2, #31
 80041ba:	d501      	bpl.n	80041c0 <_printf_float+0x14c>
 80041bc:	3301      	adds	r3, #1
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0a2      	beq.n	800410e <_printf_float+0x9a>
 80041c8:	232d      	movs	r3, #45	; 0x2d
 80041ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ce:	e79e      	b.n	800410e <_printf_float+0x9a>
 80041d0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80041d4:	f000 816e 	beq.w	80044b4 <_printf_float+0x440>
 80041d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041dc:	d1b9      	bne.n	8004152 <_printf_float+0xde>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1b7      	bne.n	8004152 <_printf_float+0xde>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e7b4      	b.n	8004150 <_printf_float+0xdc>
 80041e6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80041ea:	d119      	bne.n	8004220 <_printf_float+0x1ac>
 80041ec:	2900      	cmp	r1, #0
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	dd0c      	ble.n	800420c <_printf_float+0x198>
 80041f2:	6121      	str	r1, [r4, #16]
 80041f4:	b913      	cbnz	r3, 80041fc <_printf_float+0x188>
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	07d2      	lsls	r2, r2, #31
 80041fa:	d502      	bpl.n	8004202 <_printf_float+0x18e>
 80041fc:	3301      	adds	r3, #1
 80041fe:	440b      	add	r3, r1
 8004200:	6123      	str	r3, [r4, #16]
 8004202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004204:	f04f 0900 	mov.w	r9, #0
 8004208:	65a3      	str	r3, [r4, #88]	; 0x58
 800420a:	e7d9      	b.n	80041c0 <_printf_float+0x14c>
 800420c:	b913      	cbnz	r3, 8004214 <_printf_float+0x1a0>
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	07d0      	lsls	r0, r2, #31
 8004212:	d501      	bpl.n	8004218 <_printf_float+0x1a4>
 8004214:	3302      	adds	r3, #2
 8004216:	e7f3      	b.n	8004200 <_printf_float+0x18c>
 8004218:	2301      	movs	r3, #1
 800421a:	e7f1      	b.n	8004200 <_printf_float+0x18c>
 800421c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004220:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004224:	4293      	cmp	r3, r2
 8004226:	db05      	blt.n	8004234 <_printf_float+0x1c0>
 8004228:	6822      	ldr	r2, [r4, #0]
 800422a:	6123      	str	r3, [r4, #16]
 800422c:	07d1      	lsls	r1, r2, #31
 800422e:	d5e8      	bpl.n	8004202 <_printf_float+0x18e>
 8004230:	3301      	adds	r3, #1
 8004232:	e7e5      	b.n	8004200 <_printf_float+0x18c>
 8004234:	2b00      	cmp	r3, #0
 8004236:	bfcc      	ite	gt
 8004238:	2301      	movgt	r3, #1
 800423a:	f1c3 0302 	rsble	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	e7de      	b.n	8004200 <_printf_float+0x18c>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	055a      	lsls	r2, r3, #21
 8004246:	d407      	bmi.n	8004258 <_printf_float+0x1e4>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	463a      	mov	r2, r7
 800424c:	4659      	mov	r1, fp
 800424e:	4628      	mov	r0, r5
 8004250:	47b0      	blx	r6
 8004252:	3001      	adds	r0, #1
 8004254:	d129      	bne.n	80042aa <_printf_float+0x236>
 8004256:	e764      	b.n	8004122 <_printf_float+0xae>
 8004258:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800425c:	f240 80d7 	bls.w	800440e <_printf_float+0x39a>
 8004260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004264:	2200      	movs	r2, #0
 8004266:	2300      	movs	r3, #0
 8004268:	f7fc fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800426c:	b388      	cbz	r0, 80042d2 <_printf_float+0x25e>
 800426e:	2301      	movs	r3, #1
 8004270:	4a40      	ldr	r2, [pc, #256]	; (8004374 <_printf_float+0x300>)
 8004272:	4659      	mov	r1, fp
 8004274:	4628      	mov	r0, r5
 8004276:	47b0      	blx	r6
 8004278:	3001      	adds	r0, #1
 800427a:	f43f af52 	beq.w	8004122 <_printf_float+0xae>
 800427e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004282:	429a      	cmp	r2, r3
 8004284:	db02      	blt.n	800428c <_printf_float+0x218>
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	07d8      	lsls	r0, r3, #31
 800428a:	d50e      	bpl.n	80042aa <_printf_float+0x236>
 800428c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004290:	4659      	mov	r1, fp
 8004292:	4628      	mov	r0, r5
 8004294:	47b0      	blx	r6
 8004296:	3001      	adds	r0, #1
 8004298:	f43f af43 	beq.w	8004122 <_printf_float+0xae>
 800429c:	2700      	movs	r7, #0
 800429e:	f104 081a 	add.w	r8, r4, #26
 80042a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042a4:	3b01      	subs	r3, #1
 80042a6:	42bb      	cmp	r3, r7
 80042a8:	dc09      	bgt.n	80042be <_printf_float+0x24a>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	079f      	lsls	r7, r3, #30
 80042ae:	f100 80fd 	bmi.w	80044ac <_printf_float+0x438>
 80042b2:	68e0      	ldr	r0, [r4, #12]
 80042b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042b6:	4298      	cmp	r0, r3
 80042b8:	bfb8      	it	lt
 80042ba:	4618      	movlt	r0, r3
 80042bc:	e733      	b.n	8004126 <_printf_float+0xb2>
 80042be:	2301      	movs	r3, #1
 80042c0:	4642      	mov	r2, r8
 80042c2:	4659      	mov	r1, fp
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b0      	blx	r6
 80042c8:	3001      	adds	r0, #1
 80042ca:	f43f af2a 	beq.w	8004122 <_printf_float+0xae>
 80042ce:	3701      	adds	r7, #1
 80042d0:	e7e7      	b.n	80042a2 <_printf_float+0x22e>
 80042d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dc2b      	bgt.n	8004330 <_printf_float+0x2bc>
 80042d8:	2301      	movs	r3, #1
 80042da:	4a26      	ldr	r2, [pc, #152]	; (8004374 <_printf_float+0x300>)
 80042dc:	4659      	mov	r1, fp
 80042de:	4628      	mov	r0, r5
 80042e0:	47b0      	blx	r6
 80042e2:	3001      	adds	r0, #1
 80042e4:	f43f af1d 	beq.w	8004122 <_printf_float+0xae>
 80042e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042ea:	b923      	cbnz	r3, 80042f6 <_printf_float+0x282>
 80042ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042ee:	b913      	cbnz	r3, 80042f6 <_printf_float+0x282>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07d9      	lsls	r1, r3, #31
 80042f4:	d5d9      	bpl.n	80042aa <_printf_float+0x236>
 80042f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042fa:	4659      	mov	r1, fp
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b0      	blx	r6
 8004300:	3001      	adds	r0, #1
 8004302:	f43f af0e 	beq.w	8004122 <_printf_float+0xae>
 8004306:	f04f 0800 	mov.w	r8, #0
 800430a:	f104 091a 	add.w	r9, r4, #26
 800430e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004310:	425b      	negs	r3, r3
 8004312:	4543      	cmp	r3, r8
 8004314:	dc01      	bgt.n	800431a <_printf_float+0x2a6>
 8004316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004318:	e797      	b.n	800424a <_printf_float+0x1d6>
 800431a:	2301      	movs	r3, #1
 800431c:	464a      	mov	r2, r9
 800431e:	4659      	mov	r1, fp
 8004320:	4628      	mov	r0, r5
 8004322:	47b0      	blx	r6
 8004324:	3001      	adds	r0, #1
 8004326:	f43f aefc 	beq.w	8004122 <_printf_float+0xae>
 800432a:	f108 0801 	add.w	r8, r8, #1
 800432e:	e7ee      	b.n	800430e <_printf_float+0x29a>
 8004330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004334:	429a      	cmp	r2, r3
 8004336:	bfa8      	it	ge
 8004338:	461a      	movge	r2, r3
 800433a:	2a00      	cmp	r2, #0
 800433c:	4690      	mov	r8, r2
 800433e:	dd07      	ble.n	8004350 <_printf_float+0x2dc>
 8004340:	4613      	mov	r3, r2
 8004342:	4659      	mov	r1, fp
 8004344:	463a      	mov	r2, r7
 8004346:	4628      	mov	r0, r5
 8004348:	47b0      	blx	r6
 800434a:	3001      	adds	r0, #1
 800434c:	f43f aee9 	beq.w	8004122 <_printf_float+0xae>
 8004350:	f104 031a 	add.w	r3, r4, #26
 8004354:	f04f 0a00 	mov.w	sl, #0
 8004358:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800435c:	930b      	str	r3, [sp, #44]	; 0x2c
 800435e:	e015      	b.n	800438c <_printf_float+0x318>
 8004360:	7fefffff 	.word	0x7fefffff
 8004364:	0800708c 	.word	0x0800708c
 8004368:	08007088 	.word	0x08007088
 800436c:	08007094 	.word	0x08007094
 8004370:	08007090 	.word	0x08007090
 8004374:	08007098 	.word	0x08007098
 8004378:	2301      	movs	r3, #1
 800437a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800437c:	4659      	mov	r1, fp
 800437e:	4628      	mov	r0, r5
 8004380:	47b0      	blx	r6
 8004382:	3001      	adds	r0, #1
 8004384:	f43f aecd 	beq.w	8004122 <_printf_float+0xae>
 8004388:	f10a 0a01 	add.w	sl, sl, #1
 800438c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004390:	eba9 0308 	sub.w	r3, r9, r8
 8004394:	4553      	cmp	r3, sl
 8004396:	dcef      	bgt.n	8004378 <_printf_float+0x304>
 8004398:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800439c:	429a      	cmp	r2, r3
 800439e:	444f      	add	r7, r9
 80043a0:	db14      	blt.n	80043cc <_printf_float+0x358>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	07da      	lsls	r2, r3, #31
 80043a6:	d411      	bmi.n	80043cc <_printf_float+0x358>
 80043a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043ac:	eba3 0209 	sub.w	r2, r3, r9
 80043b0:	eba3 0901 	sub.w	r9, r3, r1
 80043b4:	4591      	cmp	r9, r2
 80043b6:	bfa8      	it	ge
 80043b8:	4691      	movge	r9, r2
 80043ba:	f1b9 0f00 	cmp.w	r9, #0
 80043be:	dc0d      	bgt.n	80043dc <_printf_float+0x368>
 80043c0:	2700      	movs	r7, #0
 80043c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043c6:	f104 081a 	add.w	r8, r4, #26
 80043ca:	e018      	b.n	80043fe <_printf_float+0x38a>
 80043cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d0:	4659      	mov	r1, fp
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b0      	blx	r6
 80043d6:	3001      	adds	r0, #1
 80043d8:	d1e6      	bne.n	80043a8 <_printf_float+0x334>
 80043da:	e6a2      	b.n	8004122 <_printf_float+0xae>
 80043dc:	464b      	mov	r3, r9
 80043de:	463a      	mov	r2, r7
 80043e0:	4659      	mov	r1, fp
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b0      	blx	r6
 80043e6:	3001      	adds	r0, #1
 80043e8:	d1ea      	bne.n	80043c0 <_printf_float+0x34c>
 80043ea:	e69a      	b.n	8004122 <_printf_float+0xae>
 80043ec:	2301      	movs	r3, #1
 80043ee:	4642      	mov	r2, r8
 80043f0:	4659      	mov	r1, fp
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b0      	blx	r6
 80043f6:	3001      	adds	r0, #1
 80043f8:	f43f ae93 	beq.w	8004122 <_printf_float+0xae>
 80043fc:	3701      	adds	r7, #1
 80043fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	eba3 0309 	sub.w	r3, r3, r9
 8004408:	42bb      	cmp	r3, r7
 800440a:	dcef      	bgt.n	80043ec <_printf_float+0x378>
 800440c:	e74d      	b.n	80042aa <_printf_float+0x236>
 800440e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004410:	2a01      	cmp	r2, #1
 8004412:	dc01      	bgt.n	8004418 <_printf_float+0x3a4>
 8004414:	07db      	lsls	r3, r3, #31
 8004416:	d538      	bpl.n	800448a <_printf_float+0x416>
 8004418:	2301      	movs	r3, #1
 800441a:	463a      	mov	r2, r7
 800441c:	4659      	mov	r1, fp
 800441e:	4628      	mov	r0, r5
 8004420:	47b0      	blx	r6
 8004422:	3001      	adds	r0, #1
 8004424:	f43f ae7d 	beq.w	8004122 <_printf_float+0xae>
 8004428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800442c:	4659      	mov	r1, fp
 800442e:	4628      	mov	r0, r5
 8004430:	47b0      	blx	r6
 8004432:	3001      	adds	r0, #1
 8004434:	f107 0701 	add.w	r7, r7, #1
 8004438:	f43f ae73 	beq.w	8004122 <_printf_float+0xae>
 800443c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004442:	2200      	movs	r2, #0
 8004444:	f103 38ff 	add.w	r8, r3, #4294967295
 8004448:	2300      	movs	r3, #0
 800444a:	f7fc faad 	bl	80009a8 <__aeabi_dcmpeq>
 800444e:	b9c0      	cbnz	r0, 8004482 <_printf_float+0x40e>
 8004450:	4643      	mov	r3, r8
 8004452:	463a      	mov	r2, r7
 8004454:	4659      	mov	r1, fp
 8004456:	4628      	mov	r0, r5
 8004458:	47b0      	blx	r6
 800445a:	3001      	adds	r0, #1
 800445c:	d10d      	bne.n	800447a <_printf_float+0x406>
 800445e:	e660      	b.n	8004122 <_printf_float+0xae>
 8004460:	2301      	movs	r3, #1
 8004462:	4642      	mov	r2, r8
 8004464:	4659      	mov	r1, fp
 8004466:	4628      	mov	r0, r5
 8004468:	47b0      	blx	r6
 800446a:	3001      	adds	r0, #1
 800446c:	f43f ae59 	beq.w	8004122 <_printf_float+0xae>
 8004470:	3701      	adds	r7, #1
 8004472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004474:	3b01      	subs	r3, #1
 8004476:	42bb      	cmp	r3, r7
 8004478:	dcf2      	bgt.n	8004460 <_printf_float+0x3ec>
 800447a:	464b      	mov	r3, r9
 800447c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004480:	e6e4      	b.n	800424c <_printf_float+0x1d8>
 8004482:	2700      	movs	r7, #0
 8004484:	f104 081a 	add.w	r8, r4, #26
 8004488:	e7f3      	b.n	8004472 <_printf_float+0x3fe>
 800448a:	2301      	movs	r3, #1
 800448c:	e7e1      	b.n	8004452 <_printf_float+0x3de>
 800448e:	2301      	movs	r3, #1
 8004490:	4642      	mov	r2, r8
 8004492:	4659      	mov	r1, fp
 8004494:	4628      	mov	r0, r5
 8004496:	47b0      	blx	r6
 8004498:	3001      	adds	r0, #1
 800449a:	f43f ae42 	beq.w	8004122 <_printf_float+0xae>
 800449e:	3701      	adds	r7, #1
 80044a0:	68e3      	ldr	r3, [r4, #12]
 80044a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	42bb      	cmp	r3, r7
 80044a8:	dcf1      	bgt.n	800448e <_printf_float+0x41a>
 80044aa:	e702      	b.n	80042b2 <_printf_float+0x23e>
 80044ac:	2700      	movs	r7, #0
 80044ae:	f104 0819 	add.w	r8, r4, #25
 80044b2:	e7f5      	b.n	80044a0 <_printf_float+0x42c>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f43f ae94 	beq.w	80041e2 <_printf_float+0x16e>
 80044ba:	f04f 0c00 	mov.w	ip, #0
 80044be:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80044c2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80044c6:	6022      	str	r2, [r4, #0]
 80044c8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80044cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	463a      	mov	r2, r7
 80044d4:	464b      	mov	r3, r9
 80044d6:	4628      	mov	r0, r5
 80044d8:	f7ff fd3a 	bl	8003f50 <__cvt>
 80044dc:	4607      	mov	r7, r0
 80044de:	e64f      	b.n	8004180 <_printf_float+0x10c>

080044e0 <_printf_common>:
 80044e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e4:	4691      	mov	r9, r2
 80044e6:	461f      	mov	r7, r3
 80044e8:	688a      	ldr	r2, [r1, #8]
 80044ea:	690b      	ldr	r3, [r1, #16]
 80044ec:	4606      	mov	r6, r0
 80044ee:	4293      	cmp	r3, r2
 80044f0:	bfb8      	it	lt
 80044f2:	4613      	movlt	r3, r2
 80044f4:	f8c9 3000 	str.w	r3, [r9]
 80044f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044fc:	460c      	mov	r4, r1
 80044fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004502:	b112      	cbz	r2, 800450a <_printf_common+0x2a>
 8004504:	3301      	adds	r3, #1
 8004506:	f8c9 3000 	str.w	r3, [r9]
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	0699      	lsls	r1, r3, #26
 800450e:	bf42      	ittt	mi
 8004510:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004514:	3302      	addmi	r3, #2
 8004516:	f8c9 3000 	strmi.w	r3, [r9]
 800451a:	6825      	ldr	r5, [r4, #0]
 800451c:	f015 0506 	ands.w	r5, r5, #6
 8004520:	d107      	bne.n	8004532 <_printf_common+0x52>
 8004522:	f104 0a19 	add.w	sl, r4, #25
 8004526:	68e3      	ldr	r3, [r4, #12]
 8004528:	f8d9 2000 	ldr.w	r2, [r9]
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	42ab      	cmp	r3, r5
 8004530:	dc29      	bgt.n	8004586 <_printf_common+0xa6>
 8004532:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	3300      	adds	r3, #0
 800453a:	bf18      	it	ne
 800453c:	2301      	movne	r3, #1
 800453e:	0692      	lsls	r2, r2, #26
 8004540:	d42e      	bmi.n	80045a0 <_printf_common+0xc0>
 8004542:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004546:	4639      	mov	r1, r7
 8004548:	4630      	mov	r0, r6
 800454a:	47c0      	blx	r8
 800454c:	3001      	adds	r0, #1
 800454e:	d021      	beq.n	8004594 <_printf_common+0xb4>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	68e5      	ldr	r5, [r4, #12]
 8004554:	f003 0306 	and.w	r3, r3, #6
 8004558:	2b04      	cmp	r3, #4
 800455a:	bf18      	it	ne
 800455c:	2500      	movne	r5, #0
 800455e:	f8d9 2000 	ldr.w	r2, [r9]
 8004562:	f04f 0900 	mov.w	r9, #0
 8004566:	bf08      	it	eq
 8004568:	1aad      	subeq	r5, r5, r2
 800456a:	68a3      	ldr	r3, [r4, #8]
 800456c:	6922      	ldr	r2, [r4, #16]
 800456e:	bf08      	it	eq
 8004570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004574:	4293      	cmp	r3, r2
 8004576:	bfc4      	itt	gt
 8004578:	1a9b      	subgt	r3, r3, r2
 800457a:	18ed      	addgt	r5, r5, r3
 800457c:	341a      	adds	r4, #26
 800457e:	454d      	cmp	r5, r9
 8004580:	d11a      	bne.n	80045b8 <_printf_common+0xd8>
 8004582:	2000      	movs	r0, #0
 8004584:	e008      	b.n	8004598 <_printf_common+0xb8>
 8004586:	2301      	movs	r3, #1
 8004588:	4652      	mov	r2, sl
 800458a:	4639      	mov	r1, r7
 800458c:	4630      	mov	r0, r6
 800458e:	47c0      	blx	r8
 8004590:	3001      	adds	r0, #1
 8004592:	d103      	bne.n	800459c <_printf_common+0xbc>
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459c:	3501      	adds	r5, #1
 800459e:	e7c2      	b.n	8004526 <_printf_common+0x46>
 80045a0:	2030      	movs	r0, #48	; 0x30
 80045a2:	18e1      	adds	r1, r4, r3
 80045a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ae:	4422      	add	r2, r4
 80045b0:	3302      	adds	r3, #2
 80045b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045b6:	e7c4      	b.n	8004542 <_printf_common+0x62>
 80045b8:	2301      	movs	r3, #1
 80045ba:	4622      	mov	r2, r4
 80045bc:	4639      	mov	r1, r7
 80045be:	4630      	mov	r0, r6
 80045c0:	47c0      	blx	r8
 80045c2:	3001      	adds	r0, #1
 80045c4:	d0e6      	beq.n	8004594 <_printf_common+0xb4>
 80045c6:	f109 0901 	add.w	r9, r9, #1
 80045ca:	e7d8      	b.n	800457e <_printf_common+0x9e>

080045cc <_printf_i>:
 80045cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045d4:	460c      	mov	r4, r1
 80045d6:	7e09      	ldrb	r1, [r1, #24]
 80045d8:	b085      	sub	sp, #20
 80045da:	296e      	cmp	r1, #110	; 0x6e
 80045dc:	4617      	mov	r7, r2
 80045de:	4606      	mov	r6, r0
 80045e0:	4698      	mov	r8, r3
 80045e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045e4:	f000 80b3 	beq.w	800474e <_printf_i+0x182>
 80045e8:	d822      	bhi.n	8004630 <_printf_i+0x64>
 80045ea:	2963      	cmp	r1, #99	; 0x63
 80045ec:	d036      	beq.n	800465c <_printf_i+0x90>
 80045ee:	d80a      	bhi.n	8004606 <_printf_i+0x3a>
 80045f0:	2900      	cmp	r1, #0
 80045f2:	f000 80b9 	beq.w	8004768 <_printf_i+0x19c>
 80045f6:	2958      	cmp	r1, #88	; 0x58
 80045f8:	f000 8083 	beq.w	8004702 <_printf_i+0x136>
 80045fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004600:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004604:	e032      	b.n	800466c <_printf_i+0xa0>
 8004606:	2964      	cmp	r1, #100	; 0x64
 8004608:	d001      	beq.n	800460e <_printf_i+0x42>
 800460a:	2969      	cmp	r1, #105	; 0x69
 800460c:	d1f6      	bne.n	80045fc <_printf_i+0x30>
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	6813      	ldr	r3, [r2, #0]
 8004612:	0605      	lsls	r5, r0, #24
 8004614:	f103 0104 	add.w	r1, r3, #4
 8004618:	d52a      	bpl.n	8004670 <_printf_i+0xa4>
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6011      	str	r1, [r2, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	da03      	bge.n	800462a <_printf_i+0x5e>
 8004622:	222d      	movs	r2, #45	; 0x2d
 8004624:	425b      	negs	r3, r3
 8004626:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800462a:	486f      	ldr	r0, [pc, #444]	; (80047e8 <_printf_i+0x21c>)
 800462c:	220a      	movs	r2, #10
 800462e:	e039      	b.n	80046a4 <_printf_i+0xd8>
 8004630:	2973      	cmp	r1, #115	; 0x73
 8004632:	f000 809d 	beq.w	8004770 <_printf_i+0x1a4>
 8004636:	d808      	bhi.n	800464a <_printf_i+0x7e>
 8004638:	296f      	cmp	r1, #111	; 0x6f
 800463a:	d020      	beq.n	800467e <_printf_i+0xb2>
 800463c:	2970      	cmp	r1, #112	; 0x70
 800463e:	d1dd      	bne.n	80045fc <_printf_i+0x30>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	f043 0320 	orr.w	r3, r3, #32
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	e003      	b.n	8004652 <_printf_i+0x86>
 800464a:	2975      	cmp	r1, #117	; 0x75
 800464c:	d017      	beq.n	800467e <_printf_i+0xb2>
 800464e:	2978      	cmp	r1, #120	; 0x78
 8004650:	d1d4      	bne.n	80045fc <_printf_i+0x30>
 8004652:	2378      	movs	r3, #120	; 0x78
 8004654:	4865      	ldr	r0, [pc, #404]	; (80047ec <_printf_i+0x220>)
 8004656:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800465a:	e055      	b.n	8004708 <_printf_i+0x13c>
 800465c:	6813      	ldr	r3, [r2, #0]
 800465e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004662:	1d19      	adds	r1, r3, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6011      	str	r1, [r2, #0]
 8004668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800466c:	2301      	movs	r3, #1
 800466e:	e08c      	b.n	800478a <_printf_i+0x1be>
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004676:	6011      	str	r1, [r2, #0]
 8004678:	bf18      	it	ne
 800467a:	b21b      	sxthne	r3, r3
 800467c:	e7cf      	b.n	800461e <_printf_i+0x52>
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	6825      	ldr	r5, [r4, #0]
 8004682:	1d18      	adds	r0, r3, #4
 8004684:	6010      	str	r0, [r2, #0]
 8004686:	0628      	lsls	r0, r5, #24
 8004688:	d501      	bpl.n	800468e <_printf_i+0xc2>
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	e002      	b.n	8004694 <_printf_i+0xc8>
 800468e:	0668      	lsls	r0, r5, #25
 8004690:	d5fb      	bpl.n	800468a <_printf_i+0xbe>
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	296f      	cmp	r1, #111	; 0x6f
 8004696:	bf14      	ite	ne
 8004698:	220a      	movne	r2, #10
 800469a:	2208      	moveq	r2, #8
 800469c:	4852      	ldr	r0, [pc, #328]	; (80047e8 <_printf_i+0x21c>)
 800469e:	2100      	movs	r1, #0
 80046a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046a4:	6865      	ldr	r5, [r4, #4]
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	60a5      	str	r5, [r4, #8]
 80046aa:	f2c0 8095 	blt.w	80047d8 <_printf_i+0x20c>
 80046ae:	6821      	ldr	r1, [r4, #0]
 80046b0:	f021 0104 	bic.w	r1, r1, #4
 80046b4:	6021      	str	r1, [r4, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d13d      	bne.n	8004736 <_printf_i+0x16a>
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	f040 808e 	bne.w	80047dc <_printf_i+0x210>
 80046c0:	4665      	mov	r5, ip
 80046c2:	2a08      	cmp	r2, #8
 80046c4:	d10b      	bne.n	80046de <_printf_i+0x112>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	07db      	lsls	r3, r3, #31
 80046ca:	d508      	bpl.n	80046de <_printf_i+0x112>
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	6862      	ldr	r2, [r4, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	bfde      	ittt	le
 80046d4:	2330      	movle	r3, #48	; 0x30
 80046d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046de:	ebac 0305 	sub.w	r3, ip, r5
 80046e2:	6123      	str	r3, [r4, #16]
 80046e4:	f8cd 8000 	str.w	r8, [sp]
 80046e8:	463b      	mov	r3, r7
 80046ea:	aa03      	add	r2, sp, #12
 80046ec:	4621      	mov	r1, r4
 80046ee:	4630      	mov	r0, r6
 80046f0:	f7ff fef6 	bl	80044e0 <_printf_common>
 80046f4:	3001      	adds	r0, #1
 80046f6:	d14d      	bne.n	8004794 <_printf_i+0x1c8>
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295
 80046fc:	b005      	add	sp, #20
 80046fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004702:	4839      	ldr	r0, [pc, #228]	; (80047e8 <_printf_i+0x21c>)
 8004704:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004708:	6813      	ldr	r3, [r2, #0]
 800470a:	6821      	ldr	r1, [r4, #0]
 800470c:	1d1d      	adds	r5, r3, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6015      	str	r5, [r2, #0]
 8004712:	060a      	lsls	r2, r1, #24
 8004714:	d50b      	bpl.n	800472e <_printf_i+0x162>
 8004716:	07ca      	lsls	r2, r1, #31
 8004718:	bf44      	itt	mi
 800471a:	f041 0120 	orrmi.w	r1, r1, #32
 800471e:	6021      	strmi	r1, [r4, #0]
 8004720:	b91b      	cbnz	r3, 800472a <_printf_i+0x15e>
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	f022 0220 	bic.w	r2, r2, #32
 8004728:	6022      	str	r2, [r4, #0]
 800472a:	2210      	movs	r2, #16
 800472c:	e7b7      	b.n	800469e <_printf_i+0xd2>
 800472e:	064d      	lsls	r5, r1, #25
 8004730:	bf48      	it	mi
 8004732:	b29b      	uxthmi	r3, r3
 8004734:	e7ef      	b.n	8004716 <_printf_i+0x14a>
 8004736:	4665      	mov	r5, ip
 8004738:	fbb3 f1f2 	udiv	r1, r3, r2
 800473c:	fb02 3311 	mls	r3, r2, r1, r3
 8004740:	5cc3      	ldrb	r3, [r0, r3]
 8004742:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004746:	460b      	mov	r3, r1
 8004748:	2900      	cmp	r1, #0
 800474a:	d1f5      	bne.n	8004738 <_printf_i+0x16c>
 800474c:	e7b9      	b.n	80046c2 <_printf_i+0xf6>
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	6825      	ldr	r5, [r4, #0]
 8004752:	1d18      	adds	r0, r3, #4
 8004754:	6961      	ldr	r1, [r4, #20]
 8004756:	6010      	str	r0, [r2, #0]
 8004758:	0628      	lsls	r0, r5, #24
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	d501      	bpl.n	8004762 <_printf_i+0x196>
 800475e:	6019      	str	r1, [r3, #0]
 8004760:	e002      	b.n	8004768 <_printf_i+0x19c>
 8004762:	066a      	lsls	r2, r5, #25
 8004764:	d5fb      	bpl.n	800475e <_printf_i+0x192>
 8004766:	8019      	strh	r1, [r3, #0]
 8004768:	2300      	movs	r3, #0
 800476a:	4665      	mov	r5, ip
 800476c:	6123      	str	r3, [r4, #16]
 800476e:	e7b9      	b.n	80046e4 <_printf_i+0x118>
 8004770:	6813      	ldr	r3, [r2, #0]
 8004772:	1d19      	adds	r1, r3, #4
 8004774:	6011      	str	r1, [r2, #0]
 8004776:	681d      	ldr	r5, [r3, #0]
 8004778:	6862      	ldr	r2, [r4, #4]
 800477a:	2100      	movs	r1, #0
 800477c:	4628      	mov	r0, r5
 800477e:	f000 feb1 	bl	80054e4 <memchr>
 8004782:	b108      	cbz	r0, 8004788 <_printf_i+0x1bc>
 8004784:	1b40      	subs	r0, r0, r5
 8004786:	6060      	str	r0, [r4, #4]
 8004788:	6863      	ldr	r3, [r4, #4]
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	2300      	movs	r3, #0
 800478e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004792:	e7a7      	b.n	80046e4 <_printf_i+0x118>
 8004794:	6923      	ldr	r3, [r4, #16]
 8004796:	462a      	mov	r2, r5
 8004798:	4639      	mov	r1, r7
 800479a:	4630      	mov	r0, r6
 800479c:	47c0      	blx	r8
 800479e:	3001      	adds	r0, #1
 80047a0:	d0aa      	beq.n	80046f8 <_printf_i+0x12c>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	079b      	lsls	r3, r3, #30
 80047a6:	d413      	bmi.n	80047d0 <_printf_i+0x204>
 80047a8:	68e0      	ldr	r0, [r4, #12]
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	4298      	cmp	r0, r3
 80047ae:	bfb8      	it	lt
 80047b0:	4618      	movlt	r0, r3
 80047b2:	e7a3      	b.n	80046fc <_printf_i+0x130>
 80047b4:	2301      	movs	r3, #1
 80047b6:	464a      	mov	r2, r9
 80047b8:	4639      	mov	r1, r7
 80047ba:	4630      	mov	r0, r6
 80047bc:	47c0      	blx	r8
 80047be:	3001      	adds	r0, #1
 80047c0:	d09a      	beq.n	80046f8 <_printf_i+0x12c>
 80047c2:	3501      	adds	r5, #1
 80047c4:	68e3      	ldr	r3, [r4, #12]
 80047c6:	9a03      	ldr	r2, [sp, #12]
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	42ab      	cmp	r3, r5
 80047cc:	dcf2      	bgt.n	80047b4 <_printf_i+0x1e8>
 80047ce:	e7eb      	b.n	80047a8 <_printf_i+0x1dc>
 80047d0:	2500      	movs	r5, #0
 80047d2:	f104 0919 	add.w	r9, r4, #25
 80047d6:	e7f5      	b.n	80047c4 <_printf_i+0x1f8>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ac      	bne.n	8004736 <_printf_i+0x16a>
 80047dc:	7803      	ldrb	r3, [r0, #0]
 80047de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e6:	e76c      	b.n	80046c2 <_printf_i+0xf6>
 80047e8:	0800709a 	.word	0x0800709a
 80047ec:	080070ab 	.word	0x080070ab

080047f0 <siprintf>:
 80047f0:	b40e      	push	{r1, r2, r3}
 80047f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047f6:	b500      	push	{lr}
 80047f8:	b09c      	sub	sp, #112	; 0x70
 80047fa:	ab1d      	add	r3, sp, #116	; 0x74
 80047fc:	9002      	str	r0, [sp, #8]
 80047fe:	9006      	str	r0, [sp, #24]
 8004800:	9107      	str	r1, [sp, #28]
 8004802:	9104      	str	r1, [sp, #16]
 8004804:	4808      	ldr	r0, [pc, #32]	; (8004828 <siprintf+0x38>)
 8004806:	4909      	ldr	r1, [pc, #36]	; (800482c <siprintf+0x3c>)
 8004808:	f853 2b04 	ldr.w	r2, [r3], #4
 800480c:	9105      	str	r1, [sp, #20]
 800480e:	6800      	ldr	r0, [r0, #0]
 8004810:	a902      	add	r1, sp, #8
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	f001 fa6a 	bl	8005cec <_svfiprintf_r>
 8004818:	2200      	movs	r2, #0
 800481a:	9b02      	ldr	r3, [sp, #8]
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	b01c      	add	sp, #112	; 0x70
 8004820:	f85d eb04 	ldr.w	lr, [sp], #4
 8004824:	b003      	add	sp, #12
 8004826:	4770      	bx	lr
 8004828:	2000000c 	.word	0x2000000c
 800482c:	ffff0208 	.word	0xffff0208

08004830 <quorem>:
 8004830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	6903      	ldr	r3, [r0, #16]
 8004836:	690c      	ldr	r4, [r1, #16]
 8004838:	4680      	mov	r8, r0
 800483a:	42a3      	cmp	r3, r4
 800483c:	f2c0 8084 	blt.w	8004948 <quorem+0x118>
 8004840:	3c01      	subs	r4, #1
 8004842:	f101 0714 	add.w	r7, r1, #20
 8004846:	f100 0614 	add.w	r6, r0, #20
 800484a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800484e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004852:	3501      	adds	r5, #1
 8004854:	fbb0 f5f5 	udiv	r5, r0, r5
 8004858:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800485c:	eb06 030c 	add.w	r3, r6, ip
 8004860:	eb07 090c 	add.w	r9, r7, ip
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	b39d      	cbz	r5, 80048d0 <quorem+0xa0>
 8004868:	f04f 0a00 	mov.w	sl, #0
 800486c:	4638      	mov	r0, r7
 800486e:	46b6      	mov	lr, r6
 8004870:	46d3      	mov	fp, sl
 8004872:	f850 2b04 	ldr.w	r2, [r0], #4
 8004876:	b293      	uxth	r3, r2
 8004878:	fb05 a303 	mla	r3, r5, r3, sl
 800487c:	0c12      	lsrs	r2, r2, #16
 800487e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004882:	fb05 a202 	mla	r2, r5, r2, sl
 8004886:	b29b      	uxth	r3, r3
 8004888:	ebab 0303 	sub.w	r3, fp, r3
 800488c:	f8de b000 	ldr.w	fp, [lr]
 8004890:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004894:	fa1f fb8b 	uxth.w	fp, fp
 8004898:	445b      	add	r3, fp
 800489a:	fa1f fb82 	uxth.w	fp, r2
 800489e:	f8de 2000 	ldr.w	r2, [lr]
 80048a2:	4581      	cmp	r9, r0
 80048a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80048a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048b2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80048b6:	f84e 3b04 	str.w	r3, [lr], #4
 80048ba:	d2da      	bcs.n	8004872 <quorem+0x42>
 80048bc:	f856 300c 	ldr.w	r3, [r6, ip]
 80048c0:	b933      	cbnz	r3, 80048d0 <quorem+0xa0>
 80048c2:	9b01      	ldr	r3, [sp, #4]
 80048c4:	3b04      	subs	r3, #4
 80048c6:	429e      	cmp	r6, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	d331      	bcc.n	8004930 <quorem+0x100>
 80048cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80048d0:	4640      	mov	r0, r8
 80048d2:	f001 f835 	bl	8005940 <__mcmp>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	db26      	blt.n	8004928 <quorem+0xf8>
 80048da:	4630      	mov	r0, r6
 80048dc:	f04f 0c00 	mov.w	ip, #0
 80048e0:	3501      	adds	r5, #1
 80048e2:	f857 1b04 	ldr.w	r1, [r7], #4
 80048e6:	f8d0 e000 	ldr.w	lr, [r0]
 80048ea:	b28b      	uxth	r3, r1
 80048ec:	ebac 0303 	sub.w	r3, ip, r3
 80048f0:	fa1f f28e 	uxth.w	r2, lr
 80048f4:	4413      	add	r3, r2
 80048f6:	0c0a      	lsrs	r2, r1, #16
 80048f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004900:	b29b      	uxth	r3, r3
 8004902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004906:	45b9      	cmp	r9, r7
 8004908:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800490c:	f840 3b04 	str.w	r3, [r0], #4
 8004910:	d2e7      	bcs.n	80048e2 <quorem+0xb2>
 8004912:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004916:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800491a:	b92a      	cbnz	r2, 8004928 <quorem+0xf8>
 800491c:	3b04      	subs	r3, #4
 800491e:	429e      	cmp	r6, r3
 8004920:	461a      	mov	r2, r3
 8004922:	d30b      	bcc.n	800493c <quorem+0x10c>
 8004924:	f8c8 4010 	str.w	r4, [r8, #16]
 8004928:	4628      	mov	r0, r5
 800492a:	b003      	add	sp, #12
 800492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	3b04      	subs	r3, #4
 8004934:	2a00      	cmp	r2, #0
 8004936:	d1c9      	bne.n	80048cc <quorem+0x9c>
 8004938:	3c01      	subs	r4, #1
 800493a:	e7c4      	b.n	80048c6 <quorem+0x96>
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	3b04      	subs	r3, #4
 8004940:	2a00      	cmp	r2, #0
 8004942:	d1ef      	bne.n	8004924 <quorem+0xf4>
 8004944:	3c01      	subs	r4, #1
 8004946:	e7ea      	b.n	800491e <quorem+0xee>
 8004948:	2000      	movs	r0, #0
 800494a:	e7ee      	b.n	800492a <quorem+0xfa>
 800494c:	0000      	movs	r0, r0
	...

08004950 <_dtoa_r>:
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	4616      	mov	r6, r2
 8004956:	461f      	mov	r7, r3
 8004958:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800495a:	b095      	sub	sp, #84	; 0x54
 800495c:	4604      	mov	r4, r0
 800495e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004962:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004966:	b93d      	cbnz	r5, 8004978 <_dtoa_r+0x28>
 8004968:	2010      	movs	r0, #16
 800496a:	f000 fdb3 	bl	80054d4 <malloc>
 800496e:	6260      	str	r0, [r4, #36]	; 0x24
 8004970:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004974:	6005      	str	r5, [r0, #0]
 8004976:	60c5      	str	r5, [r0, #12]
 8004978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	b151      	cbz	r1, 8004994 <_dtoa_r+0x44>
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	2301      	movs	r3, #1
 8004982:	4093      	lsls	r3, r2
 8004984:	604a      	str	r2, [r1, #4]
 8004986:	608b      	str	r3, [r1, #8]
 8004988:	4620      	mov	r0, r4
 800498a:	f000 fdf8 	bl	800557e <_Bfree>
 800498e:	2200      	movs	r2, #0
 8004990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	1e3b      	subs	r3, r7, #0
 8004996:	bfaf      	iteee	ge
 8004998:	2300      	movge	r3, #0
 800499a:	2201      	movlt	r2, #1
 800499c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80049a0:	9303      	strlt	r3, [sp, #12]
 80049a2:	bfac      	ite	ge
 80049a4:	f8c8 3000 	strge.w	r3, [r8]
 80049a8:	f8c8 2000 	strlt.w	r2, [r8]
 80049ac:	4bae      	ldr	r3, [pc, #696]	; (8004c68 <_dtoa_r+0x318>)
 80049ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80049b2:	ea33 0308 	bics.w	r3, r3, r8
 80049b6:	d11b      	bne.n	80049f0 <_dtoa_r+0xa0>
 80049b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80049bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	9b02      	ldr	r3, [sp, #8]
 80049c2:	b923      	cbnz	r3, 80049ce <_dtoa_r+0x7e>
 80049c4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80049c8:	2800      	cmp	r0, #0
 80049ca:	f000 8545 	beq.w	8005458 <_dtoa_r+0xb08>
 80049ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049d0:	b953      	cbnz	r3, 80049e8 <_dtoa_r+0x98>
 80049d2:	4ba6      	ldr	r3, [pc, #664]	; (8004c6c <_dtoa_r+0x31c>)
 80049d4:	e021      	b.n	8004a1a <_dtoa_r+0xca>
 80049d6:	4ba6      	ldr	r3, [pc, #664]	; (8004c70 <_dtoa_r+0x320>)
 80049d8:	9306      	str	r3, [sp, #24]
 80049da:	3308      	adds	r3, #8
 80049dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	9806      	ldr	r0, [sp, #24]
 80049e2:	b015      	add	sp, #84	; 0x54
 80049e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e8:	4ba0      	ldr	r3, [pc, #640]	; (8004c6c <_dtoa_r+0x31c>)
 80049ea:	9306      	str	r3, [sp, #24]
 80049ec:	3303      	adds	r3, #3
 80049ee:	e7f5      	b.n	80049dc <_dtoa_r+0x8c>
 80049f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2300      	movs	r3, #0
 80049f8:	4630      	mov	r0, r6
 80049fa:	4639      	mov	r1, r7
 80049fc:	f7fb ffd4 	bl	80009a8 <__aeabi_dcmpeq>
 8004a00:	4682      	mov	sl, r0
 8004a02:	b160      	cbz	r0, 8004a1e <_dtoa_r+0xce>
 8004a04:	2301      	movs	r3, #1
 8004a06:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8520 	beq.w	8005452 <_dtoa_r+0xb02>
 8004a12:	4b98      	ldr	r3, [pc, #608]	; (8004c74 <_dtoa_r+0x324>)
 8004a14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	9306      	str	r3, [sp, #24]
 8004a1c:	e7e0      	b.n	80049e0 <_dtoa_r+0x90>
 8004a1e:	ab12      	add	r3, sp, #72	; 0x48
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	ab13      	add	r3, sp, #76	; 0x4c
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4632      	mov	r2, r6
 8004a28:	463b      	mov	r3, r7
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f001 f800 	bl	8005a30 <__d2b>
 8004a30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004a34:	4683      	mov	fp, r0
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	d07d      	beq.n	8004b36 <_dtoa_r+0x1e6>
 8004a3a:	46b0      	mov	r8, r6
 8004a3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a40:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004a44:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004a48:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a4c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004a50:	2200      	movs	r2, #0
 8004a52:	4b89      	ldr	r3, [pc, #548]	; (8004c78 <_dtoa_r+0x328>)
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	f7fb fb86 	bl	8000168 <__aeabi_dsub>
 8004a5c:	a37c      	add	r3, pc, #496	; (adr r3, 8004c50 <_dtoa_r+0x300>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f7fb fd39 	bl	80004d8 <__aeabi_dmul>
 8004a66:	a37c      	add	r3, pc, #496	; (adr r3, 8004c58 <_dtoa_r+0x308>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fb fb7e 	bl	800016c <__adddf3>
 8004a70:	4606      	mov	r6, r0
 8004a72:	4628      	mov	r0, r5
 8004a74:	460f      	mov	r7, r1
 8004a76:	f7fb fcc5 	bl	8000404 <__aeabi_i2d>
 8004a7a:	a379      	add	r3, pc, #484	; (adr r3, 8004c60 <_dtoa_r+0x310>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f7fb fd2a 	bl	80004d8 <__aeabi_dmul>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4630      	mov	r0, r6
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	f7fb fb6e 	bl	800016c <__adddf3>
 8004a90:	4606      	mov	r6, r0
 8004a92:	460f      	mov	r7, r1
 8004a94:	f7fb ffd0 	bl	8000a38 <__aeabi_d2iz>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4682      	mov	sl, r0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	4639      	mov	r1, r7
 8004aa2:	f7fb ff8b 	bl	80009bc <__aeabi_dcmplt>
 8004aa6:	b148      	cbz	r0, 8004abc <_dtoa_r+0x16c>
 8004aa8:	4650      	mov	r0, sl
 8004aaa:	f7fb fcab 	bl	8000404 <__aeabi_i2d>
 8004aae:	4632      	mov	r2, r6
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	f7fb ff79 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab6:	b908      	cbnz	r0, 8004abc <_dtoa_r+0x16c>
 8004ab8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004abc:	f1ba 0f16 	cmp.w	sl, #22
 8004ac0:	d85a      	bhi.n	8004b78 <_dtoa_r+0x228>
 8004ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ac6:	496d      	ldr	r1, [pc, #436]	; (8004c7c <_dtoa_r+0x32c>)
 8004ac8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ad0:	f7fb ff92 	bl	80009f8 <__aeabi_dcmpgt>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d051      	beq.n	8004b7c <_dtoa_r+0x22c>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ade:	930d      	str	r3, [sp, #52]	; 0x34
 8004ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ae2:	1b5d      	subs	r5, r3, r5
 8004ae4:	1e6b      	subs	r3, r5, #1
 8004ae6:	9307      	str	r3, [sp, #28]
 8004ae8:	bf43      	ittte	mi
 8004aea:	2300      	movmi	r3, #0
 8004aec:	f1c5 0901 	rsbmi	r9, r5, #1
 8004af0:	9307      	strmi	r3, [sp, #28]
 8004af2:	f04f 0900 	movpl.w	r9, #0
 8004af6:	f1ba 0f00 	cmp.w	sl, #0
 8004afa:	db41      	blt.n	8004b80 <_dtoa_r+0x230>
 8004afc:	9b07      	ldr	r3, [sp, #28]
 8004afe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004b02:	4453      	add	r3, sl
 8004b04:	9307      	str	r3, [sp, #28]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9308      	str	r3, [sp, #32]
 8004b0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	f200 808f 	bhi.w	8004c30 <_dtoa_r+0x2e0>
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	bfc4      	itt	gt
 8004b16:	3b04      	subgt	r3, #4
 8004b18:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004b1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b1c:	bfc8      	it	gt
 8004b1e:	2500      	movgt	r5, #0
 8004b20:	f1a3 0302 	sub.w	r3, r3, #2
 8004b24:	bfd8      	it	le
 8004b26:	2501      	movle	r5, #1
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	f200 808d 	bhi.w	8004c48 <_dtoa_r+0x2f8>
 8004b2e:	e8df f003 	tbb	[pc, r3]
 8004b32:	7d7b      	.short	0x7d7b
 8004b34:	6f2f      	.short	0x6f2f
 8004b36:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004b3a:	441d      	add	r5, r3
 8004b3c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004b40:	2820      	cmp	r0, #32
 8004b42:	dd13      	ble.n	8004b6c <_dtoa_r+0x21c>
 8004b44:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004b48:	9b02      	ldr	r3, [sp, #8]
 8004b4a:	fa08 f800 	lsl.w	r8, r8, r0
 8004b4e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004b52:	fa23 f000 	lsr.w	r0, r3, r0
 8004b56:	ea48 0000 	orr.w	r0, r8, r0
 8004b5a:	f7fb fc43 	bl	80003e4 <__aeabi_ui2d>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	4680      	mov	r8, r0
 8004b62:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004b66:	3d01      	subs	r5, #1
 8004b68:	9310      	str	r3, [sp, #64]	; 0x40
 8004b6a:	e771      	b.n	8004a50 <_dtoa_r+0x100>
 8004b6c:	9b02      	ldr	r3, [sp, #8]
 8004b6e:	f1c0 0020 	rsb	r0, r0, #32
 8004b72:	fa03 f000 	lsl.w	r0, r3, r0
 8004b76:	e7f0      	b.n	8004b5a <_dtoa_r+0x20a>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e7b0      	b.n	8004ade <_dtoa_r+0x18e>
 8004b7c:	900d      	str	r0, [sp, #52]	; 0x34
 8004b7e:	e7af      	b.n	8004ae0 <_dtoa_r+0x190>
 8004b80:	f1ca 0300 	rsb	r3, sl, #0
 8004b84:	9308      	str	r3, [sp, #32]
 8004b86:	2300      	movs	r3, #0
 8004b88:	eba9 090a 	sub.w	r9, r9, sl
 8004b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b8e:	e7bc      	b.n	8004b0a <_dtoa_r+0x1ba>
 8004b90:	2301      	movs	r3, #1
 8004b92:	9309      	str	r3, [sp, #36]	; 0x24
 8004b94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dd74      	ble.n	8004c84 <_dtoa_r+0x334>
 8004b9a:	4698      	mov	r8, r3
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ba2:	6072      	str	r2, [r6, #4]
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	f102 0014 	add.w	r0, r2, #20
 8004baa:	4298      	cmp	r0, r3
 8004bac:	6871      	ldr	r1, [r6, #4]
 8004bae:	d96e      	bls.n	8004c8e <_dtoa_r+0x33e>
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 fcb0 	bl	8005516 <_Balloc>
 8004bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bb8:	6030      	str	r0, [r6, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b8 0f0e 	cmp.w	r8, #14
 8004bc0:	9306      	str	r3, [sp, #24]
 8004bc2:	f200 80ed 	bhi.w	8004da0 <_dtoa_r+0x450>
 8004bc6:	2d00      	cmp	r5, #0
 8004bc8:	f000 80ea 	beq.w	8004da0 <_dtoa_r+0x450>
 8004bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bd0:	f1ba 0f00 	cmp.w	sl, #0
 8004bd4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004bd8:	dd77      	ble.n	8004cca <_dtoa_r+0x37a>
 8004bda:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <_dtoa_r+0x32c>)
 8004bdc:	f00a 030f 	and.w	r3, sl, #15
 8004be0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004be4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004be8:	06f0      	lsls	r0, r6, #27
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004bf2:	d568      	bpl.n	8004cc6 <_dtoa_r+0x376>
 8004bf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004bf8:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <_dtoa_r+0x330>)
 8004bfa:	2503      	movs	r5, #3
 8004bfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c00:	f7fb fd94 	bl	800072c <__aeabi_ddiv>
 8004c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c08:	f006 060f 	and.w	r6, r6, #15
 8004c0c:	4f1c      	ldr	r7, [pc, #112]	; (8004c80 <_dtoa_r+0x330>)
 8004c0e:	e04f      	b.n	8004cb0 <_dtoa_r+0x360>
 8004c10:	2301      	movs	r3, #1
 8004c12:	9309      	str	r3, [sp, #36]	; 0x24
 8004c14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c16:	4453      	add	r3, sl
 8004c18:	f103 0801 	add.w	r8, r3, #1
 8004c1c:	9304      	str	r3, [sp, #16]
 8004c1e:	4643      	mov	r3, r8
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	bfb8      	it	lt
 8004c24:	2301      	movlt	r3, #1
 8004c26:	e7ba      	b.n	8004b9e <_dtoa_r+0x24e>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e7b2      	b.n	8004b92 <_dtoa_r+0x242>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e7f0      	b.n	8004c12 <_dtoa_r+0x2c2>
 8004c30:	2501      	movs	r5, #1
 8004c32:	2300      	movs	r3, #0
 8004c34:	9509      	str	r5, [sp, #36]	; 0x24
 8004c36:	931e      	str	r3, [sp, #120]	; 0x78
 8004c38:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	9304      	str	r3, [sp, #16]
 8004c40:	4698      	mov	r8, r3
 8004c42:	2312      	movs	r3, #18
 8004c44:	921f      	str	r2, [sp, #124]	; 0x7c
 8004c46:	e7aa      	b.n	8004b9e <_dtoa_r+0x24e>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c4c:	e7f4      	b.n	8004c38 <_dtoa_r+0x2e8>
 8004c4e:	bf00      	nop
 8004c50:	636f4361 	.word	0x636f4361
 8004c54:	3fd287a7 	.word	0x3fd287a7
 8004c58:	8b60c8b3 	.word	0x8b60c8b3
 8004c5c:	3fc68a28 	.word	0x3fc68a28
 8004c60:	509f79fb 	.word	0x509f79fb
 8004c64:	3fd34413 	.word	0x3fd34413
 8004c68:	7ff00000 	.word	0x7ff00000
 8004c6c:	080070c5 	.word	0x080070c5
 8004c70:	080070bc 	.word	0x080070bc
 8004c74:	08007099 	.word	0x08007099
 8004c78:	3ff80000 	.word	0x3ff80000
 8004c7c:	080070f8 	.word	0x080070f8
 8004c80:	080070d0 	.word	0x080070d0
 8004c84:	2301      	movs	r3, #1
 8004c86:	9304      	str	r3, [sp, #16]
 8004c88:	4698      	mov	r8, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	e7da      	b.n	8004c44 <_dtoa_r+0x2f4>
 8004c8e:	3101      	adds	r1, #1
 8004c90:	6071      	str	r1, [r6, #4]
 8004c92:	0052      	lsls	r2, r2, #1
 8004c94:	e787      	b.n	8004ba6 <_dtoa_r+0x256>
 8004c96:	07f1      	lsls	r1, r6, #31
 8004c98:	d508      	bpl.n	8004cac <_dtoa_r+0x35c>
 8004c9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca2:	f7fb fc19 	bl	80004d8 <__aeabi_dmul>
 8004ca6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004caa:	3501      	adds	r5, #1
 8004cac:	1076      	asrs	r6, r6, #1
 8004cae:	3708      	adds	r7, #8
 8004cb0:	2e00      	cmp	r6, #0
 8004cb2:	d1f0      	bne.n	8004c96 <_dtoa_r+0x346>
 8004cb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cbc:	f7fb fd36 	bl	800072c <__aeabi_ddiv>
 8004cc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cc4:	e01b      	b.n	8004cfe <_dtoa_r+0x3ae>
 8004cc6:	2502      	movs	r5, #2
 8004cc8:	e7a0      	b.n	8004c0c <_dtoa_r+0x2bc>
 8004cca:	f000 80a4 	beq.w	8004e16 <_dtoa_r+0x4c6>
 8004cce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004cd2:	f1ca 0600 	rsb	r6, sl, #0
 8004cd6:	4ba0      	ldr	r3, [pc, #640]	; (8004f58 <_dtoa_r+0x608>)
 8004cd8:	f006 020f 	and.w	r2, r6, #15
 8004cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb fbf8 	bl	80004d8 <__aeabi_dmul>
 8004ce8:	2502      	movs	r5, #2
 8004cea:	2300      	movs	r3, #0
 8004cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cf0:	4f9a      	ldr	r7, [pc, #616]	; (8004f5c <_dtoa_r+0x60c>)
 8004cf2:	1136      	asrs	r6, r6, #4
 8004cf4:	2e00      	cmp	r6, #0
 8004cf6:	f040 8083 	bne.w	8004e00 <_dtoa_r+0x4b0>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e0      	bne.n	8004cc0 <_dtoa_r+0x370>
 8004cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 808a 	beq.w	8004e1a <_dtoa_r+0x4ca>
 8004d06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004d0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d12:	2200      	movs	r2, #0
 8004d14:	4b92      	ldr	r3, [pc, #584]	; (8004f60 <_dtoa_r+0x610>)
 8004d16:	f7fb fe51 	bl	80009bc <__aeabi_dcmplt>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d07d      	beq.n	8004e1a <_dtoa_r+0x4ca>
 8004d1e:	f1b8 0f00 	cmp.w	r8, #0
 8004d22:	d07a      	beq.n	8004e1a <_dtoa_r+0x4ca>
 8004d24:	9b04      	ldr	r3, [sp, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	dd36      	ble.n	8004d98 <_dtoa_r+0x448>
 8004d2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4b8c      	ldr	r3, [pc, #560]	; (8004f64 <_dtoa_r+0x614>)
 8004d32:	f7fb fbd1 	bl	80004d8 <__aeabi_dmul>
 8004d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d3a:	9e04      	ldr	r6, [sp, #16]
 8004d3c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004d40:	3501      	adds	r5, #1
 8004d42:	4628      	mov	r0, r5
 8004d44:	f7fb fb5e 	bl	8000404 <__aeabi_i2d>
 8004d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d4c:	f7fb fbc4 	bl	80004d8 <__aeabi_dmul>
 8004d50:	2200      	movs	r2, #0
 8004d52:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <_dtoa_r+0x618>)
 8004d54:	f7fb fa0a 	bl	800016c <__adddf3>
 8004d58:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004d5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d60:	950b      	str	r5, [sp, #44]	; 0x2c
 8004d62:	2e00      	cmp	r6, #0
 8004d64:	d15c      	bne.n	8004e20 <_dtoa_r+0x4d0>
 8004d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4b7f      	ldr	r3, [pc, #508]	; (8004f6c <_dtoa_r+0x61c>)
 8004d6e:	f7fb f9fb 	bl	8000168 <__aeabi_dsub>
 8004d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d74:	462b      	mov	r3, r5
 8004d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d7a:	f7fb fe3d 	bl	80009f8 <__aeabi_dcmpgt>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f040 8281 	bne.w	8005286 <_dtoa_r+0x936>
 8004d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d8a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004d8e:	f7fb fe15 	bl	80009bc <__aeabi_dcmplt>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	f040 8275 	bne.w	8005282 <_dtoa_r+0x932>
 8004d98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004da0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f2c0 814b 	blt.w	800503e <_dtoa_r+0x6ee>
 8004da8:	f1ba 0f0e 	cmp.w	sl, #14
 8004dac:	f300 8147 	bgt.w	800503e <_dtoa_r+0x6ee>
 8004db0:	4b69      	ldr	r3, [pc, #420]	; (8004f58 <_dtoa_r+0x608>)
 8004db2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f280 80d7 	bge.w	8004f74 <_dtoa_r+0x624>
 8004dc6:	f1b8 0f00 	cmp.w	r8, #0
 8004dca:	f300 80d3 	bgt.w	8004f74 <_dtoa_r+0x624>
 8004dce:	f040 8257 	bne.w	8005280 <_dtoa_r+0x930>
 8004dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4b64      	ldr	r3, [pc, #400]	; (8004f6c <_dtoa_r+0x61c>)
 8004dda:	f7fb fb7d 	bl	80004d8 <__aeabi_dmul>
 8004dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004de2:	f7fb fdff 	bl	80009e4 <__aeabi_dcmpge>
 8004de6:	4646      	mov	r6, r8
 8004de8:	4647      	mov	r7, r8
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f040 822d 	bne.w	800524a <_dtoa_r+0x8fa>
 8004df0:	9b06      	ldr	r3, [sp, #24]
 8004df2:	9a06      	ldr	r2, [sp, #24]
 8004df4:	1c5d      	adds	r5, r3, #1
 8004df6:	2331      	movs	r3, #49	; 0x31
 8004df8:	f10a 0a01 	add.w	sl, sl, #1
 8004dfc:	7013      	strb	r3, [r2, #0]
 8004dfe:	e228      	b.n	8005252 <_dtoa_r+0x902>
 8004e00:	07f2      	lsls	r2, r6, #31
 8004e02:	d505      	bpl.n	8004e10 <_dtoa_r+0x4c0>
 8004e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e08:	f7fb fb66 	bl	80004d8 <__aeabi_dmul>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	3501      	adds	r5, #1
 8004e10:	1076      	asrs	r6, r6, #1
 8004e12:	3708      	adds	r7, #8
 8004e14:	e76e      	b.n	8004cf4 <_dtoa_r+0x3a4>
 8004e16:	2502      	movs	r5, #2
 8004e18:	e771      	b.n	8004cfe <_dtoa_r+0x3ae>
 8004e1a:	4657      	mov	r7, sl
 8004e1c:	4646      	mov	r6, r8
 8004e1e:	e790      	b.n	8004d42 <_dtoa_r+0x3f2>
 8004e20:	4b4d      	ldr	r3, [pc, #308]	; (8004f58 <_dtoa_r+0x608>)
 8004e22:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e26:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d048      	beq.n	8004ec2 <_dtoa_r+0x572>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	2000      	movs	r0, #0
 8004e36:	494e      	ldr	r1, [pc, #312]	; (8004f70 <_dtoa_r+0x620>)
 8004e38:	f7fb fc78 	bl	800072c <__aeabi_ddiv>
 8004e3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e40:	f7fb f992 	bl	8000168 <__aeabi_dsub>
 8004e44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e48:	9d06      	ldr	r5, [sp, #24]
 8004e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e4e:	f7fb fdf3 	bl	8000a38 <__aeabi_d2iz>
 8004e52:	9011      	str	r0, [sp, #68]	; 0x44
 8004e54:	f7fb fad6 	bl	8000404 <__aeabi_i2d>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e60:	f7fb f982 	bl	8000168 <__aeabi_dsub>
 8004e64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e6a:	3330      	adds	r3, #48	; 0x30
 8004e6c:	f805 3b01 	strb.w	r3, [r5], #1
 8004e70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e74:	f7fb fda2 	bl	80009bc <__aeabi_dcmplt>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d163      	bne.n	8004f44 <_dtoa_r+0x5f4>
 8004e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e80:	2000      	movs	r0, #0
 8004e82:	4937      	ldr	r1, [pc, #220]	; (8004f60 <_dtoa_r+0x610>)
 8004e84:	f7fb f970 	bl	8000168 <__aeabi_dsub>
 8004e88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e8c:	f7fb fd96 	bl	80009bc <__aeabi_dcmplt>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	f040 80b5 	bne.w	8005000 <_dtoa_r+0x6b0>
 8004e96:	9b06      	ldr	r3, [sp, #24]
 8004e98:	1aeb      	subs	r3, r5, r3
 8004e9a:	429e      	cmp	r6, r3
 8004e9c:	f77f af7c 	ble.w	8004d98 <_dtoa_r+0x448>
 8004ea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <_dtoa_r+0x614>)
 8004ea8:	f7fb fb16 	bl	80004d8 <__aeabi_dmul>
 8004eac:	2200      	movs	r2, #0
 8004eae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb6:	4b2b      	ldr	r3, [pc, #172]	; (8004f64 <_dtoa_r+0x614>)
 8004eb8:	f7fb fb0e 	bl	80004d8 <__aeabi_dmul>
 8004ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec0:	e7c3      	b.n	8004e4a <_dtoa_r+0x4fa>
 8004ec2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ec6:	f7fb fb07 	bl	80004d8 <__aeabi_dmul>
 8004eca:	9b06      	ldr	r3, [sp, #24]
 8004ecc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ed0:	199d      	adds	r5, r3, r6
 8004ed2:	461e      	mov	r6, r3
 8004ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ed8:	f7fb fdae 	bl	8000a38 <__aeabi_d2iz>
 8004edc:	9011      	str	r0, [sp, #68]	; 0x44
 8004ede:	f7fb fa91 	bl	8000404 <__aeabi_i2d>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eea:	f7fb f93d 	bl	8000168 <__aeabi_dsub>
 8004eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef4:	3330      	adds	r3, #48	; 0x30
 8004ef6:	f806 3b01 	strb.w	r3, [r6], #1
 8004efa:	42ae      	cmp	r6, r5
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	d124      	bne.n	8004f4c <_dtoa_r+0x5fc>
 8004f02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <_dtoa_r+0x620>)
 8004f08:	f7fb f930 	bl	800016c <__adddf3>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f14:	f7fb fd70 	bl	80009f8 <__aeabi_dcmpgt>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d171      	bne.n	8005000 <_dtoa_r+0x6b0>
 8004f1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f20:	2000      	movs	r0, #0
 8004f22:	4913      	ldr	r1, [pc, #76]	; (8004f70 <_dtoa_r+0x620>)
 8004f24:	f7fb f920 	bl	8000168 <__aeabi_dsub>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f30:	f7fb fd44 	bl	80009bc <__aeabi_dcmplt>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f43f af2f 	beq.w	8004d98 <_dtoa_r+0x448>
 8004f3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f3e:	1e6a      	subs	r2, r5, #1
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d001      	beq.n	8004f48 <_dtoa_r+0x5f8>
 8004f44:	46ba      	mov	sl, r7
 8004f46:	e04a      	b.n	8004fde <_dtoa_r+0x68e>
 8004f48:	4615      	mov	r5, r2
 8004f4a:	e7f6      	b.n	8004f3a <_dtoa_r+0x5ea>
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <_dtoa_r+0x614>)
 8004f4e:	f7fb fac3 	bl	80004d8 <__aeabi_dmul>
 8004f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f56:	e7bd      	b.n	8004ed4 <_dtoa_r+0x584>
 8004f58:	080070f8 	.word	0x080070f8
 8004f5c:	080070d0 	.word	0x080070d0
 8004f60:	3ff00000 	.word	0x3ff00000
 8004f64:	40240000 	.word	0x40240000
 8004f68:	401c0000 	.word	0x401c0000
 8004f6c:	40140000 	.word	0x40140000
 8004f70:	3fe00000 	.word	0x3fe00000
 8004f74:	9d06      	ldr	r5, [sp, #24]
 8004f76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f7e:	4630      	mov	r0, r6
 8004f80:	4639      	mov	r1, r7
 8004f82:	f7fb fbd3 	bl	800072c <__aeabi_ddiv>
 8004f86:	f7fb fd57 	bl	8000a38 <__aeabi_d2iz>
 8004f8a:	4681      	mov	r9, r0
 8004f8c:	f7fb fa3a 	bl	8000404 <__aeabi_i2d>
 8004f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f94:	f7fb faa0 	bl	80004d8 <__aeabi_dmul>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb f8e2 	bl	8000168 <__aeabi_dsub>
 8004fa4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004fa8:	f805 6b01 	strb.w	r6, [r5], #1
 8004fac:	9e06      	ldr	r6, [sp, #24]
 8004fae:	4602      	mov	r2, r0
 8004fb0:	1bae      	subs	r6, r5, r6
 8004fb2:	45b0      	cmp	r8, r6
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	d135      	bne.n	8005024 <_dtoa_r+0x6d4>
 8004fb8:	f7fb f8d8 	bl	800016c <__adddf3>
 8004fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	f7fb fd18 	bl	80009f8 <__aeabi_dcmpgt>
 8004fc8:	b9c8      	cbnz	r0, 8004ffe <_dtoa_r+0x6ae>
 8004fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fce:	4630      	mov	r0, r6
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	f7fb fce9 	bl	80009a8 <__aeabi_dcmpeq>
 8004fd6:	b110      	cbz	r0, 8004fde <_dtoa_r+0x68e>
 8004fd8:	f019 0f01 	tst.w	r9, #1
 8004fdc:	d10f      	bne.n	8004ffe <_dtoa_r+0x6ae>
 8004fde:	4659      	mov	r1, fp
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 facc 	bl	800557e <_Bfree>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004fea:	702b      	strb	r3, [r5, #0]
 8004fec:	f10a 0301 	add.w	r3, sl, #1
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f43f acf3 	beq.w	80049e0 <_dtoa_r+0x90>
 8004ffa:	601d      	str	r5, [r3, #0]
 8004ffc:	e4f0      	b.n	80049e0 <_dtoa_r+0x90>
 8004ffe:	4657      	mov	r7, sl
 8005000:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005004:	1e6b      	subs	r3, r5, #1
 8005006:	2a39      	cmp	r2, #57	; 0x39
 8005008:	d106      	bne.n	8005018 <_dtoa_r+0x6c8>
 800500a:	9a06      	ldr	r2, [sp, #24]
 800500c:	429a      	cmp	r2, r3
 800500e:	d107      	bne.n	8005020 <_dtoa_r+0x6d0>
 8005010:	2330      	movs	r3, #48	; 0x30
 8005012:	7013      	strb	r3, [r2, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	3701      	adds	r7, #1
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	3201      	adds	r2, #1
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e791      	b.n	8004f44 <_dtoa_r+0x5f4>
 8005020:	461d      	mov	r5, r3
 8005022:	e7ed      	b.n	8005000 <_dtoa_r+0x6b0>
 8005024:	2200      	movs	r2, #0
 8005026:	4b99      	ldr	r3, [pc, #612]	; (800528c <_dtoa_r+0x93c>)
 8005028:	f7fb fa56 	bl	80004d8 <__aeabi_dmul>
 800502c:	2200      	movs	r2, #0
 800502e:	2300      	movs	r3, #0
 8005030:	4606      	mov	r6, r0
 8005032:	460f      	mov	r7, r1
 8005034:	f7fb fcb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005038:	2800      	cmp	r0, #0
 800503a:	d09e      	beq.n	8004f7a <_dtoa_r+0x62a>
 800503c:	e7cf      	b.n	8004fde <_dtoa_r+0x68e>
 800503e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005040:	2a00      	cmp	r2, #0
 8005042:	f000 8088 	beq.w	8005156 <_dtoa_r+0x806>
 8005046:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005048:	2a01      	cmp	r2, #1
 800504a:	dc6d      	bgt.n	8005128 <_dtoa_r+0x7d8>
 800504c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800504e:	2a00      	cmp	r2, #0
 8005050:	d066      	beq.n	8005120 <_dtoa_r+0x7d0>
 8005052:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005056:	464d      	mov	r5, r9
 8005058:	9e08      	ldr	r6, [sp, #32]
 800505a:	9a07      	ldr	r2, [sp, #28]
 800505c:	2101      	movs	r1, #1
 800505e:	441a      	add	r2, r3
 8005060:	4620      	mov	r0, r4
 8005062:	4499      	add	r9, r3
 8005064:	9207      	str	r2, [sp, #28]
 8005066:	f000 fb2a 	bl	80056be <__i2b>
 800506a:	4607      	mov	r7, r0
 800506c:	2d00      	cmp	r5, #0
 800506e:	dd0b      	ble.n	8005088 <_dtoa_r+0x738>
 8005070:	9b07      	ldr	r3, [sp, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	dd08      	ble.n	8005088 <_dtoa_r+0x738>
 8005076:	42ab      	cmp	r3, r5
 8005078:	bfa8      	it	ge
 800507a:	462b      	movge	r3, r5
 800507c:	9a07      	ldr	r2, [sp, #28]
 800507e:	eba9 0903 	sub.w	r9, r9, r3
 8005082:	1aed      	subs	r5, r5, r3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	9b08      	ldr	r3, [sp, #32]
 800508a:	b1eb      	cbz	r3, 80050c8 <_dtoa_r+0x778>
 800508c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d065      	beq.n	800515e <_dtoa_r+0x80e>
 8005092:	b18e      	cbz	r6, 80050b8 <_dtoa_r+0x768>
 8005094:	4639      	mov	r1, r7
 8005096:	4632      	mov	r2, r6
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fbaf 	bl	80057fc <__pow5mult>
 800509e:	465a      	mov	r2, fp
 80050a0:	4601      	mov	r1, r0
 80050a2:	4607      	mov	r7, r0
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 fb13 	bl	80056d0 <__multiply>
 80050aa:	4659      	mov	r1, fp
 80050ac:	900a      	str	r0, [sp, #40]	; 0x28
 80050ae:	4620      	mov	r0, r4
 80050b0:	f000 fa65 	bl	800557e <_Bfree>
 80050b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b6:	469b      	mov	fp, r3
 80050b8:	9b08      	ldr	r3, [sp, #32]
 80050ba:	1b9a      	subs	r2, r3, r6
 80050bc:	d004      	beq.n	80050c8 <_dtoa_r+0x778>
 80050be:	4659      	mov	r1, fp
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 fb9b 	bl	80057fc <__pow5mult>
 80050c6:	4683      	mov	fp, r0
 80050c8:	2101      	movs	r1, #1
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 faf7 	bl	80056be <__i2b>
 80050d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050d2:	4606      	mov	r6, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 81c6 	beq.w	8005466 <_dtoa_r+0xb16>
 80050da:	461a      	mov	r2, r3
 80050dc:	4601      	mov	r1, r0
 80050de:	4620      	mov	r0, r4
 80050e0:	f000 fb8c 	bl	80057fc <__pow5mult>
 80050e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050e6:	4606      	mov	r6, r0
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	dc3e      	bgt.n	800516a <_dtoa_r+0x81a>
 80050ec:	9b02      	ldr	r3, [sp, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d137      	bne.n	8005162 <_dtoa_r+0x812>
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d134      	bne.n	8005166 <_dtoa_r+0x816>
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005102:	0d1b      	lsrs	r3, r3, #20
 8005104:	051b      	lsls	r3, r3, #20
 8005106:	b12b      	cbz	r3, 8005114 <_dtoa_r+0x7c4>
 8005108:	9b07      	ldr	r3, [sp, #28]
 800510a:	f109 0901 	add.w	r9, r9, #1
 800510e:	3301      	adds	r3, #1
 8005110:	9307      	str	r3, [sp, #28]
 8005112:	2301      	movs	r3, #1
 8005114:	9308      	str	r3, [sp, #32]
 8005116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005118:	2b00      	cmp	r3, #0
 800511a:	d128      	bne.n	800516e <_dtoa_r+0x81e>
 800511c:	2001      	movs	r0, #1
 800511e:	e02e      	b.n	800517e <_dtoa_r+0x82e>
 8005120:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005122:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005126:	e796      	b.n	8005056 <_dtoa_r+0x706>
 8005128:	9b08      	ldr	r3, [sp, #32]
 800512a:	f108 36ff 	add.w	r6, r8, #4294967295
 800512e:	42b3      	cmp	r3, r6
 8005130:	bfb7      	itett	lt
 8005132:	9b08      	ldrlt	r3, [sp, #32]
 8005134:	1b9e      	subge	r6, r3, r6
 8005136:	1af2      	sublt	r2, r6, r3
 8005138:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800513a:	bfbf      	itttt	lt
 800513c:	9608      	strlt	r6, [sp, #32]
 800513e:	189b      	addlt	r3, r3, r2
 8005140:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005142:	2600      	movlt	r6, #0
 8005144:	f1b8 0f00 	cmp.w	r8, #0
 8005148:	bfb9      	ittee	lt
 800514a:	eba9 0508 	sublt.w	r5, r9, r8
 800514e:	2300      	movlt	r3, #0
 8005150:	464d      	movge	r5, r9
 8005152:	4643      	movge	r3, r8
 8005154:	e781      	b.n	800505a <_dtoa_r+0x70a>
 8005156:	9e08      	ldr	r6, [sp, #32]
 8005158:	464d      	mov	r5, r9
 800515a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800515c:	e786      	b.n	800506c <_dtoa_r+0x71c>
 800515e:	9a08      	ldr	r2, [sp, #32]
 8005160:	e7ad      	b.n	80050be <_dtoa_r+0x76e>
 8005162:	2300      	movs	r3, #0
 8005164:	e7d6      	b.n	8005114 <_dtoa_r+0x7c4>
 8005166:	9b02      	ldr	r3, [sp, #8]
 8005168:	e7d4      	b.n	8005114 <_dtoa_r+0x7c4>
 800516a:	2300      	movs	r3, #0
 800516c:	9308      	str	r3, [sp, #32]
 800516e:	6933      	ldr	r3, [r6, #16]
 8005170:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005174:	6918      	ldr	r0, [r3, #16]
 8005176:	f000 fa54 	bl	8005622 <__hi0bits>
 800517a:	f1c0 0020 	rsb	r0, r0, #32
 800517e:	9b07      	ldr	r3, [sp, #28]
 8005180:	4418      	add	r0, r3
 8005182:	f010 001f 	ands.w	r0, r0, #31
 8005186:	d047      	beq.n	8005218 <_dtoa_r+0x8c8>
 8005188:	f1c0 0320 	rsb	r3, r0, #32
 800518c:	2b04      	cmp	r3, #4
 800518e:	dd3b      	ble.n	8005208 <_dtoa_r+0x8b8>
 8005190:	9b07      	ldr	r3, [sp, #28]
 8005192:	f1c0 001c 	rsb	r0, r0, #28
 8005196:	4481      	add	r9, r0
 8005198:	4405      	add	r5, r0
 800519a:	4403      	add	r3, r0
 800519c:	9307      	str	r3, [sp, #28]
 800519e:	f1b9 0f00 	cmp.w	r9, #0
 80051a2:	dd05      	ble.n	80051b0 <_dtoa_r+0x860>
 80051a4:	4659      	mov	r1, fp
 80051a6:	464a      	mov	r2, r9
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 fb75 	bl	8005898 <__lshift>
 80051ae:	4683      	mov	fp, r0
 80051b0:	9b07      	ldr	r3, [sp, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dd05      	ble.n	80051c2 <_dtoa_r+0x872>
 80051b6:	4631      	mov	r1, r6
 80051b8:	461a      	mov	r2, r3
 80051ba:	4620      	mov	r0, r4
 80051bc:	f000 fb6c 	bl	8005898 <__lshift>
 80051c0:	4606      	mov	r6, r0
 80051c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c4:	b353      	cbz	r3, 800521c <_dtoa_r+0x8cc>
 80051c6:	4631      	mov	r1, r6
 80051c8:	4658      	mov	r0, fp
 80051ca:	f000 fbb9 	bl	8005940 <__mcmp>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	da24      	bge.n	800521c <_dtoa_r+0x8cc>
 80051d2:	2300      	movs	r3, #0
 80051d4:	4659      	mov	r1, fp
 80051d6:	220a      	movs	r2, #10
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 f9e7 	bl	80055ac <__multadd>
 80051de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051e4:	4683      	mov	fp, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8144 	beq.w	8005474 <_dtoa_r+0xb24>
 80051ec:	2300      	movs	r3, #0
 80051ee:	4639      	mov	r1, r7
 80051f0:	220a      	movs	r2, #10
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 f9da 	bl	80055ac <__multadd>
 80051f8:	9b04      	ldr	r3, [sp, #16]
 80051fa:	4607      	mov	r7, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	dc4d      	bgt.n	800529c <_dtoa_r+0x94c>
 8005200:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005202:	2b02      	cmp	r3, #2
 8005204:	dd4a      	ble.n	800529c <_dtoa_r+0x94c>
 8005206:	e011      	b.n	800522c <_dtoa_r+0x8dc>
 8005208:	d0c9      	beq.n	800519e <_dtoa_r+0x84e>
 800520a:	9a07      	ldr	r2, [sp, #28]
 800520c:	331c      	adds	r3, #28
 800520e:	441a      	add	r2, r3
 8005210:	4499      	add	r9, r3
 8005212:	441d      	add	r5, r3
 8005214:	4613      	mov	r3, r2
 8005216:	e7c1      	b.n	800519c <_dtoa_r+0x84c>
 8005218:	4603      	mov	r3, r0
 800521a:	e7f6      	b.n	800520a <_dtoa_r+0x8ba>
 800521c:	f1b8 0f00 	cmp.w	r8, #0
 8005220:	dc36      	bgt.n	8005290 <_dtoa_r+0x940>
 8005222:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005224:	2b02      	cmp	r3, #2
 8005226:	dd33      	ble.n	8005290 <_dtoa_r+0x940>
 8005228:	f8cd 8010 	str.w	r8, [sp, #16]
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	b963      	cbnz	r3, 800524a <_dtoa_r+0x8fa>
 8005230:	4631      	mov	r1, r6
 8005232:	2205      	movs	r2, #5
 8005234:	4620      	mov	r0, r4
 8005236:	f000 f9b9 	bl	80055ac <__multadd>
 800523a:	4601      	mov	r1, r0
 800523c:	4606      	mov	r6, r0
 800523e:	4658      	mov	r0, fp
 8005240:	f000 fb7e 	bl	8005940 <__mcmp>
 8005244:	2800      	cmp	r0, #0
 8005246:	f73f add3 	bgt.w	8004df0 <_dtoa_r+0x4a0>
 800524a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800524c:	9d06      	ldr	r5, [sp, #24]
 800524e:	ea6f 0a03 	mvn.w	sl, r3
 8005252:	f04f 0900 	mov.w	r9, #0
 8005256:	4631      	mov	r1, r6
 8005258:	4620      	mov	r0, r4
 800525a:	f000 f990 	bl	800557e <_Bfree>
 800525e:	2f00      	cmp	r7, #0
 8005260:	f43f aebd 	beq.w	8004fde <_dtoa_r+0x68e>
 8005264:	f1b9 0f00 	cmp.w	r9, #0
 8005268:	d005      	beq.n	8005276 <_dtoa_r+0x926>
 800526a:	45b9      	cmp	r9, r7
 800526c:	d003      	beq.n	8005276 <_dtoa_r+0x926>
 800526e:	4649      	mov	r1, r9
 8005270:	4620      	mov	r0, r4
 8005272:	f000 f984 	bl	800557e <_Bfree>
 8005276:	4639      	mov	r1, r7
 8005278:	4620      	mov	r0, r4
 800527a:	f000 f980 	bl	800557e <_Bfree>
 800527e:	e6ae      	b.n	8004fde <_dtoa_r+0x68e>
 8005280:	2600      	movs	r6, #0
 8005282:	4637      	mov	r7, r6
 8005284:	e7e1      	b.n	800524a <_dtoa_r+0x8fa>
 8005286:	46ba      	mov	sl, r7
 8005288:	4637      	mov	r7, r6
 800528a:	e5b1      	b.n	8004df0 <_dtoa_r+0x4a0>
 800528c:	40240000 	.word	0x40240000
 8005290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005292:	f8cd 8010 	str.w	r8, [sp, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80f3 	beq.w	8005482 <_dtoa_r+0xb32>
 800529c:	2d00      	cmp	r5, #0
 800529e:	dd05      	ble.n	80052ac <_dtoa_r+0x95c>
 80052a0:	4639      	mov	r1, r7
 80052a2:	462a      	mov	r2, r5
 80052a4:	4620      	mov	r0, r4
 80052a6:	f000 faf7 	bl	8005898 <__lshift>
 80052aa:	4607      	mov	r7, r0
 80052ac:	9b08      	ldr	r3, [sp, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04c      	beq.n	800534c <_dtoa_r+0x9fc>
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4620      	mov	r0, r4
 80052b6:	f000 f92e 	bl	8005516 <_Balloc>
 80052ba:	4605      	mov	r5, r0
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	f107 010c 	add.w	r1, r7, #12
 80052c2:	3202      	adds	r2, #2
 80052c4:	0092      	lsls	r2, r2, #2
 80052c6:	300c      	adds	r0, #12
 80052c8:	f000 f91a 	bl	8005500 <memcpy>
 80052cc:	2201      	movs	r2, #1
 80052ce:	4629      	mov	r1, r5
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 fae1 	bl	8005898 <__lshift>
 80052d6:	46b9      	mov	r9, r7
 80052d8:	4607      	mov	r7, r0
 80052da:	9b06      	ldr	r3, [sp, #24]
 80052dc:	9307      	str	r3, [sp, #28]
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	9308      	str	r3, [sp, #32]
 80052e6:	4631      	mov	r1, r6
 80052e8:	4658      	mov	r0, fp
 80052ea:	f7ff faa1 	bl	8004830 <quorem>
 80052ee:	4649      	mov	r1, r9
 80052f0:	4605      	mov	r5, r0
 80052f2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80052f6:	4658      	mov	r0, fp
 80052f8:	f000 fb22 	bl	8005940 <__mcmp>
 80052fc:	463a      	mov	r2, r7
 80052fe:	9002      	str	r0, [sp, #8]
 8005300:	4631      	mov	r1, r6
 8005302:	4620      	mov	r0, r4
 8005304:	f000 fb36 	bl	8005974 <__mdiff>
 8005308:	68c3      	ldr	r3, [r0, #12]
 800530a:	4602      	mov	r2, r0
 800530c:	bb03      	cbnz	r3, 8005350 <_dtoa_r+0xa00>
 800530e:	4601      	mov	r1, r0
 8005310:	9009      	str	r0, [sp, #36]	; 0x24
 8005312:	4658      	mov	r0, fp
 8005314:	f000 fb14 	bl	8005940 <__mcmp>
 8005318:	4603      	mov	r3, r0
 800531a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800531c:	4611      	mov	r1, r2
 800531e:	4620      	mov	r0, r4
 8005320:	9309      	str	r3, [sp, #36]	; 0x24
 8005322:	f000 f92c 	bl	800557e <_Bfree>
 8005326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005328:	b9a3      	cbnz	r3, 8005354 <_dtoa_r+0xa04>
 800532a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800532c:	b992      	cbnz	r2, 8005354 <_dtoa_r+0xa04>
 800532e:	9a08      	ldr	r2, [sp, #32]
 8005330:	b982      	cbnz	r2, 8005354 <_dtoa_r+0xa04>
 8005332:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005336:	d029      	beq.n	800538c <_dtoa_r+0xa3c>
 8005338:	9b02      	ldr	r3, [sp, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	dd01      	ble.n	8005342 <_dtoa_r+0x9f2>
 800533e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005342:	9b07      	ldr	r3, [sp, #28]
 8005344:	1c5d      	adds	r5, r3, #1
 8005346:	f883 8000 	strb.w	r8, [r3]
 800534a:	e784      	b.n	8005256 <_dtoa_r+0x906>
 800534c:	4638      	mov	r0, r7
 800534e:	e7c2      	b.n	80052d6 <_dtoa_r+0x986>
 8005350:	2301      	movs	r3, #1
 8005352:	e7e3      	b.n	800531c <_dtoa_r+0x9cc>
 8005354:	9a02      	ldr	r2, [sp, #8]
 8005356:	2a00      	cmp	r2, #0
 8005358:	db04      	blt.n	8005364 <_dtoa_r+0xa14>
 800535a:	d123      	bne.n	80053a4 <_dtoa_r+0xa54>
 800535c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800535e:	bb0a      	cbnz	r2, 80053a4 <_dtoa_r+0xa54>
 8005360:	9a08      	ldr	r2, [sp, #32]
 8005362:	b9fa      	cbnz	r2, 80053a4 <_dtoa_r+0xa54>
 8005364:	2b00      	cmp	r3, #0
 8005366:	ddec      	ble.n	8005342 <_dtoa_r+0x9f2>
 8005368:	4659      	mov	r1, fp
 800536a:	2201      	movs	r2, #1
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fa93 	bl	8005898 <__lshift>
 8005372:	4631      	mov	r1, r6
 8005374:	4683      	mov	fp, r0
 8005376:	f000 fae3 	bl	8005940 <__mcmp>
 800537a:	2800      	cmp	r0, #0
 800537c:	dc03      	bgt.n	8005386 <_dtoa_r+0xa36>
 800537e:	d1e0      	bne.n	8005342 <_dtoa_r+0x9f2>
 8005380:	f018 0f01 	tst.w	r8, #1
 8005384:	d0dd      	beq.n	8005342 <_dtoa_r+0x9f2>
 8005386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800538a:	d1d8      	bne.n	800533e <_dtoa_r+0x9ee>
 800538c:	9b07      	ldr	r3, [sp, #28]
 800538e:	9a07      	ldr	r2, [sp, #28]
 8005390:	1c5d      	adds	r5, r3, #1
 8005392:	2339      	movs	r3, #57	; 0x39
 8005394:	7013      	strb	r3, [r2, #0]
 8005396:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800539a:	1e6a      	subs	r2, r5, #1
 800539c:	2b39      	cmp	r3, #57	; 0x39
 800539e:	d04d      	beq.n	800543c <_dtoa_r+0xaec>
 80053a0:	3301      	adds	r3, #1
 80053a2:	e052      	b.n	800544a <_dtoa_r+0xafa>
 80053a4:	9a07      	ldr	r2, [sp, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f102 0501 	add.w	r5, r2, #1
 80053ac:	dd06      	ble.n	80053bc <_dtoa_r+0xa6c>
 80053ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80053b2:	d0eb      	beq.n	800538c <_dtoa_r+0xa3c>
 80053b4:	f108 0801 	add.w	r8, r8, #1
 80053b8:	9b07      	ldr	r3, [sp, #28]
 80053ba:	e7c4      	b.n	8005346 <_dtoa_r+0x9f6>
 80053bc:	9b06      	ldr	r3, [sp, #24]
 80053be:	9a04      	ldr	r2, [sp, #16]
 80053c0:	1aeb      	subs	r3, r5, r3
 80053c2:	4293      	cmp	r3, r2
 80053c4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80053c8:	d021      	beq.n	800540e <_dtoa_r+0xabe>
 80053ca:	4659      	mov	r1, fp
 80053cc:	2300      	movs	r3, #0
 80053ce:	220a      	movs	r2, #10
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 f8eb 	bl	80055ac <__multadd>
 80053d6:	45b9      	cmp	r9, r7
 80053d8:	4683      	mov	fp, r0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	f04f 020a 	mov.w	r2, #10
 80053e2:	4649      	mov	r1, r9
 80053e4:	4620      	mov	r0, r4
 80053e6:	d105      	bne.n	80053f4 <_dtoa_r+0xaa4>
 80053e8:	f000 f8e0 	bl	80055ac <__multadd>
 80053ec:	4681      	mov	r9, r0
 80053ee:	4607      	mov	r7, r0
 80053f0:	9507      	str	r5, [sp, #28]
 80053f2:	e778      	b.n	80052e6 <_dtoa_r+0x996>
 80053f4:	f000 f8da 	bl	80055ac <__multadd>
 80053f8:	4639      	mov	r1, r7
 80053fa:	4681      	mov	r9, r0
 80053fc:	2300      	movs	r3, #0
 80053fe:	220a      	movs	r2, #10
 8005400:	4620      	mov	r0, r4
 8005402:	f000 f8d3 	bl	80055ac <__multadd>
 8005406:	4607      	mov	r7, r0
 8005408:	e7f2      	b.n	80053f0 <_dtoa_r+0xaa0>
 800540a:	f04f 0900 	mov.w	r9, #0
 800540e:	4659      	mov	r1, fp
 8005410:	2201      	movs	r2, #1
 8005412:	4620      	mov	r0, r4
 8005414:	f000 fa40 	bl	8005898 <__lshift>
 8005418:	4631      	mov	r1, r6
 800541a:	4683      	mov	fp, r0
 800541c:	f000 fa90 	bl	8005940 <__mcmp>
 8005420:	2800      	cmp	r0, #0
 8005422:	dcb8      	bgt.n	8005396 <_dtoa_r+0xa46>
 8005424:	d102      	bne.n	800542c <_dtoa_r+0xadc>
 8005426:	f018 0f01 	tst.w	r8, #1
 800542a:	d1b4      	bne.n	8005396 <_dtoa_r+0xa46>
 800542c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005430:	1e6a      	subs	r2, r5, #1
 8005432:	2b30      	cmp	r3, #48	; 0x30
 8005434:	f47f af0f 	bne.w	8005256 <_dtoa_r+0x906>
 8005438:	4615      	mov	r5, r2
 800543a:	e7f7      	b.n	800542c <_dtoa_r+0xadc>
 800543c:	9b06      	ldr	r3, [sp, #24]
 800543e:	4293      	cmp	r3, r2
 8005440:	d105      	bne.n	800544e <_dtoa_r+0xafe>
 8005442:	2331      	movs	r3, #49	; 0x31
 8005444:	9a06      	ldr	r2, [sp, #24]
 8005446:	f10a 0a01 	add.w	sl, sl, #1
 800544a:	7013      	strb	r3, [r2, #0]
 800544c:	e703      	b.n	8005256 <_dtoa_r+0x906>
 800544e:	4615      	mov	r5, r2
 8005450:	e7a1      	b.n	8005396 <_dtoa_r+0xa46>
 8005452:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <_dtoa_r+0xb60>)
 8005454:	f7ff bae1 	b.w	8004a1a <_dtoa_r+0xca>
 8005458:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800545a:	2b00      	cmp	r3, #0
 800545c:	f47f aabb 	bne.w	80049d6 <_dtoa_r+0x86>
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <_dtoa_r+0xb64>)
 8005462:	f7ff bada 	b.w	8004a1a <_dtoa_r+0xca>
 8005466:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005468:	2b01      	cmp	r3, #1
 800546a:	f77f ae3f 	ble.w	80050ec <_dtoa_r+0x79c>
 800546e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005470:	9308      	str	r3, [sp, #32]
 8005472:	e653      	b.n	800511c <_dtoa_r+0x7cc>
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	dc03      	bgt.n	8005482 <_dtoa_r+0xb32>
 800547a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800547c:	2b02      	cmp	r3, #2
 800547e:	f73f aed5 	bgt.w	800522c <_dtoa_r+0x8dc>
 8005482:	9d06      	ldr	r5, [sp, #24]
 8005484:	4631      	mov	r1, r6
 8005486:	4658      	mov	r0, fp
 8005488:	f7ff f9d2 	bl	8004830 <quorem>
 800548c:	9b06      	ldr	r3, [sp, #24]
 800548e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005492:	f805 8b01 	strb.w	r8, [r5], #1
 8005496:	9a04      	ldr	r2, [sp, #16]
 8005498:	1aeb      	subs	r3, r5, r3
 800549a:	429a      	cmp	r2, r3
 800549c:	ddb5      	ble.n	800540a <_dtoa_r+0xaba>
 800549e:	4659      	mov	r1, fp
 80054a0:	2300      	movs	r3, #0
 80054a2:	220a      	movs	r2, #10
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 f881 	bl	80055ac <__multadd>
 80054aa:	4683      	mov	fp, r0
 80054ac:	e7ea      	b.n	8005484 <_dtoa_r+0xb34>
 80054ae:	bf00      	nop
 80054b0:	08007098 	.word	0x08007098
 80054b4:	080070bc 	.word	0x080070bc

080054b8 <_localeconv_r>:
 80054b8:	4b04      	ldr	r3, [pc, #16]	; (80054cc <_localeconv_r+0x14>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6a18      	ldr	r0, [r3, #32]
 80054be:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <_localeconv_r+0x18>)
 80054c0:	2800      	cmp	r0, #0
 80054c2:	bf08      	it	eq
 80054c4:	4618      	moveq	r0, r3
 80054c6:	30f0      	adds	r0, #240	; 0xf0
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000000c 	.word	0x2000000c
 80054d0:	20000070 	.word	0x20000070

080054d4 <malloc>:
 80054d4:	4b02      	ldr	r3, [pc, #8]	; (80054e0 <malloc+0xc>)
 80054d6:	4601      	mov	r1, r0
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	f000 bb53 	b.w	8005b84 <_malloc_r>
 80054de:	bf00      	nop
 80054e0:	2000000c 	.word	0x2000000c

080054e4 <memchr>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	b2c9      	uxtb	r1, r1
 80054e8:	4402      	add	r2, r0
 80054ea:	4290      	cmp	r0, r2
 80054ec:	4603      	mov	r3, r0
 80054ee:	d101      	bne.n	80054f4 <memchr+0x10>
 80054f0:	2300      	movs	r3, #0
 80054f2:	e003      	b.n	80054fc <memchr+0x18>
 80054f4:	781c      	ldrb	r4, [r3, #0]
 80054f6:	3001      	adds	r0, #1
 80054f8:	428c      	cmp	r4, r1
 80054fa:	d1f6      	bne.n	80054ea <memchr+0x6>
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd10      	pop	{r4, pc}

08005500 <memcpy>:
 8005500:	b510      	push	{r4, lr}
 8005502:	1e43      	subs	r3, r0, #1
 8005504:	440a      	add	r2, r1
 8005506:	4291      	cmp	r1, r2
 8005508:	d100      	bne.n	800550c <memcpy+0xc>
 800550a:	bd10      	pop	{r4, pc}
 800550c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005514:	e7f7      	b.n	8005506 <memcpy+0x6>

08005516 <_Balloc>:
 8005516:	b570      	push	{r4, r5, r6, lr}
 8005518:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800551a:	4604      	mov	r4, r0
 800551c:	460e      	mov	r6, r1
 800551e:	b93d      	cbnz	r5, 8005530 <_Balloc+0x1a>
 8005520:	2010      	movs	r0, #16
 8005522:	f7ff ffd7 	bl	80054d4 <malloc>
 8005526:	6260      	str	r0, [r4, #36]	; 0x24
 8005528:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800552c:	6005      	str	r5, [r0, #0]
 800552e:	60c5      	str	r5, [r0, #12]
 8005530:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005532:	68eb      	ldr	r3, [r5, #12]
 8005534:	b183      	cbz	r3, 8005558 <_Balloc+0x42>
 8005536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800553e:	b9b8      	cbnz	r0, 8005570 <_Balloc+0x5a>
 8005540:	2101      	movs	r1, #1
 8005542:	fa01 f506 	lsl.w	r5, r1, r6
 8005546:	1d6a      	adds	r2, r5, #5
 8005548:	0092      	lsls	r2, r2, #2
 800554a:	4620      	mov	r0, r4
 800554c:	f000 fabf 	bl	8005ace <_calloc_r>
 8005550:	b160      	cbz	r0, 800556c <_Balloc+0x56>
 8005552:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005556:	e00e      	b.n	8005576 <_Balloc+0x60>
 8005558:	2221      	movs	r2, #33	; 0x21
 800555a:	2104      	movs	r1, #4
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fab6 	bl	8005ace <_calloc_r>
 8005562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005564:	60e8      	str	r0, [r5, #12]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e4      	bne.n	8005536 <_Balloc+0x20>
 800556c:	2000      	movs	r0, #0
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	6802      	ldr	r2, [r0, #0]
 8005572:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005576:	2300      	movs	r3, #0
 8005578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800557c:	e7f7      	b.n	800556e <_Balloc+0x58>

0800557e <_Bfree>:
 800557e:	b570      	push	{r4, r5, r6, lr}
 8005580:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005582:	4606      	mov	r6, r0
 8005584:	460d      	mov	r5, r1
 8005586:	b93c      	cbnz	r4, 8005598 <_Bfree+0x1a>
 8005588:	2010      	movs	r0, #16
 800558a:	f7ff ffa3 	bl	80054d4 <malloc>
 800558e:	6270      	str	r0, [r6, #36]	; 0x24
 8005590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005594:	6004      	str	r4, [r0, #0]
 8005596:	60c4      	str	r4, [r0, #12]
 8005598:	b13d      	cbz	r5, 80055aa <_Bfree+0x2c>
 800559a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800559c:	686a      	ldr	r2, [r5, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055a4:	6029      	str	r1, [r5, #0]
 80055a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80055aa:	bd70      	pop	{r4, r5, r6, pc}

080055ac <__multadd>:
 80055ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b0:	461f      	mov	r7, r3
 80055b2:	4606      	mov	r6, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	2300      	movs	r3, #0
 80055b8:	690d      	ldr	r5, [r1, #16]
 80055ba:	f101 0c14 	add.w	ip, r1, #20
 80055be:	f8dc 0000 	ldr.w	r0, [ip]
 80055c2:	3301      	adds	r3, #1
 80055c4:	b281      	uxth	r1, r0
 80055c6:	fb02 7101 	mla	r1, r2, r1, r7
 80055ca:	0c00      	lsrs	r0, r0, #16
 80055cc:	0c0f      	lsrs	r7, r1, #16
 80055ce:	fb02 7000 	mla	r0, r2, r0, r7
 80055d2:	b289      	uxth	r1, r1
 80055d4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80055d8:	429d      	cmp	r5, r3
 80055da:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80055de:	f84c 1b04 	str.w	r1, [ip], #4
 80055e2:	dcec      	bgt.n	80055be <__multadd+0x12>
 80055e4:	b1d7      	cbz	r7, 800561c <__multadd+0x70>
 80055e6:	68a3      	ldr	r3, [r4, #8]
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	dc12      	bgt.n	8005612 <__multadd+0x66>
 80055ec:	6861      	ldr	r1, [r4, #4]
 80055ee:	4630      	mov	r0, r6
 80055f0:	3101      	adds	r1, #1
 80055f2:	f7ff ff90 	bl	8005516 <_Balloc>
 80055f6:	4680      	mov	r8, r0
 80055f8:	6922      	ldr	r2, [r4, #16]
 80055fa:	f104 010c 	add.w	r1, r4, #12
 80055fe:	3202      	adds	r2, #2
 8005600:	0092      	lsls	r2, r2, #2
 8005602:	300c      	adds	r0, #12
 8005604:	f7ff ff7c 	bl	8005500 <memcpy>
 8005608:	4621      	mov	r1, r4
 800560a:	4630      	mov	r0, r6
 800560c:	f7ff ffb7 	bl	800557e <_Bfree>
 8005610:	4644      	mov	r4, r8
 8005612:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005616:	3501      	adds	r5, #1
 8005618:	615f      	str	r7, [r3, #20]
 800561a:	6125      	str	r5, [r4, #16]
 800561c:	4620      	mov	r0, r4
 800561e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005622 <__hi0bits>:
 8005622:	0c02      	lsrs	r2, r0, #16
 8005624:	0412      	lsls	r2, r2, #16
 8005626:	4603      	mov	r3, r0
 8005628:	b9b2      	cbnz	r2, 8005658 <__hi0bits+0x36>
 800562a:	0403      	lsls	r3, r0, #16
 800562c:	2010      	movs	r0, #16
 800562e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005632:	bf04      	itt	eq
 8005634:	021b      	lsleq	r3, r3, #8
 8005636:	3008      	addeq	r0, #8
 8005638:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800563c:	bf04      	itt	eq
 800563e:	011b      	lsleq	r3, r3, #4
 8005640:	3004      	addeq	r0, #4
 8005642:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005646:	bf04      	itt	eq
 8005648:	009b      	lsleq	r3, r3, #2
 800564a:	3002      	addeq	r0, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	db06      	blt.n	800565e <__hi0bits+0x3c>
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	d503      	bpl.n	800565c <__hi0bits+0x3a>
 8005654:	3001      	adds	r0, #1
 8005656:	4770      	bx	lr
 8005658:	2000      	movs	r0, #0
 800565a:	e7e8      	b.n	800562e <__hi0bits+0xc>
 800565c:	2020      	movs	r0, #32
 800565e:	4770      	bx	lr

08005660 <__lo0bits>:
 8005660:	6803      	ldr	r3, [r0, #0]
 8005662:	4601      	mov	r1, r0
 8005664:	f013 0207 	ands.w	r2, r3, #7
 8005668:	d00b      	beq.n	8005682 <__lo0bits+0x22>
 800566a:	07da      	lsls	r2, r3, #31
 800566c:	d423      	bmi.n	80056b6 <__lo0bits+0x56>
 800566e:	0798      	lsls	r0, r3, #30
 8005670:	bf49      	itett	mi
 8005672:	085b      	lsrmi	r3, r3, #1
 8005674:	089b      	lsrpl	r3, r3, #2
 8005676:	2001      	movmi	r0, #1
 8005678:	600b      	strmi	r3, [r1, #0]
 800567a:	bf5c      	itt	pl
 800567c:	600b      	strpl	r3, [r1, #0]
 800567e:	2002      	movpl	r0, #2
 8005680:	4770      	bx	lr
 8005682:	b298      	uxth	r0, r3
 8005684:	b9a8      	cbnz	r0, 80056b2 <__lo0bits+0x52>
 8005686:	2010      	movs	r0, #16
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800568e:	bf04      	itt	eq
 8005690:	0a1b      	lsreq	r3, r3, #8
 8005692:	3008      	addeq	r0, #8
 8005694:	071a      	lsls	r2, r3, #28
 8005696:	bf04      	itt	eq
 8005698:	091b      	lsreq	r3, r3, #4
 800569a:	3004      	addeq	r0, #4
 800569c:	079a      	lsls	r2, r3, #30
 800569e:	bf04      	itt	eq
 80056a0:	089b      	lsreq	r3, r3, #2
 80056a2:	3002      	addeq	r0, #2
 80056a4:	07da      	lsls	r2, r3, #31
 80056a6:	d402      	bmi.n	80056ae <__lo0bits+0x4e>
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	d006      	beq.n	80056ba <__lo0bits+0x5a>
 80056ac:	3001      	adds	r0, #1
 80056ae:	600b      	str	r3, [r1, #0]
 80056b0:	4770      	bx	lr
 80056b2:	4610      	mov	r0, r2
 80056b4:	e7e9      	b.n	800568a <__lo0bits+0x2a>
 80056b6:	2000      	movs	r0, #0
 80056b8:	4770      	bx	lr
 80056ba:	2020      	movs	r0, #32
 80056bc:	4770      	bx	lr

080056be <__i2b>:
 80056be:	b510      	push	{r4, lr}
 80056c0:	460c      	mov	r4, r1
 80056c2:	2101      	movs	r1, #1
 80056c4:	f7ff ff27 	bl	8005516 <_Balloc>
 80056c8:	2201      	movs	r2, #1
 80056ca:	6144      	str	r4, [r0, #20]
 80056cc:	6102      	str	r2, [r0, #16]
 80056ce:	bd10      	pop	{r4, pc}

080056d0 <__multiply>:
 80056d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	4614      	mov	r4, r2
 80056d6:	690a      	ldr	r2, [r1, #16]
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	4688      	mov	r8, r1
 80056dc:	429a      	cmp	r2, r3
 80056de:	bfbe      	ittt	lt
 80056e0:	460b      	movlt	r3, r1
 80056e2:	46a0      	movlt	r8, r4
 80056e4:	461c      	movlt	r4, r3
 80056e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80056ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80056ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80056f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80056f6:	eb07 0609 	add.w	r6, r7, r9
 80056fa:	42b3      	cmp	r3, r6
 80056fc:	bfb8      	it	lt
 80056fe:	3101      	addlt	r1, #1
 8005700:	f7ff ff09 	bl	8005516 <_Balloc>
 8005704:	f100 0514 	add.w	r5, r0, #20
 8005708:	462b      	mov	r3, r5
 800570a:	2200      	movs	r2, #0
 800570c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005710:	4573      	cmp	r3, lr
 8005712:	d316      	bcc.n	8005742 <__multiply+0x72>
 8005714:	f104 0214 	add.w	r2, r4, #20
 8005718:	f108 0114 	add.w	r1, r8, #20
 800571c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005720:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	9b00      	ldr	r3, [sp, #0]
 8005728:	9201      	str	r2, [sp, #4]
 800572a:	4293      	cmp	r3, r2
 800572c:	d80c      	bhi.n	8005748 <__multiply+0x78>
 800572e:	2e00      	cmp	r6, #0
 8005730:	dd03      	ble.n	800573a <__multiply+0x6a>
 8005732:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005736:	2b00      	cmp	r3, #0
 8005738:	d05d      	beq.n	80057f6 <__multiply+0x126>
 800573a:	6106      	str	r6, [r0, #16]
 800573c:	b003      	add	sp, #12
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005742:	f843 2b04 	str.w	r2, [r3], #4
 8005746:	e7e3      	b.n	8005710 <__multiply+0x40>
 8005748:	f8b2 b000 	ldrh.w	fp, [r2]
 800574c:	f1bb 0f00 	cmp.w	fp, #0
 8005750:	d023      	beq.n	800579a <__multiply+0xca>
 8005752:	4689      	mov	r9, r1
 8005754:	46ac      	mov	ip, r5
 8005756:	f04f 0800 	mov.w	r8, #0
 800575a:	f859 4b04 	ldr.w	r4, [r9], #4
 800575e:	f8dc a000 	ldr.w	sl, [ip]
 8005762:	b2a3      	uxth	r3, r4
 8005764:	fa1f fa8a 	uxth.w	sl, sl
 8005768:	fb0b a303 	mla	r3, fp, r3, sl
 800576c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005770:	f8dc 4000 	ldr.w	r4, [ip]
 8005774:	4443      	add	r3, r8
 8005776:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800577a:	fb0b 840a 	mla	r4, fp, sl, r8
 800577e:	46e2      	mov	sl, ip
 8005780:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005784:	b29b      	uxth	r3, r3
 8005786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800578a:	454f      	cmp	r7, r9
 800578c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005790:	f84a 3b04 	str.w	r3, [sl], #4
 8005794:	d82b      	bhi.n	80057ee <__multiply+0x11e>
 8005796:	f8cc 8004 	str.w	r8, [ip, #4]
 800579a:	9b01      	ldr	r3, [sp, #4]
 800579c:	3204      	adds	r2, #4
 800579e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80057a2:	f1ba 0f00 	cmp.w	sl, #0
 80057a6:	d020      	beq.n	80057ea <__multiply+0x11a>
 80057a8:	4689      	mov	r9, r1
 80057aa:	46a8      	mov	r8, r5
 80057ac:	f04f 0b00 	mov.w	fp, #0
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	f8b9 c000 	ldrh.w	ip, [r9]
 80057b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	fb0a 440c 	mla	r4, sl, ip, r4
 80057c0:	46c4      	mov	ip, r8
 80057c2:	445c      	add	r4, fp
 80057c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80057c8:	f84c 3b04 	str.w	r3, [ip], #4
 80057cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80057d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	fb0a b303 	mla	r3, sl, r3, fp
 80057da:	454f      	cmp	r7, r9
 80057dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80057e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80057e4:	d805      	bhi.n	80057f2 <__multiply+0x122>
 80057e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80057ea:	3504      	adds	r5, #4
 80057ec:	e79b      	b.n	8005726 <__multiply+0x56>
 80057ee:	46d4      	mov	ip, sl
 80057f0:	e7b3      	b.n	800575a <__multiply+0x8a>
 80057f2:	46e0      	mov	r8, ip
 80057f4:	e7dd      	b.n	80057b2 <__multiply+0xe2>
 80057f6:	3e01      	subs	r6, #1
 80057f8:	e799      	b.n	800572e <__multiply+0x5e>
	...

080057fc <__pow5mult>:
 80057fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005800:	4615      	mov	r5, r2
 8005802:	f012 0203 	ands.w	r2, r2, #3
 8005806:	4606      	mov	r6, r0
 8005808:	460f      	mov	r7, r1
 800580a:	d007      	beq.n	800581c <__pow5mult+0x20>
 800580c:	4c21      	ldr	r4, [pc, #132]	; (8005894 <__pow5mult+0x98>)
 800580e:	3a01      	subs	r2, #1
 8005810:	2300      	movs	r3, #0
 8005812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005816:	f7ff fec9 	bl	80055ac <__multadd>
 800581a:	4607      	mov	r7, r0
 800581c:	10ad      	asrs	r5, r5, #2
 800581e:	d035      	beq.n	800588c <__pow5mult+0x90>
 8005820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005822:	b93c      	cbnz	r4, 8005834 <__pow5mult+0x38>
 8005824:	2010      	movs	r0, #16
 8005826:	f7ff fe55 	bl	80054d4 <malloc>
 800582a:	6270      	str	r0, [r6, #36]	; 0x24
 800582c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005830:	6004      	str	r4, [r0, #0]
 8005832:	60c4      	str	r4, [r0, #12]
 8005834:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800583c:	b94c      	cbnz	r4, 8005852 <__pow5mult+0x56>
 800583e:	f240 2171 	movw	r1, #625	; 0x271
 8005842:	4630      	mov	r0, r6
 8005844:	f7ff ff3b 	bl	80056be <__i2b>
 8005848:	2300      	movs	r3, #0
 800584a:	4604      	mov	r4, r0
 800584c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005850:	6003      	str	r3, [r0, #0]
 8005852:	f04f 0800 	mov.w	r8, #0
 8005856:	07eb      	lsls	r3, r5, #31
 8005858:	d50a      	bpl.n	8005870 <__pow5mult+0x74>
 800585a:	4639      	mov	r1, r7
 800585c:	4622      	mov	r2, r4
 800585e:	4630      	mov	r0, r6
 8005860:	f7ff ff36 	bl	80056d0 <__multiply>
 8005864:	4681      	mov	r9, r0
 8005866:	4639      	mov	r1, r7
 8005868:	4630      	mov	r0, r6
 800586a:	f7ff fe88 	bl	800557e <_Bfree>
 800586e:	464f      	mov	r7, r9
 8005870:	106d      	asrs	r5, r5, #1
 8005872:	d00b      	beq.n	800588c <__pow5mult+0x90>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	b938      	cbnz	r0, 8005888 <__pow5mult+0x8c>
 8005878:	4622      	mov	r2, r4
 800587a:	4621      	mov	r1, r4
 800587c:	4630      	mov	r0, r6
 800587e:	f7ff ff27 	bl	80056d0 <__multiply>
 8005882:	6020      	str	r0, [r4, #0]
 8005884:	f8c0 8000 	str.w	r8, [r0]
 8005888:	4604      	mov	r4, r0
 800588a:	e7e4      	b.n	8005856 <__pow5mult+0x5a>
 800588c:	4638      	mov	r0, r7
 800588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005892:	bf00      	nop
 8005894:	080071c0 	.word	0x080071c0

08005898 <__lshift>:
 8005898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800589c:	460c      	mov	r4, r1
 800589e:	4607      	mov	r7, r0
 80058a0:	4616      	mov	r6, r2
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058a8:	eb0a 0903 	add.w	r9, sl, r3
 80058ac:	6849      	ldr	r1, [r1, #4]
 80058ae:	68a3      	ldr	r3, [r4, #8]
 80058b0:	f109 0501 	add.w	r5, r9, #1
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	db32      	blt.n	800591e <__lshift+0x86>
 80058b8:	4638      	mov	r0, r7
 80058ba:	f7ff fe2c 	bl	8005516 <_Balloc>
 80058be:	2300      	movs	r3, #0
 80058c0:	4680      	mov	r8, r0
 80058c2:	461a      	mov	r2, r3
 80058c4:	f100 0114 	add.w	r1, r0, #20
 80058c8:	4553      	cmp	r3, sl
 80058ca:	db2b      	blt.n	8005924 <__lshift+0x8c>
 80058cc:	6920      	ldr	r0, [r4, #16]
 80058ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058d2:	f104 0314 	add.w	r3, r4, #20
 80058d6:	f016 021f 	ands.w	r2, r6, #31
 80058da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058e2:	d025      	beq.n	8005930 <__lshift+0x98>
 80058e4:	2000      	movs	r0, #0
 80058e6:	f1c2 0e20 	rsb	lr, r2, #32
 80058ea:	468a      	mov	sl, r1
 80058ec:	681e      	ldr	r6, [r3, #0]
 80058ee:	4096      	lsls	r6, r2
 80058f0:	4330      	orrs	r0, r6
 80058f2:	f84a 0b04 	str.w	r0, [sl], #4
 80058f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80058fa:	459c      	cmp	ip, r3
 80058fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8005900:	d814      	bhi.n	800592c <__lshift+0x94>
 8005902:	6048      	str	r0, [r1, #4]
 8005904:	b108      	cbz	r0, 800590a <__lshift+0x72>
 8005906:	f109 0502 	add.w	r5, r9, #2
 800590a:	3d01      	subs	r5, #1
 800590c:	4638      	mov	r0, r7
 800590e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005912:	4621      	mov	r1, r4
 8005914:	f7ff fe33 	bl	800557e <_Bfree>
 8005918:	4640      	mov	r0, r8
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591e:	3101      	adds	r1, #1
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	e7c7      	b.n	80058b4 <__lshift+0x1c>
 8005924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005928:	3301      	adds	r3, #1
 800592a:	e7cd      	b.n	80058c8 <__lshift+0x30>
 800592c:	4651      	mov	r1, sl
 800592e:	e7dc      	b.n	80058ea <__lshift+0x52>
 8005930:	3904      	subs	r1, #4
 8005932:	f853 2b04 	ldr.w	r2, [r3], #4
 8005936:	459c      	cmp	ip, r3
 8005938:	f841 2f04 	str.w	r2, [r1, #4]!
 800593c:	d8f9      	bhi.n	8005932 <__lshift+0x9a>
 800593e:	e7e4      	b.n	800590a <__lshift+0x72>

08005940 <__mcmp>:
 8005940:	6903      	ldr	r3, [r0, #16]
 8005942:	690a      	ldr	r2, [r1, #16]
 8005944:	b530      	push	{r4, r5, lr}
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	d10c      	bne.n	8005964 <__mcmp+0x24>
 800594a:	0092      	lsls	r2, r2, #2
 800594c:	3014      	adds	r0, #20
 800594e:	3114      	adds	r1, #20
 8005950:	1884      	adds	r4, r0, r2
 8005952:	4411      	add	r1, r2
 8005954:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005958:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800595c:	4295      	cmp	r5, r2
 800595e:	d003      	beq.n	8005968 <__mcmp+0x28>
 8005960:	d305      	bcc.n	800596e <__mcmp+0x2e>
 8005962:	2301      	movs	r3, #1
 8005964:	4618      	mov	r0, r3
 8005966:	bd30      	pop	{r4, r5, pc}
 8005968:	42a0      	cmp	r0, r4
 800596a:	d3f3      	bcc.n	8005954 <__mcmp+0x14>
 800596c:	e7fa      	b.n	8005964 <__mcmp+0x24>
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	e7f7      	b.n	8005964 <__mcmp+0x24>

08005974 <__mdiff>:
 8005974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005978:	460d      	mov	r5, r1
 800597a:	4607      	mov	r7, r0
 800597c:	4611      	mov	r1, r2
 800597e:	4628      	mov	r0, r5
 8005980:	4614      	mov	r4, r2
 8005982:	f7ff ffdd 	bl	8005940 <__mcmp>
 8005986:	1e06      	subs	r6, r0, #0
 8005988:	d108      	bne.n	800599c <__mdiff+0x28>
 800598a:	4631      	mov	r1, r6
 800598c:	4638      	mov	r0, r7
 800598e:	f7ff fdc2 	bl	8005516 <_Balloc>
 8005992:	2301      	movs	r3, #1
 8005994:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599c:	bfa4      	itt	ge
 800599e:	4623      	movge	r3, r4
 80059a0:	462c      	movge	r4, r5
 80059a2:	4638      	mov	r0, r7
 80059a4:	6861      	ldr	r1, [r4, #4]
 80059a6:	bfa6      	itte	ge
 80059a8:	461d      	movge	r5, r3
 80059aa:	2600      	movge	r6, #0
 80059ac:	2601      	movlt	r6, #1
 80059ae:	f7ff fdb2 	bl	8005516 <_Balloc>
 80059b2:	f04f 0e00 	mov.w	lr, #0
 80059b6:	60c6      	str	r6, [r0, #12]
 80059b8:	692b      	ldr	r3, [r5, #16]
 80059ba:	6926      	ldr	r6, [r4, #16]
 80059bc:	f104 0214 	add.w	r2, r4, #20
 80059c0:	f105 0914 	add.w	r9, r5, #20
 80059c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80059c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80059cc:	f100 0114 	add.w	r1, r0, #20
 80059d0:	f852 ab04 	ldr.w	sl, [r2], #4
 80059d4:	f859 5b04 	ldr.w	r5, [r9], #4
 80059d8:	fa1f f38a 	uxth.w	r3, sl
 80059dc:	4473      	add	r3, lr
 80059de:	b2ac      	uxth	r4, r5
 80059e0:	1b1b      	subs	r3, r3, r4
 80059e2:	0c2c      	lsrs	r4, r5, #16
 80059e4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80059e8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80059f2:	45c8      	cmp	r8, r9
 80059f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80059f8:	4694      	mov	ip, r2
 80059fa:	f841 4b04 	str.w	r4, [r1], #4
 80059fe:	d8e7      	bhi.n	80059d0 <__mdiff+0x5c>
 8005a00:	45bc      	cmp	ip, r7
 8005a02:	d304      	bcc.n	8005a0e <__mdiff+0x9a>
 8005a04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005a08:	b183      	cbz	r3, 8005a2c <__mdiff+0xb8>
 8005a0a:	6106      	str	r6, [r0, #16]
 8005a0c:	e7c4      	b.n	8005998 <__mdiff+0x24>
 8005a0e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005a12:	b2a2      	uxth	r2, r4
 8005a14:	4472      	add	r2, lr
 8005a16:	1413      	asrs	r3, r2, #16
 8005a18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a22:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005a26:	f841 2b04 	str.w	r2, [r1], #4
 8005a2a:	e7e9      	b.n	8005a00 <__mdiff+0x8c>
 8005a2c:	3e01      	subs	r6, #1
 8005a2e:	e7e9      	b.n	8005a04 <__mdiff+0x90>

08005a30 <__d2b>:
 8005a30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005a34:	461c      	mov	r4, r3
 8005a36:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4690      	mov	r8, r2
 8005a3e:	f7ff fd6a 	bl	8005516 <_Balloc>
 8005a42:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005a46:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005a4a:	4607      	mov	r7, r0
 8005a4c:	bb34      	cbnz	r4, 8005a9c <__d2b+0x6c>
 8005a4e:	9201      	str	r2, [sp, #4]
 8005a50:	f1b8 0200 	subs.w	r2, r8, #0
 8005a54:	d027      	beq.n	8005aa6 <__d2b+0x76>
 8005a56:	a802      	add	r0, sp, #8
 8005a58:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005a5c:	f7ff fe00 	bl	8005660 <__lo0bits>
 8005a60:	9900      	ldr	r1, [sp, #0]
 8005a62:	b1f0      	cbz	r0, 8005aa2 <__d2b+0x72>
 8005a64:	9a01      	ldr	r2, [sp, #4]
 8005a66:	f1c0 0320 	rsb	r3, r0, #32
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	40c2      	lsrs	r2, r0
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	9201      	str	r2, [sp, #4]
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bf14      	ite	ne
 8005a7c:	2102      	movne	r1, #2
 8005a7e:	2101      	moveq	r1, #1
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	6139      	str	r1, [r7, #16]
 8005a84:	b1c4      	cbz	r4, 8005ab8 <__d2b+0x88>
 8005a86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a8a:	4404      	add	r4, r0
 8005a8c:	6034      	str	r4, [r6, #0]
 8005a8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a92:	6028      	str	r0, [r5, #0]
 8005a94:	4638      	mov	r0, r7
 8005a96:	b002      	add	sp, #8
 8005a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005aa0:	e7d5      	b.n	8005a4e <__d2b+0x1e>
 8005aa2:	6179      	str	r1, [r7, #20]
 8005aa4:	e7e7      	b.n	8005a76 <__d2b+0x46>
 8005aa6:	a801      	add	r0, sp, #4
 8005aa8:	f7ff fdda 	bl	8005660 <__lo0bits>
 8005aac:	2101      	movs	r1, #1
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	6139      	str	r1, [r7, #16]
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	3020      	adds	r0, #32
 8005ab6:	e7e5      	b.n	8005a84 <__d2b+0x54>
 8005ab8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005abc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005ac0:	6030      	str	r0, [r6, #0]
 8005ac2:	6918      	ldr	r0, [r3, #16]
 8005ac4:	f7ff fdad 	bl	8005622 <__hi0bits>
 8005ac8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005acc:	e7e1      	b.n	8005a92 <__d2b+0x62>

08005ace <_calloc_r>:
 8005ace:	b538      	push	{r3, r4, r5, lr}
 8005ad0:	fb02 f401 	mul.w	r4, r2, r1
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	f000 f855 	bl	8005b84 <_malloc_r>
 8005ada:	4605      	mov	r5, r0
 8005adc:	b118      	cbz	r0, 8005ae6 <_calloc_r+0x18>
 8005ade:	4622      	mov	r2, r4
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	f7fe fa2d 	bl	8003f40 <memset>
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
	...

08005aec <_free_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4605      	mov	r5, r0
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d043      	beq.n	8005b7c <_free_r+0x90>
 8005af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af8:	1f0c      	subs	r4, r1, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bfb8      	it	lt
 8005afe:	18e4      	addlt	r4, r4, r3
 8005b00:	f000 fa27 	bl	8005f52 <__malloc_lock>
 8005b04:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <_free_r+0x94>)
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	4610      	mov	r0, r2
 8005b0a:	b933      	cbnz	r3, 8005b1a <_free_r+0x2e>
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	6014      	str	r4, [r2, #0]
 8005b10:	4628      	mov	r0, r5
 8005b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b16:	f000 ba1d 	b.w	8005f54 <__malloc_unlock>
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	d90b      	bls.n	8005b36 <_free_r+0x4a>
 8005b1e:	6821      	ldr	r1, [r4, #0]
 8005b20:	1862      	adds	r2, r4, r1
 8005b22:	4293      	cmp	r3, r2
 8005b24:	bf01      	itttt	eq
 8005b26:	681a      	ldreq	r2, [r3, #0]
 8005b28:	685b      	ldreq	r3, [r3, #4]
 8005b2a:	1852      	addeq	r2, r2, r1
 8005b2c:	6022      	streq	r2, [r4, #0]
 8005b2e:	6063      	str	r3, [r4, #4]
 8005b30:	6004      	str	r4, [r0, #0]
 8005b32:	e7ed      	b.n	8005b10 <_free_r+0x24>
 8005b34:	4613      	mov	r3, r2
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	b10a      	cbz	r2, 8005b3e <_free_r+0x52>
 8005b3a:	42a2      	cmp	r2, r4
 8005b3c:	d9fa      	bls.n	8005b34 <_free_r+0x48>
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	1858      	adds	r0, r3, r1
 8005b42:	42a0      	cmp	r0, r4
 8005b44:	d10b      	bne.n	8005b5e <_free_r+0x72>
 8005b46:	6820      	ldr	r0, [r4, #0]
 8005b48:	4401      	add	r1, r0
 8005b4a:	1858      	adds	r0, r3, r1
 8005b4c:	4282      	cmp	r2, r0
 8005b4e:	6019      	str	r1, [r3, #0]
 8005b50:	d1de      	bne.n	8005b10 <_free_r+0x24>
 8005b52:	6810      	ldr	r0, [r2, #0]
 8005b54:	6852      	ldr	r2, [r2, #4]
 8005b56:	4401      	add	r1, r0
 8005b58:	6019      	str	r1, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	e7d8      	b.n	8005b10 <_free_r+0x24>
 8005b5e:	d902      	bls.n	8005b66 <_free_r+0x7a>
 8005b60:	230c      	movs	r3, #12
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	e7d4      	b.n	8005b10 <_free_r+0x24>
 8005b66:	6820      	ldr	r0, [r4, #0]
 8005b68:	1821      	adds	r1, r4, r0
 8005b6a:	428a      	cmp	r2, r1
 8005b6c:	bf01      	itttt	eq
 8005b6e:	6811      	ldreq	r1, [r2, #0]
 8005b70:	6852      	ldreq	r2, [r2, #4]
 8005b72:	1809      	addeq	r1, r1, r0
 8005b74:	6021      	streq	r1, [r4, #0]
 8005b76:	6062      	str	r2, [r4, #4]
 8005b78:	605c      	str	r4, [r3, #4]
 8005b7a:	e7c9      	b.n	8005b10 <_free_r+0x24>
 8005b7c:	bd38      	pop	{r3, r4, r5, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000248 	.word	0x20000248

08005b84 <_malloc_r>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	1ccd      	adds	r5, r1, #3
 8005b88:	f025 0503 	bic.w	r5, r5, #3
 8005b8c:	3508      	adds	r5, #8
 8005b8e:	2d0c      	cmp	r5, #12
 8005b90:	bf38      	it	cc
 8005b92:	250c      	movcc	r5, #12
 8005b94:	2d00      	cmp	r5, #0
 8005b96:	4606      	mov	r6, r0
 8005b98:	db01      	blt.n	8005b9e <_malloc_r+0x1a>
 8005b9a:	42a9      	cmp	r1, r5
 8005b9c:	d903      	bls.n	8005ba6 <_malloc_r+0x22>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	bd70      	pop	{r4, r5, r6, pc}
 8005ba6:	f000 f9d4 	bl	8005f52 <__malloc_lock>
 8005baa:	4a21      	ldr	r2, [pc, #132]	; (8005c30 <_malloc_r+0xac>)
 8005bac:	6814      	ldr	r4, [r2, #0]
 8005bae:	4621      	mov	r1, r4
 8005bb0:	b991      	cbnz	r1, 8005bd8 <_malloc_r+0x54>
 8005bb2:	4c20      	ldr	r4, [pc, #128]	; (8005c34 <_malloc_r+0xb0>)
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	b91b      	cbnz	r3, 8005bc0 <_malloc_r+0x3c>
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f000 f98f 	bl	8005edc <_sbrk_r>
 8005bbe:	6020      	str	r0, [r4, #0]
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f000 f98a 	bl	8005edc <_sbrk_r>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d124      	bne.n	8005c16 <_malloc_r+0x92>
 8005bcc:	230c      	movs	r3, #12
 8005bce:	4630      	mov	r0, r6
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	f000 f9bf 	bl	8005f54 <__malloc_unlock>
 8005bd6:	e7e4      	b.n	8005ba2 <_malloc_r+0x1e>
 8005bd8:	680b      	ldr	r3, [r1, #0]
 8005bda:	1b5b      	subs	r3, r3, r5
 8005bdc:	d418      	bmi.n	8005c10 <_malloc_r+0x8c>
 8005bde:	2b0b      	cmp	r3, #11
 8005be0:	d90f      	bls.n	8005c02 <_malloc_r+0x7e>
 8005be2:	600b      	str	r3, [r1, #0]
 8005be4:	18cc      	adds	r4, r1, r3
 8005be6:	50cd      	str	r5, [r1, r3]
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f9b3 	bl	8005f54 <__malloc_unlock>
 8005bee:	f104 000b 	add.w	r0, r4, #11
 8005bf2:	1d23      	adds	r3, r4, #4
 8005bf4:	f020 0007 	bic.w	r0, r0, #7
 8005bf8:	1ac3      	subs	r3, r0, r3
 8005bfa:	d0d3      	beq.n	8005ba4 <_malloc_r+0x20>
 8005bfc:	425a      	negs	r2, r3
 8005bfe:	50e2      	str	r2, [r4, r3]
 8005c00:	e7d0      	b.n	8005ba4 <_malloc_r+0x20>
 8005c02:	684b      	ldr	r3, [r1, #4]
 8005c04:	428c      	cmp	r4, r1
 8005c06:	bf16      	itet	ne
 8005c08:	6063      	strne	r3, [r4, #4]
 8005c0a:	6013      	streq	r3, [r2, #0]
 8005c0c:	460c      	movne	r4, r1
 8005c0e:	e7eb      	b.n	8005be8 <_malloc_r+0x64>
 8005c10:	460c      	mov	r4, r1
 8005c12:	6849      	ldr	r1, [r1, #4]
 8005c14:	e7cc      	b.n	8005bb0 <_malloc_r+0x2c>
 8005c16:	1cc4      	adds	r4, r0, #3
 8005c18:	f024 0403 	bic.w	r4, r4, #3
 8005c1c:	42a0      	cmp	r0, r4
 8005c1e:	d005      	beq.n	8005c2c <_malloc_r+0xa8>
 8005c20:	1a21      	subs	r1, r4, r0
 8005c22:	4630      	mov	r0, r6
 8005c24:	f000 f95a 	bl	8005edc <_sbrk_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d0cf      	beq.n	8005bcc <_malloc_r+0x48>
 8005c2c:	6025      	str	r5, [r4, #0]
 8005c2e:	e7db      	b.n	8005be8 <_malloc_r+0x64>
 8005c30:	20000248 	.word	0x20000248
 8005c34:	2000024c 	.word	0x2000024c

08005c38 <__ssputs_r>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	688e      	ldr	r6, [r1, #8]
 8005c3e:	4682      	mov	sl, r0
 8005c40:	429e      	cmp	r6, r3
 8005c42:	460c      	mov	r4, r1
 8005c44:	4690      	mov	r8, r2
 8005c46:	4699      	mov	r9, r3
 8005c48:	d837      	bhi.n	8005cba <__ssputs_r+0x82>
 8005c4a:	898a      	ldrh	r2, [r1, #12]
 8005c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c50:	d031      	beq.n	8005cb6 <__ssputs_r+0x7e>
 8005c52:	2302      	movs	r3, #2
 8005c54:	6825      	ldr	r5, [r4, #0]
 8005c56:	6909      	ldr	r1, [r1, #16]
 8005c58:	1a6f      	subs	r7, r5, r1
 8005c5a:	6965      	ldr	r5, [r4, #20]
 8005c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c60:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c64:	f109 0301 	add.w	r3, r9, #1
 8005c68:	443b      	add	r3, r7
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	bf38      	it	cc
 8005c6e:	461d      	movcc	r5, r3
 8005c70:	0553      	lsls	r3, r2, #21
 8005c72:	d530      	bpl.n	8005cd6 <__ssputs_r+0x9e>
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7ff ff85 	bl	8005b84 <_malloc_r>
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	b950      	cbnz	r0, 8005c94 <__ssputs_r+0x5c>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	f8ca 3000 	str.w	r3, [sl]
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	463a      	mov	r2, r7
 8005c96:	6921      	ldr	r1, [r4, #16]
 8005c98:	f7ff fc32 	bl	8005500 <memcpy>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	6126      	str	r6, [r4, #16]
 8005caa:	443e      	add	r6, r7
 8005cac:	6026      	str	r6, [r4, #0]
 8005cae:	464e      	mov	r6, r9
 8005cb0:	6165      	str	r5, [r4, #20]
 8005cb2:	1bed      	subs	r5, r5, r7
 8005cb4:	60a5      	str	r5, [r4, #8]
 8005cb6:	454e      	cmp	r6, r9
 8005cb8:	d900      	bls.n	8005cbc <__ssputs_r+0x84>
 8005cba:	464e      	mov	r6, r9
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	f000 f92d 	bl	8005f20 <memmove>
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	2000      	movs	r0, #0
 8005cca:	1b9b      	subs	r3, r3, r6
 8005ccc:	60a3      	str	r3, [r4, #8]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	441e      	add	r6, r3
 8005cd2:	6026      	str	r6, [r4, #0]
 8005cd4:	e7dc      	b.n	8005c90 <__ssputs_r+0x58>
 8005cd6:	462a      	mov	r2, r5
 8005cd8:	f000 f93d 	bl	8005f56 <_realloc_r>
 8005cdc:	4606      	mov	r6, r0
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d1e2      	bne.n	8005ca8 <__ssputs_r+0x70>
 8005ce2:	6921      	ldr	r1, [r4, #16]
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	f7ff ff01 	bl	8005aec <_free_r>
 8005cea:	e7c8      	b.n	8005c7e <__ssputs_r+0x46>

08005cec <_svfiprintf_r>:
 8005cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	898b      	ldrh	r3, [r1, #12]
 8005cf4:	b09d      	sub	sp, #116	; 0x74
 8005cf6:	061f      	lsls	r7, r3, #24
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	d50f      	bpl.n	8005d20 <_svfiprintf_r+0x34>
 8005d00:	690b      	ldr	r3, [r1, #16]
 8005d02:	b96b      	cbnz	r3, 8005d20 <_svfiprintf_r+0x34>
 8005d04:	2140      	movs	r1, #64	; 0x40
 8005d06:	f7ff ff3d 	bl	8005b84 <_malloc_r>
 8005d0a:	6020      	str	r0, [r4, #0]
 8005d0c:	6120      	str	r0, [r4, #16]
 8005d0e:	b928      	cbnz	r0, 8005d1c <_svfiprintf_r+0x30>
 8005d10:	230c      	movs	r3, #12
 8005d12:	f8c8 3000 	str.w	r3, [r8]
 8005d16:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1a:	e0c8      	b.n	8005eae <_svfiprintf_r+0x1c2>
 8005d1c:	2340      	movs	r3, #64	; 0x40
 8005d1e:	6163      	str	r3, [r4, #20]
 8005d20:	2300      	movs	r3, #0
 8005d22:	9309      	str	r3, [sp, #36]	; 0x24
 8005d24:	2320      	movs	r3, #32
 8005d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d2a:	2330      	movs	r3, #48	; 0x30
 8005d2c:	f04f 0b01 	mov.w	fp, #1
 8005d30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d34:	9503      	str	r5, [sp, #12]
 8005d36:	4637      	mov	r7, r6
 8005d38:	463d      	mov	r5, r7
 8005d3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d3e:	b10b      	cbz	r3, 8005d44 <_svfiprintf_r+0x58>
 8005d40:	2b25      	cmp	r3, #37	; 0x25
 8005d42:	d13e      	bne.n	8005dc2 <_svfiprintf_r+0xd6>
 8005d44:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d48:	d00b      	beq.n	8005d62 <_svfiprintf_r+0x76>
 8005d4a:	4653      	mov	r3, sl
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4640      	mov	r0, r8
 8005d52:	f7ff ff71 	bl	8005c38 <__ssputs_r>
 8005d56:	3001      	adds	r0, #1
 8005d58:	f000 80a4 	beq.w	8005ea4 <_svfiprintf_r+0x1b8>
 8005d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5e:	4453      	add	r3, sl
 8005d60:	9309      	str	r3, [sp, #36]	; 0x24
 8005d62:	783b      	ldrb	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 809d 	beq.w	8005ea4 <_svfiprintf_r+0x1b8>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d74:	9304      	str	r3, [sp, #16]
 8005d76:	9307      	str	r3, [sp, #28]
 8005d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d7e:	462f      	mov	r7, r5
 8005d80:	2205      	movs	r2, #5
 8005d82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d86:	4850      	ldr	r0, [pc, #320]	; (8005ec8 <_svfiprintf_r+0x1dc>)
 8005d88:	f7ff fbac 	bl	80054e4 <memchr>
 8005d8c:	9b04      	ldr	r3, [sp, #16]
 8005d8e:	b9d0      	cbnz	r0, 8005dc6 <_svfiprintf_r+0xda>
 8005d90:	06d9      	lsls	r1, r3, #27
 8005d92:	bf44      	itt	mi
 8005d94:	2220      	movmi	r2, #32
 8005d96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d9a:	071a      	lsls	r2, r3, #28
 8005d9c:	bf44      	itt	mi
 8005d9e:	222b      	movmi	r2, #43	; 0x2b
 8005da0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005da4:	782a      	ldrb	r2, [r5, #0]
 8005da6:	2a2a      	cmp	r2, #42	; 0x2a
 8005da8:	d015      	beq.n	8005dd6 <_svfiprintf_r+0xea>
 8005daa:	462f      	mov	r7, r5
 8005dac:	2000      	movs	r0, #0
 8005dae:	250a      	movs	r5, #10
 8005db0:	9a07      	ldr	r2, [sp, #28]
 8005db2:	4639      	mov	r1, r7
 8005db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005db8:	3b30      	subs	r3, #48	; 0x30
 8005dba:	2b09      	cmp	r3, #9
 8005dbc:	d94d      	bls.n	8005e5a <_svfiprintf_r+0x16e>
 8005dbe:	b1b8      	cbz	r0, 8005df0 <_svfiprintf_r+0x104>
 8005dc0:	e00f      	b.n	8005de2 <_svfiprintf_r+0xf6>
 8005dc2:	462f      	mov	r7, r5
 8005dc4:	e7b8      	b.n	8005d38 <_svfiprintf_r+0x4c>
 8005dc6:	4a40      	ldr	r2, [pc, #256]	; (8005ec8 <_svfiprintf_r+0x1dc>)
 8005dc8:	463d      	mov	r5, r7
 8005dca:	1a80      	subs	r0, r0, r2
 8005dcc:	fa0b f000 	lsl.w	r0, fp, r0
 8005dd0:	4318      	orrs	r0, r3
 8005dd2:	9004      	str	r0, [sp, #16]
 8005dd4:	e7d3      	b.n	8005d7e <_svfiprintf_r+0x92>
 8005dd6:	9a03      	ldr	r2, [sp, #12]
 8005dd8:	1d11      	adds	r1, r2, #4
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	9103      	str	r1, [sp, #12]
 8005dde:	2a00      	cmp	r2, #0
 8005de0:	db01      	blt.n	8005de6 <_svfiprintf_r+0xfa>
 8005de2:	9207      	str	r2, [sp, #28]
 8005de4:	e004      	b.n	8005df0 <_svfiprintf_r+0x104>
 8005de6:	4252      	negs	r2, r2
 8005de8:	f043 0302 	orr.w	r3, r3, #2
 8005dec:	9207      	str	r2, [sp, #28]
 8005dee:	9304      	str	r3, [sp, #16]
 8005df0:	783b      	ldrb	r3, [r7, #0]
 8005df2:	2b2e      	cmp	r3, #46	; 0x2e
 8005df4:	d10c      	bne.n	8005e10 <_svfiprintf_r+0x124>
 8005df6:	787b      	ldrb	r3, [r7, #1]
 8005df8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfa:	d133      	bne.n	8005e64 <_svfiprintf_r+0x178>
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	3702      	adds	r7, #2
 8005e00:	1d1a      	adds	r2, r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	9203      	str	r2, [sp, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bfb8      	it	lt
 8005e0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e0e:	9305      	str	r3, [sp, #20]
 8005e10:	4d2e      	ldr	r5, [pc, #184]	; (8005ecc <_svfiprintf_r+0x1e0>)
 8005e12:	2203      	movs	r2, #3
 8005e14:	7839      	ldrb	r1, [r7, #0]
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7ff fb64 	bl	80054e4 <memchr>
 8005e1c:	b138      	cbz	r0, 8005e2e <_svfiprintf_r+0x142>
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	1b40      	subs	r0, r0, r5
 8005e22:	fa03 f000 	lsl.w	r0, r3, r0
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	3701      	adds	r7, #1
 8005e2a:	4303      	orrs	r3, r0
 8005e2c:	9304      	str	r3, [sp, #16]
 8005e2e:	7839      	ldrb	r1, [r7, #0]
 8005e30:	2206      	movs	r2, #6
 8005e32:	4827      	ldr	r0, [pc, #156]	; (8005ed0 <_svfiprintf_r+0x1e4>)
 8005e34:	1c7e      	adds	r6, r7, #1
 8005e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e3a:	f7ff fb53 	bl	80054e4 <memchr>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d038      	beq.n	8005eb4 <_svfiprintf_r+0x1c8>
 8005e42:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <_svfiprintf_r+0x1e8>)
 8005e44:	bb13      	cbnz	r3, 8005e8c <_svfiprintf_r+0x1a0>
 8005e46:	9b03      	ldr	r3, [sp, #12]
 8005e48:	3307      	adds	r3, #7
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	3308      	adds	r3, #8
 8005e50:	9303      	str	r3, [sp, #12]
 8005e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e54:	444b      	add	r3, r9
 8005e56:	9309      	str	r3, [sp, #36]	; 0x24
 8005e58:	e76d      	b.n	8005d36 <_svfiprintf_r+0x4a>
 8005e5a:	fb05 3202 	mla	r2, r5, r2, r3
 8005e5e:	2001      	movs	r0, #1
 8005e60:	460f      	mov	r7, r1
 8005e62:	e7a6      	b.n	8005db2 <_svfiprintf_r+0xc6>
 8005e64:	2300      	movs	r3, #0
 8005e66:	250a      	movs	r5, #10
 8005e68:	4619      	mov	r1, r3
 8005e6a:	3701      	adds	r7, #1
 8005e6c:	9305      	str	r3, [sp, #20]
 8005e6e:	4638      	mov	r0, r7
 8005e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e74:	3a30      	subs	r2, #48	; 0x30
 8005e76:	2a09      	cmp	r2, #9
 8005e78:	d903      	bls.n	8005e82 <_svfiprintf_r+0x196>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0c8      	beq.n	8005e10 <_svfiprintf_r+0x124>
 8005e7e:	9105      	str	r1, [sp, #20]
 8005e80:	e7c6      	b.n	8005e10 <_svfiprintf_r+0x124>
 8005e82:	fb05 2101 	mla	r1, r5, r1, r2
 8005e86:	2301      	movs	r3, #1
 8005e88:	4607      	mov	r7, r0
 8005e8a:	e7f0      	b.n	8005e6e <_svfiprintf_r+0x182>
 8005e8c:	ab03      	add	r3, sp, #12
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	4622      	mov	r2, r4
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <_svfiprintf_r+0x1ec>)
 8005e94:	a904      	add	r1, sp, #16
 8005e96:	4640      	mov	r0, r8
 8005e98:	f7fe f8ec 	bl	8004074 <_printf_float>
 8005e9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ea0:	4681      	mov	r9, r0
 8005ea2:	d1d6      	bne.n	8005e52 <_svfiprintf_r+0x166>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	065b      	lsls	r3, r3, #25
 8005ea8:	f53f af35 	bmi.w	8005d16 <_svfiprintf_r+0x2a>
 8005eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eae:	b01d      	add	sp, #116	; 0x74
 8005eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb4:	ab03      	add	r3, sp, #12
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	4622      	mov	r2, r4
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <_svfiprintf_r+0x1ec>)
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7fe fb84 	bl	80045cc <_printf_i>
 8005ec4:	e7ea      	b.n	8005e9c <_svfiprintf_r+0x1b0>
 8005ec6:	bf00      	nop
 8005ec8:	080071cc 	.word	0x080071cc
 8005ecc:	080071d2 	.word	0x080071d2
 8005ed0:	080071d6 	.word	0x080071d6
 8005ed4:	08004075 	.word	0x08004075
 8005ed8:	08005c39 	.word	0x08005c39

08005edc <_sbrk_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4c05      	ldr	r4, [pc, #20]	; (8005ef8 <_sbrk_r+0x1c>)
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	f7fb ff1a 	bl	8001d20 <_sbrk>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_sbrk_r+0x1a>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_sbrk_r+0x1a>
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	200002e8 	.word	0x200002e8

08005efc <__ascii_mbtowc>:
 8005efc:	b082      	sub	sp, #8
 8005efe:	b901      	cbnz	r1, 8005f02 <__ascii_mbtowc+0x6>
 8005f00:	a901      	add	r1, sp, #4
 8005f02:	b142      	cbz	r2, 8005f16 <__ascii_mbtowc+0x1a>
 8005f04:	b14b      	cbz	r3, 8005f1a <__ascii_mbtowc+0x1e>
 8005f06:	7813      	ldrb	r3, [r2, #0]
 8005f08:	600b      	str	r3, [r1, #0]
 8005f0a:	7812      	ldrb	r2, [r2, #0]
 8005f0c:	1c10      	adds	r0, r2, #0
 8005f0e:	bf18      	it	ne
 8005f10:	2001      	movne	r0, #1
 8005f12:	b002      	add	sp, #8
 8005f14:	4770      	bx	lr
 8005f16:	4610      	mov	r0, r2
 8005f18:	e7fb      	b.n	8005f12 <__ascii_mbtowc+0x16>
 8005f1a:	f06f 0001 	mvn.w	r0, #1
 8005f1e:	e7f8      	b.n	8005f12 <__ascii_mbtowc+0x16>

08005f20 <memmove>:
 8005f20:	4288      	cmp	r0, r1
 8005f22:	b510      	push	{r4, lr}
 8005f24:	eb01 0302 	add.w	r3, r1, r2
 8005f28:	d807      	bhi.n	8005f3a <memmove+0x1a>
 8005f2a:	1e42      	subs	r2, r0, #1
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d00a      	beq.n	8005f46 <memmove+0x26>
 8005f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f38:	e7f8      	b.n	8005f2c <memmove+0xc>
 8005f3a:	4283      	cmp	r3, r0
 8005f3c:	d9f5      	bls.n	8005f2a <memmove+0xa>
 8005f3e:	1881      	adds	r1, r0, r2
 8005f40:	1ad2      	subs	r2, r2, r3
 8005f42:	42d3      	cmn	r3, r2
 8005f44:	d100      	bne.n	8005f48 <memmove+0x28>
 8005f46:	bd10      	pop	{r4, pc}
 8005f48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f50:	e7f7      	b.n	8005f42 <memmove+0x22>

08005f52 <__malloc_lock>:
 8005f52:	4770      	bx	lr

08005f54 <__malloc_unlock>:
 8005f54:	4770      	bx	lr

08005f56 <_realloc_r>:
 8005f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f58:	4607      	mov	r7, r0
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	460e      	mov	r6, r1
 8005f5e:	b921      	cbnz	r1, 8005f6a <_realloc_r+0x14>
 8005f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f64:	4611      	mov	r1, r2
 8005f66:	f7ff be0d 	b.w	8005b84 <_malloc_r>
 8005f6a:	b922      	cbnz	r2, 8005f76 <_realloc_r+0x20>
 8005f6c:	f7ff fdbe 	bl	8005aec <_free_r>
 8005f70:	4625      	mov	r5, r4
 8005f72:	4628      	mov	r0, r5
 8005f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f76:	f000 f821 	bl	8005fbc <_malloc_usable_size_r>
 8005f7a:	42a0      	cmp	r0, r4
 8005f7c:	d20f      	bcs.n	8005f9e <_realloc_r+0x48>
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4638      	mov	r0, r7
 8005f82:	f7ff fdff 	bl	8005b84 <_malloc_r>
 8005f86:	4605      	mov	r5, r0
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d0f2      	beq.n	8005f72 <_realloc_r+0x1c>
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4622      	mov	r2, r4
 8005f90:	f7ff fab6 	bl	8005500 <memcpy>
 8005f94:	4631      	mov	r1, r6
 8005f96:	4638      	mov	r0, r7
 8005f98:	f7ff fda8 	bl	8005aec <_free_r>
 8005f9c:	e7e9      	b.n	8005f72 <_realloc_r+0x1c>
 8005f9e:	4635      	mov	r5, r6
 8005fa0:	e7e7      	b.n	8005f72 <_realloc_r+0x1c>

08005fa2 <__ascii_wctomb>:
 8005fa2:	b149      	cbz	r1, 8005fb8 <__ascii_wctomb+0x16>
 8005fa4:	2aff      	cmp	r2, #255	; 0xff
 8005fa6:	bf8b      	itete	hi
 8005fa8:	238a      	movhi	r3, #138	; 0x8a
 8005faa:	700a      	strbls	r2, [r1, #0]
 8005fac:	6003      	strhi	r3, [r0, #0]
 8005fae:	2001      	movls	r0, #1
 8005fb0:	bf88      	it	hi
 8005fb2:	f04f 30ff 	movhi.w	r0, #4294967295
 8005fb6:	4770      	bx	lr
 8005fb8:	4608      	mov	r0, r1
 8005fba:	4770      	bx	lr

08005fbc <_malloc_usable_size_r>:
 8005fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc0:	1f18      	subs	r0, r3, #4
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bfbc      	itt	lt
 8005fc6:	580b      	ldrlt	r3, [r1, r0]
 8005fc8:	18c0      	addlt	r0, r0, r3
 8005fca:	4770      	bx	lr

08005fcc <pow>:
 8005fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	b08f      	sub	sp, #60	; 0x3c
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	f000 f955 	bl	8006288 <__ieee754_pow>
 8005fde:	4fa1      	ldr	r7, [pc, #644]	; (8006264 <pow+0x298>)
 8005fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8005fe4:	f997 3000 	ldrsb.w	r3, [r7]
 8005fe8:	463e      	mov	r6, r7
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	3301      	adds	r3, #1
 8005fee:	d05f      	beq.n	80060b0 <pow+0xe4>
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	f7fa fd08 	bl	8000a0c <__aeabi_dcmpun>
 8005ffc:	4682      	mov	sl, r0
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d156      	bne.n	80060b0 <pow+0xe4>
 8006002:	4642      	mov	r2, r8
 8006004:	464b      	mov	r3, r9
 8006006:	4640      	mov	r0, r8
 8006008:	4649      	mov	r1, r9
 800600a:	f7fa fcff 	bl	8000a0c <__aeabi_dcmpun>
 800600e:	9003      	str	r0, [sp, #12]
 8006010:	b1e8      	cbz	r0, 800604e <pow+0x82>
 8006012:	2200      	movs	r2, #0
 8006014:	2300      	movs	r3, #0
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fcc5 	bl	80009a8 <__aeabi_dcmpeq>
 800601e:	2800      	cmp	r0, #0
 8006020:	d046      	beq.n	80060b0 <pow+0xe4>
 8006022:	2301      	movs	r3, #1
 8006024:	2200      	movs	r2, #0
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	4b8f      	ldr	r3, [pc, #572]	; (8006268 <pow+0x29c>)
 800602a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800602e:	9305      	str	r3, [sp, #20]
 8006030:	4b8e      	ldr	r3, [pc, #568]	; (800626c <pow+0x2a0>)
 8006032:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006036:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800603a:	9b02      	ldr	r3, [sp, #8]
 800603c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d031      	beq.n	80060a8 <pow+0xdc>
 8006044:	a804      	add	r0, sp, #16
 8006046:	f000 fedf 	bl	8006e08 <matherr>
 800604a:	bb38      	cbnz	r0, 800609c <pow+0xd0>
 800604c:	e058      	b.n	8006100 <pow+0x134>
 800604e:	f04f 0a00 	mov.w	sl, #0
 8006052:	f04f 0b00 	mov.w	fp, #0
 8006056:	4652      	mov	r2, sl
 8006058:	465b      	mov	r3, fp
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f7fa fca3 	bl	80009a8 <__aeabi_dcmpeq>
 8006062:	2800      	cmp	r0, #0
 8006064:	d051      	beq.n	800610a <pow+0x13e>
 8006066:	4652      	mov	r2, sl
 8006068:	465b      	mov	r3, fp
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f7fa fc9b 	bl	80009a8 <__aeabi_dcmpeq>
 8006072:	4606      	mov	r6, r0
 8006074:	b308      	cbz	r0, 80060ba <pow+0xee>
 8006076:	2301      	movs	r3, #1
 8006078:	9304      	str	r3, [sp, #16]
 800607a:	4b7b      	ldr	r3, [pc, #492]	; (8006268 <pow+0x29c>)
 800607c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006080:	9305      	str	r3, [sp, #20]
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006088:	930c      	str	r3, [sp, #48]	; 0x30
 800608a:	9b02      	ldr	r3, [sp, #8]
 800608c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0d7      	beq.n	8006044 <pow+0x78>
 8006094:	2200      	movs	r2, #0
 8006096:	4b75      	ldr	r3, [pc, #468]	; (800626c <pow+0x2a0>)
 8006098:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800609c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800609e:	b11b      	cbz	r3, 80060a8 <pow+0xdc>
 80060a0:	f7fd ff24 	bl	8003eec <__errno>
 80060a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060a6:	6003      	str	r3, [r0, #0]
 80060a8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80060ac:	e9cd 3400 	strd	r3, r4, [sp]
 80060b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060b4:	b00f      	add	sp, #60	; 0x3c
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	4620      	mov	r0, r4
 80060bc:	4629      	mov	r1, r5
 80060be:	f000 fe9d 	bl	8006dfc <finite>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d0f4      	beq.n	80060b0 <pow+0xe4>
 80060c6:	4652      	mov	r2, sl
 80060c8:	465b      	mov	r3, fp
 80060ca:	4620      	mov	r0, r4
 80060cc:	4629      	mov	r1, r5
 80060ce:	f7fa fc75 	bl	80009bc <__aeabi_dcmplt>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0ec      	beq.n	80060b0 <pow+0xe4>
 80060d6:	2301      	movs	r3, #1
 80060d8:	9304      	str	r3, [sp, #16]
 80060da:	4b63      	ldr	r3, [pc, #396]	; (8006268 <pow+0x29c>)
 80060dc:	960c      	str	r6, [sp, #48]	; 0x30
 80060de:	9305      	str	r3, [sp, #20]
 80060e0:	f997 3000 	ldrsb.w	r3, [r7]
 80060e4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80060e8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80060ec:	b913      	cbnz	r3, 80060f4 <pow+0x128>
 80060ee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80060f2:	e7a7      	b.n	8006044 <pow+0x78>
 80060f4:	2000      	movs	r0, #0
 80060f6:	495e      	ldr	r1, [pc, #376]	; (8006270 <pow+0x2a4>)
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80060fe:	d1a1      	bne.n	8006044 <pow+0x78>
 8006100:	f7fd fef4 	bl	8003eec <__errno>
 8006104:	2321      	movs	r3, #33	; 0x21
 8006106:	6003      	str	r3, [r0, #0]
 8006108:	e7c8      	b.n	800609c <pow+0xd0>
 800610a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800610e:	f000 fe75 	bl	8006dfc <finite>
 8006112:	9002      	str	r0, [sp, #8]
 8006114:	2800      	cmp	r0, #0
 8006116:	d177      	bne.n	8006208 <pow+0x23c>
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f000 fe6e 	bl	8006dfc <finite>
 8006120:	2800      	cmp	r0, #0
 8006122:	d071      	beq.n	8006208 <pow+0x23c>
 8006124:	4620      	mov	r0, r4
 8006126:	4629      	mov	r1, r5
 8006128:	f000 fe68 	bl	8006dfc <finite>
 800612c:	2800      	cmp	r0, #0
 800612e:	d06b      	beq.n	8006208 <pow+0x23c>
 8006130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f7fa fc68 	bl	8000a0c <__aeabi_dcmpun>
 800613c:	f997 7000 	ldrsb.w	r7, [r7]
 8006140:	4b49      	ldr	r3, [pc, #292]	; (8006268 <pow+0x29c>)
 8006142:	b1a0      	cbz	r0, 800616e <pow+0x1a2>
 8006144:	2201      	movs	r2, #1
 8006146:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800614a:	9b02      	ldr	r3, [sp, #8]
 800614c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006150:	930c      	str	r3, [sp, #48]	; 0x30
 8006152:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006156:	2f00      	cmp	r7, #0
 8006158:	d0c9      	beq.n	80060ee <pow+0x122>
 800615a:	4652      	mov	r2, sl
 800615c:	465b      	mov	r3, fp
 800615e:	4650      	mov	r0, sl
 8006160:	4659      	mov	r1, fp
 8006162:	f7fa fae3 	bl	800072c <__aeabi_ddiv>
 8006166:	2f02      	cmp	r7, #2
 8006168:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800616c:	e7c7      	b.n	80060fe <pow+0x132>
 800616e:	2203      	movs	r2, #3
 8006170:	900c      	str	r0, [sp, #48]	; 0x30
 8006172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	2200      	movs	r2, #0
 800617c:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <pow+0x2a8>)
 800617e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006182:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006186:	f7fa f9a7 	bl	80004d8 <__aeabi_dmul>
 800618a:	4604      	mov	r4, r0
 800618c:	460d      	mov	r5, r1
 800618e:	bb17      	cbnz	r7, 80061d6 <pow+0x20a>
 8006190:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006194:	4b38      	ldr	r3, [pc, #224]	; (8006278 <pow+0x2ac>)
 8006196:	4640      	mov	r0, r8
 8006198:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800619c:	4649      	mov	r1, r9
 800619e:	4652      	mov	r2, sl
 80061a0:	465b      	mov	r3, fp
 80061a2:	f7fa fc0b 	bl	80009bc <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d054      	beq.n	8006254 <pow+0x288>
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f000 fe33 	bl	8006e18 <rint>
 80061b2:	4622      	mov	r2, r4
 80061b4:	462b      	mov	r3, r5
 80061b6:	f7fa fbf7 	bl	80009a8 <__aeabi_dcmpeq>
 80061ba:	b920      	cbnz	r0, 80061c6 <pow+0x1fa>
 80061bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80061c0:	4b2e      	ldr	r3, [pc, #184]	; (800627c <pow+0x2b0>)
 80061c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80061c6:	f996 3000 	ldrsb.w	r3, [r6]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d142      	bne.n	8006254 <pow+0x288>
 80061ce:	f7fd fe8d 	bl	8003eec <__errno>
 80061d2:	2322      	movs	r3, #34	; 0x22
 80061d4:	e797      	b.n	8006106 <pow+0x13a>
 80061d6:	2200      	movs	r2, #0
 80061d8:	4b29      	ldr	r3, [pc, #164]	; (8006280 <pow+0x2b4>)
 80061da:	4640      	mov	r0, r8
 80061dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80061e0:	4649      	mov	r1, r9
 80061e2:	4652      	mov	r2, sl
 80061e4:	465b      	mov	r3, fp
 80061e6:	f7fa fbe9 	bl	80009bc <__aeabi_dcmplt>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d0eb      	beq.n	80061c6 <pow+0x1fa>
 80061ee:	4620      	mov	r0, r4
 80061f0:	4629      	mov	r1, r5
 80061f2:	f000 fe11 	bl	8006e18 <rint>
 80061f6:	4622      	mov	r2, r4
 80061f8:	462b      	mov	r3, r5
 80061fa:	f7fa fbd5 	bl	80009a8 <__aeabi_dcmpeq>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d1e1      	bne.n	80061c6 <pow+0x1fa>
 8006202:	2200      	movs	r2, #0
 8006204:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <pow+0x2a4>)
 8006206:	e7dc      	b.n	80061c2 <pow+0x1f6>
 8006208:	2200      	movs	r2, #0
 800620a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800620e:	2300      	movs	r3, #0
 8006210:	f7fa fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8006214:	2800      	cmp	r0, #0
 8006216:	f43f af4b 	beq.w	80060b0 <pow+0xe4>
 800621a:	4640      	mov	r0, r8
 800621c:	4649      	mov	r1, r9
 800621e:	f000 fded 	bl	8006dfc <finite>
 8006222:	2800      	cmp	r0, #0
 8006224:	f43f af44 	beq.w	80060b0 <pow+0xe4>
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f000 fde6 	bl	8006dfc <finite>
 8006230:	2800      	cmp	r0, #0
 8006232:	f43f af3d 	beq.w	80060b0 <pow+0xe4>
 8006236:	2304      	movs	r3, #4
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <pow+0x29c>)
 800623c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	2300      	movs	r3, #0
 8006244:	2400      	movs	r4, #0
 8006246:	930c      	str	r3, [sp, #48]	; 0x30
 8006248:	2300      	movs	r3, #0
 800624a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800624e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006252:	e7b8      	b.n	80061c6 <pow+0x1fa>
 8006254:	a804      	add	r0, sp, #16
 8006256:	f000 fdd7 	bl	8006e08 <matherr>
 800625a:	2800      	cmp	r0, #0
 800625c:	f47f af1e 	bne.w	800609c <pow+0xd0>
 8006260:	e7b5      	b.n	80061ce <pow+0x202>
 8006262:	bf00      	nop
 8006264:	200001dc 	.word	0x200001dc
 8006268:	080072e8 	.word	0x080072e8
 800626c:	3ff00000 	.word	0x3ff00000
 8006270:	fff00000 	.word	0xfff00000
 8006274:	3fe00000 	.word	0x3fe00000
 8006278:	47efffff 	.word	0x47efffff
 800627c:	c7efffff 	.word	0xc7efffff
 8006280:	7ff00000 	.word	0x7ff00000
 8006284:	00000000 	.word	0x00000000

08006288 <__ieee754_pow>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	b091      	sub	sp, #68	; 0x44
 800628e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006292:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8006296:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800629a:	ea55 0302 	orrs.w	r3, r5, r2
 800629e:	4607      	mov	r7, r0
 80062a0:	4688      	mov	r8, r1
 80062a2:	f000 84b7 	beq.w	8006c14 <__ieee754_pow+0x98c>
 80062a6:	4b80      	ldr	r3, [pc, #512]	; (80064a8 <__ieee754_pow+0x220>)
 80062a8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80062ac:	429c      	cmp	r4, r3
 80062ae:	4689      	mov	r9, r1
 80062b0:	4682      	mov	sl, r0
 80062b2:	dc09      	bgt.n	80062c8 <__ieee754_pow+0x40>
 80062b4:	d103      	bne.n	80062be <__ieee754_pow+0x36>
 80062b6:	b938      	cbnz	r0, 80062c8 <__ieee754_pow+0x40>
 80062b8:	42a5      	cmp	r5, r4
 80062ba:	dc0d      	bgt.n	80062d8 <__ieee754_pow+0x50>
 80062bc:	e001      	b.n	80062c2 <__ieee754_pow+0x3a>
 80062be:	429d      	cmp	r5, r3
 80062c0:	dc02      	bgt.n	80062c8 <__ieee754_pow+0x40>
 80062c2:	429d      	cmp	r5, r3
 80062c4:	d10e      	bne.n	80062e4 <__ieee754_pow+0x5c>
 80062c6:	b16a      	cbz	r2, 80062e4 <__ieee754_pow+0x5c>
 80062c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80062cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80062d0:	ea54 030a 	orrs.w	r3, r4, sl
 80062d4:	f000 849e 	beq.w	8006c14 <__ieee754_pow+0x98c>
 80062d8:	4874      	ldr	r0, [pc, #464]	; (80064ac <__ieee754_pow+0x224>)
 80062da:	b011      	add	sp, #68	; 0x44
 80062dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	f000 bd94 	b.w	8006e0c <nan>
 80062e4:	f1b9 0f00 	cmp.w	r9, #0
 80062e8:	da53      	bge.n	8006392 <__ieee754_pow+0x10a>
 80062ea:	4b71      	ldr	r3, [pc, #452]	; (80064b0 <__ieee754_pow+0x228>)
 80062ec:	429d      	cmp	r5, r3
 80062ee:	dc4e      	bgt.n	800638e <__ieee754_pow+0x106>
 80062f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80062f4:	429d      	cmp	r5, r3
 80062f6:	dd4c      	ble.n	8006392 <__ieee754_pow+0x10a>
 80062f8:	152b      	asrs	r3, r5, #20
 80062fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80062fe:	2b14      	cmp	r3, #20
 8006300:	dd28      	ble.n	8006354 <__ieee754_pow+0xcc>
 8006302:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006306:	fa22 f103 	lsr.w	r1, r2, r3
 800630a:	fa01 f303 	lsl.w	r3, r1, r3
 800630e:	4293      	cmp	r3, r2
 8006310:	d13f      	bne.n	8006392 <__ieee754_pow+0x10a>
 8006312:	f001 0101 	and.w	r1, r1, #1
 8006316:	f1c1 0302 	rsb	r3, r1, #2
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	2a00      	cmp	r2, #0
 800631e:	d15c      	bne.n	80063da <__ieee754_pow+0x152>
 8006320:	4b61      	ldr	r3, [pc, #388]	; (80064a8 <__ieee754_pow+0x220>)
 8006322:	429d      	cmp	r5, r3
 8006324:	d126      	bne.n	8006374 <__ieee754_pow+0xec>
 8006326:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800632a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800632e:	ea53 030a 	orrs.w	r3, r3, sl
 8006332:	f000 846f 	beq.w	8006c14 <__ieee754_pow+0x98c>
 8006336:	4b5f      	ldr	r3, [pc, #380]	; (80064b4 <__ieee754_pow+0x22c>)
 8006338:	429c      	cmp	r4, r3
 800633a:	dd2c      	ble.n	8006396 <__ieee754_pow+0x10e>
 800633c:	2e00      	cmp	r6, #0
 800633e:	f280 846f 	bge.w	8006c20 <__ieee754_pow+0x998>
 8006342:	f04f 0b00 	mov.w	fp, #0
 8006346:	f04f 0c00 	mov.w	ip, #0
 800634a:	4658      	mov	r0, fp
 800634c:	4661      	mov	r1, ip
 800634e:	b011      	add	sp, #68	; 0x44
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	2a00      	cmp	r2, #0
 8006356:	d13e      	bne.n	80063d6 <__ieee754_pow+0x14e>
 8006358:	f1c3 0314 	rsb	r3, r3, #20
 800635c:	fa45 f103 	asr.w	r1, r5, r3
 8006360:	fa01 f303 	lsl.w	r3, r1, r3
 8006364:	42ab      	cmp	r3, r5
 8006366:	f040 8463 	bne.w	8006c30 <__ieee754_pow+0x9a8>
 800636a:	f001 0101 	and.w	r1, r1, #1
 800636e:	f1c1 0302 	rsb	r3, r1, #2
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <__ieee754_pow+0x230>)
 8006376:	429d      	cmp	r5, r3
 8006378:	d114      	bne.n	80063a4 <__ieee754_pow+0x11c>
 800637a:	2e00      	cmp	r6, #0
 800637c:	f280 8454 	bge.w	8006c28 <__ieee754_pow+0x9a0>
 8006380:	463a      	mov	r2, r7
 8006382:	4643      	mov	r3, r8
 8006384:	2000      	movs	r0, #0
 8006386:	494c      	ldr	r1, [pc, #304]	; (80064b8 <__ieee754_pow+0x230>)
 8006388:	f7fa f9d0 	bl	800072c <__aeabi_ddiv>
 800638c:	e013      	b.n	80063b6 <__ieee754_pow+0x12e>
 800638e:	2302      	movs	r3, #2
 8006390:	e7c3      	b.n	800631a <__ieee754_pow+0x92>
 8006392:	2300      	movs	r3, #0
 8006394:	e7c1      	b.n	800631a <__ieee754_pow+0x92>
 8006396:	2e00      	cmp	r6, #0
 8006398:	dad3      	bge.n	8006342 <__ieee754_pow+0xba>
 800639a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800639e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80063a2:	e7d2      	b.n	800634a <__ieee754_pow+0xc2>
 80063a4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80063a8:	d108      	bne.n	80063bc <__ieee754_pow+0x134>
 80063aa:	463a      	mov	r2, r7
 80063ac:	4643      	mov	r3, r8
 80063ae:	4638      	mov	r0, r7
 80063b0:	4641      	mov	r1, r8
 80063b2:	f7fa f891 	bl	80004d8 <__aeabi_dmul>
 80063b6:	4683      	mov	fp, r0
 80063b8:	468c      	mov	ip, r1
 80063ba:	e7c6      	b.n	800634a <__ieee754_pow+0xc2>
 80063bc:	4b3f      	ldr	r3, [pc, #252]	; (80064bc <__ieee754_pow+0x234>)
 80063be:	429e      	cmp	r6, r3
 80063c0:	d10b      	bne.n	80063da <__ieee754_pow+0x152>
 80063c2:	f1b9 0f00 	cmp.w	r9, #0
 80063c6:	db08      	blt.n	80063da <__ieee754_pow+0x152>
 80063c8:	4638      	mov	r0, r7
 80063ca:	4641      	mov	r1, r8
 80063cc:	b011      	add	sp, #68	; 0x44
 80063ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d2:	f000 bc63 	b.w	8006c9c <__ieee754_sqrt>
 80063d6:	2300      	movs	r3, #0
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	4638      	mov	r0, r7
 80063dc:	4641      	mov	r1, r8
 80063de:	f000 fd09 	bl	8006df4 <fabs>
 80063e2:	4683      	mov	fp, r0
 80063e4:	468c      	mov	ip, r1
 80063e6:	f1ba 0f00 	cmp.w	sl, #0
 80063ea:	d12b      	bne.n	8006444 <__ieee754_pow+0x1bc>
 80063ec:	b124      	cbz	r4, 80063f8 <__ieee754_pow+0x170>
 80063ee:	4b32      	ldr	r3, [pc, #200]	; (80064b8 <__ieee754_pow+0x230>)
 80063f0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d125      	bne.n	8006444 <__ieee754_pow+0x1bc>
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	da07      	bge.n	800640c <__ieee754_pow+0x184>
 80063fc:	465a      	mov	r2, fp
 80063fe:	4663      	mov	r3, ip
 8006400:	2000      	movs	r0, #0
 8006402:	492d      	ldr	r1, [pc, #180]	; (80064b8 <__ieee754_pow+0x230>)
 8006404:	f7fa f992 	bl	800072c <__aeabi_ddiv>
 8006408:	4683      	mov	fp, r0
 800640a:	468c      	mov	ip, r1
 800640c:	f1b9 0f00 	cmp.w	r9, #0
 8006410:	da9b      	bge.n	800634a <__ieee754_pow+0xc2>
 8006412:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006416:	9b00      	ldr	r3, [sp, #0]
 8006418:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800641c:	4323      	orrs	r3, r4
 800641e:	d108      	bne.n	8006432 <__ieee754_pow+0x1aa>
 8006420:	465a      	mov	r2, fp
 8006422:	4663      	mov	r3, ip
 8006424:	4658      	mov	r0, fp
 8006426:	4661      	mov	r1, ip
 8006428:	f7f9 fe9e 	bl	8000168 <__aeabi_dsub>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	e7aa      	b.n	8006388 <__ieee754_pow+0x100>
 8006432:	9b00      	ldr	r3, [sp, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d188      	bne.n	800634a <__ieee754_pow+0xc2>
 8006438:	4658      	mov	r0, fp
 800643a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800643e:	4683      	mov	fp, r0
 8006440:	469c      	mov	ip, r3
 8006442:	e782      	b.n	800634a <__ieee754_pow+0xc2>
 8006444:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006448:	f109 33ff 	add.w	r3, r9, #4294967295
 800644c:	930d      	str	r3, [sp, #52]	; 0x34
 800644e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006450:	9b00      	ldr	r3, [sp, #0]
 8006452:	4313      	orrs	r3, r2
 8006454:	d104      	bne.n	8006460 <__ieee754_pow+0x1d8>
 8006456:	463a      	mov	r2, r7
 8006458:	4643      	mov	r3, r8
 800645a:	4638      	mov	r0, r7
 800645c:	4641      	mov	r1, r8
 800645e:	e7e3      	b.n	8006428 <__ieee754_pow+0x1a0>
 8006460:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <__ieee754_pow+0x238>)
 8006462:	429d      	cmp	r5, r3
 8006464:	f340 80fe 	ble.w	8006664 <__ieee754_pow+0x3dc>
 8006468:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800646c:	429d      	cmp	r5, r3
 800646e:	dd0b      	ble.n	8006488 <__ieee754_pow+0x200>
 8006470:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <__ieee754_pow+0x22c>)
 8006472:	429c      	cmp	r4, r3
 8006474:	dc0e      	bgt.n	8006494 <__ieee754_pow+0x20c>
 8006476:	2e00      	cmp	r6, #0
 8006478:	f6bf af63 	bge.w	8006342 <__ieee754_pow+0xba>
 800647c:	a308      	add	r3, pc, #32	; (adr r3, 80064a0 <__ieee754_pow+0x218>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	4610      	mov	r0, r2
 8006484:	4619      	mov	r1, r3
 8006486:	e794      	b.n	80063b2 <__ieee754_pow+0x12a>
 8006488:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <__ieee754_pow+0x23c>)
 800648a:	429c      	cmp	r4, r3
 800648c:	ddf3      	ble.n	8006476 <__ieee754_pow+0x1ee>
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <__ieee754_pow+0x230>)
 8006490:	429c      	cmp	r4, r3
 8006492:	dd19      	ble.n	80064c8 <__ieee754_pow+0x240>
 8006494:	2e00      	cmp	r6, #0
 8006496:	dcf1      	bgt.n	800647c <__ieee754_pow+0x1f4>
 8006498:	e753      	b.n	8006342 <__ieee754_pow+0xba>
 800649a:	bf00      	nop
 800649c:	f3af 8000 	nop.w
 80064a0:	8800759c 	.word	0x8800759c
 80064a4:	7e37e43c 	.word	0x7e37e43c
 80064a8:	7ff00000 	.word	0x7ff00000
 80064ac:	080071d1 	.word	0x080071d1
 80064b0:	433fffff 	.word	0x433fffff
 80064b4:	3fefffff 	.word	0x3fefffff
 80064b8:	3ff00000 	.word	0x3ff00000
 80064bc:	3fe00000 	.word	0x3fe00000
 80064c0:	41e00000 	.word	0x41e00000
 80064c4:	3feffffe 	.word	0x3feffffe
 80064c8:	4661      	mov	r1, ip
 80064ca:	2200      	movs	r2, #0
 80064cc:	4b60      	ldr	r3, [pc, #384]	; (8006650 <__ieee754_pow+0x3c8>)
 80064ce:	4658      	mov	r0, fp
 80064d0:	f7f9 fe4a 	bl	8000168 <__aeabi_dsub>
 80064d4:	a354      	add	r3, pc, #336	; (adr r3, 8006628 <__ieee754_pow+0x3a0>)
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	4604      	mov	r4, r0
 80064dc:	460d      	mov	r5, r1
 80064de:	f7f9 fffb 	bl	80004d8 <__aeabi_dmul>
 80064e2:	a353      	add	r3, pc, #332	; (adr r3, 8006630 <__ieee754_pow+0x3a8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	4606      	mov	r6, r0
 80064ea:	460f      	mov	r7, r1
 80064ec:	4620      	mov	r0, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	f7f9 fff2 	bl	80004d8 <__aeabi_dmul>
 80064f4:	2200      	movs	r2, #0
 80064f6:	4682      	mov	sl, r0
 80064f8:	468b      	mov	fp, r1
 80064fa:	4b56      	ldr	r3, [pc, #344]	; (8006654 <__ieee754_pow+0x3cc>)
 80064fc:	4620      	mov	r0, r4
 80064fe:	4629      	mov	r1, r5
 8006500:	f7f9 ffea 	bl	80004d8 <__aeabi_dmul>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	a14b      	add	r1, pc, #300	; (adr r1, 8006638 <__ieee754_pow+0x3b0>)
 800650a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800650e:	f7f9 fe2b 	bl	8000168 <__aeabi_dsub>
 8006512:	4622      	mov	r2, r4
 8006514:	462b      	mov	r3, r5
 8006516:	f7f9 ffdf 	bl	80004d8 <__aeabi_dmul>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	2000      	movs	r0, #0
 8006520:	494d      	ldr	r1, [pc, #308]	; (8006658 <__ieee754_pow+0x3d0>)
 8006522:	f7f9 fe21 	bl	8000168 <__aeabi_dsub>
 8006526:	4622      	mov	r2, r4
 8006528:	462b      	mov	r3, r5
 800652a:	4680      	mov	r8, r0
 800652c:	4689      	mov	r9, r1
 800652e:	4620      	mov	r0, r4
 8006530:	4629      	mov	r1, r5
 8006532:	f7f9 ffd1 	bl	80004d8 <__aeabi_dmul>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4640      	mov	r0, r8
 800653c:	4649      	mov	r1, r9
 800653e:	f7f9 ffcb 	bl	80004d8 <__aeabi_dmul>
 8006542:	a33f      	add	r3, pc, #252	; (adr r3, 8006640 <__ieee754_pow+0x3b8>)
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f7f9 ffc6 	bl	80004d8 <__aeabi_dmul>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4650      	mov	r0, sl
 8006552:	4659      	mov	r1, fp
 8006554:	f7f9 fe08 	bl	8000168 <__aeabi_dsub>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4604      	mov	r4, r0
 800655e:	460d      	mov	r5, r1
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7f9 fe02 	bl	800016c <__adddf3>
 8006568:	2000      	movs	r0, #0
 800656a:	468b      	mov	fp, r1
 800656c:	4682      	mov	sl, r0
 800656e:	4632      	mov	r2, r6
 8006570:	463b      	mov	r3, r7
 8006572:	f7f9 fdf9 	bl	8000168 <__aeabi_dsub>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4620      	mov	r0, r4
 800657c:	4629      	mov	r1, r5
 800657e:	f7f9 fdf3 	bl	8000168 <__aeabi_dsub>
 8006582:	9b00      	ldr	r3, [sp, #0]
 8006584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006586:	3b01      	subs	r3, #1
 8006588:	4313      	orrs	r3, r2
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	bf0c      	ite	eq
 8006590:	4c32      	ldreq	r4, [pc, #200]	; (800665c <__ieee754_pow+0x3d4>)
 8006592:	4c2f      	ldrne	r4, [pc, #188]	; (8006650 <__ieee754_pow+0x3c8>)
 8006594:	4606      	mov	r6, r0
 8006596:	e9cd 3400 	strd	r3, r4, [sp]
 800659a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800659e:	2400      	movs	r4, #0
 80065a0:	460f      	mov	r7, r1
 80065a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	f7f9 fddd 	bl	8000168 <__aeabi_dsub>
 80065ae:	4652      	mov	r2, sl
 80065b0:	465b      	mov	r3, fp
 80065b2:	f7f9 ff91 	bl	80004d8 <__aeabi_dmul>
 80065b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ba:	4680      	mov	r8, r0
 80065bc:	4689      	mov	r9, r1
 80065be:	4630      	mov	r0, r6
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7f9 ff89 	bl	80004d8 <__aeabi_dmul>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7f9 fdcd 	bl	800016c <__adddf3>
 80065d2:	4622      	mov	r2, r4
 80065d4:	462b      	mov	r3, r5
 80065d6:	4680      	mov	r8, r0
 80065d8:	4689      	mov	r9, r1
 80065da:	4650      	mov	r0, sl
 80065dc:	4659      	mov	r1, fp
 80065de:	f7f9 ff7b 	bl	80004d8 <__aeabi_dmul>
 80065e2:	4604      	mov	r4, r0
 80065e4:	460d      	mov	r5, r1
 80065e6:	460b      	mov	r3, r1
 80065e8:	4602      	mov	r2, r0
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80065f2:	f7f9 fdbb 	bl	800016c <__adddf3>
 80065f6:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <__ieee754_pow+0x3d8>)
 80065f8:	4682      	mov	sl, r0
 80065fa:	4299      	cmp	r1, r3
 80065fc:	460f      	mov	r7, r1
 80065fe:	460e      	mov	r6, r1
 8006600:	f340 82e1 	ble.w	8006bc6 <__ieee754_pow+0x93e>
 8006604:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006608:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800660c:	4303      	orrs	r3, r0
 800660e:	f000 81db 	beq.w	80069c8 <__ieee754_pow+0x740>
 8006612:	a30d      	add	r3, pc, #52	; (adr r3, 8006648 <__ieee754_pow+0x3c0>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800661c:	f7f9 ff5c 	bl	80004d8 <__aeabi_dmul>
 8006620:	a309      	add	r3, pc, #36	; (adr r3, 8006648 <__ieee754_pow+0x3c0>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	e6c4      	b.n	80063b2 <__ieee754_pow+0x12a>
 8006628:	60000000 	.word	0x60000000
 800662c:	3ff71547 	.word	0x3ff71547
 8006630:	f85ddf44 	.word	0xf85ddf44
 8006634:	3e54ae0b 	.word	0x3e54ae0b
 8006638:	55555555 	.word	0x55555555
 800663c:	3fd55555 	.word	0x3fd55555
 8006640:	652b82fe 	.word	0x652b82fe
 8006644:	3ff71547 	.word	0x3ff71547
 8006648:	8800759c 	.word	0x8800759c
 800664c:	7e37e43c 	.word	0x7e37e43c
 8006650:	3ff00000 	.word	0x3ff00000
 8006654:	3fd00000 	.word	0x3fd00000
 8006658:	3fe00000 	.word	0x3fe00000
 800665c:	bff00000 	.word	0xbff00000
 8006660:	408fffff 	.word	0x408fffff
 8006664:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	da08      	bge.n	8006680 <__ieee754_pow+0x3f8>
 800666e:	4658      	mov	r0, fp
 8006670:	4bcd      	ldr	r3, [pc, #820]	; (80069a8 <__ieee754_pow+0x720>)
 8006672:	4661      	mov	r1, ip
 8006674:	f7f9 ff30 	bl	80004d8 <__aeabi_dmul>
 8006678:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800667c:	4683      	mov	fp, r0
 800667e:	460c      	mov	r4, r1
 8006680:	1523      	asrs	r3, r4, #20
 8006682:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006686:	4413      	add	r3, r2
 8006688:	930c      	str	r3, [sp, #48]	; 0x30
 800668a:	4bc8      	ldr	r3, [pc, #800]	; (80069ac <__ieee754_pow+0x724>)
 800668c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006690:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006694:	429c      	cmp	r4, r3
 8006696:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800669a:	dd08      	ble.n	80066ae <__ieee754_pow+0x426>
 800669c:	4bc4      	ldr	r3, [pc, #784]	; (80069b0 <__ieee754_pow+0x728>)
 800669e:	429c      	cmp	r4, r3
 80066a0:	f340 815b 	ble.w	800695a <__ieee754_pow+0x6d2>
 80066a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80066aa:	3301      	adds	r3, #1
 80066ac:	930c      	str	r3, [sp, #48]	; 0x30
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	4658      	mov	r0, fp
 80066b4:	4629      	mov	r1, r5
 80066b6:	4bbf      	ldr	r3, [pc, #764]	; (80069b4 <__ieee754_pow+0x72c>)
 80066b8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80066bc:	444b      	add	r3, r9
 80066be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80066c6:	461a      	mov	r2, r3
 80066c8:	4623      	mov	r3, r4
 80066ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066ce:	f7f9 fd4b 	bl	8000168 <__aeabi_dsub>
 80066d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066d6:	4606      	mov	r6, r0
 80066d8:	460f      	mov	r7, r1
 80066da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066de:	f7f9 fd45 	bl	800016c <__adddf3>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	2000      	movs	r0, #0
 80066e8:	49b3      	ldr	r1, [pc, #716]	; (80069b8 <__ieee754_pow+0x730>)
 80066ea:	f7fa f81f 	bl	800072c <__aeabi_ddiv>
 80066ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4630      	mov	r0, r6
 80066f8:	4639      	mov	r1, r7
 80066fa:	f7f9 feed 	bl	80004d8 <__aeabi_dmul>
 80066fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006702:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006706:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800670a:	2300      	movs	r3, #0
 800670c:	2200      	movs	r2, #0
 800670e:	106d      	asrs	r5, r5, #1
 8006710:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800671a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800671e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8006722:	4650      	mov	r0, sl
 8006724:	4659      	mov	r1, fp
 8006726:	4614      	mov	r4, r2
 8006728:	461d      	mov	r5, r3
 800672a:	f7f9 fed5 	bl	80004d8 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4630      	mov	r0, r6
 8006734:	4639      	mov	r1, r7
 8006736:	f7f9 fd17 	bl	8000168 <__aeabi_dsub>
 800673a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800673e:	4606      	mov	r6, r0
 8006740:	460f      	mov	r7, r1
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f7f9 fd0f 	bl	8000168 <__aeabi_dsub>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006752:	f7f9 fd09 	bl	8000168 <__aeabi_dsub>
 8006756:	4652      	mov	r2, sl
 8006758:	465b      	mov	r3, fp
 800675a:	f7f9 febd 	bl	80004d8 <__aeabi_dmul>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4630      	mov	r0, r6
 8006764:	4639      	mov	r1, r7
 8006766:	f7f9 fcff 	bl	8000168 <__aeabi_dsub>
 800676a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800676e:	f7f9 feb3 	bl	80004d8 <__aeabi_dmul>
 8006772:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006776:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800677a:	4610      	mov	r0, r2
 800677c:	4619      	mov	r1, r3
 800677e:	f7f9 feab 	bl	80004d8 <__aeabi_dmul>
 8006782:	a377      	add	r3, pc, #476	; (adr r3, 8006960 <__ieee754_pow+0x6d8>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	f7f9 fea4 	bl	80004d8 <__aeabi_dmul>
 8006790:	a375      	add	r3, pc, #468	; (adr r3, 8006968 <__ieee754_pow+0x6e0>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	f7f9 fce9 	bl	800016c <__adddf3>
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	f7f9 fe9b 	bl	80004d8 <__aeabi_dmul>
 80067a2:	a373      	add	r3, pc, #460	; (adr r3, 8006970 <__ieee754_pow+0x6e8>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 fce0 	bl	800016c <__adddf3>
 80067ac:	4622      	mov	r2, r4
 80067ae:	462b      	mov	r3, r5
 80067b0:	f7f9 fe92 	bl	80004d8 <__aeabi_dmul>
 80067b4:	a370      	add	r3, pc, #448	; (adr r3, 8006978 <__ieee754_pow+0x6f0>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	f7f9 fcd7 	bl	800016c <__adddf3>
 80067be:	4622      	mov	r2, r4
 80067c0:	462b      	mov	r3, r5
 80067c2:	f7f9 fe89 	bl	80004d8 <__aeabi_dmul>
 80067c6:	a36e      	add	r3, pc, #440	; (adr r3, 8006980 <__ieee754_pow+0x6f8>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f7f9 fcce 	bl	800016c <__adddf3>
 80067d0:	4622      	mov	r2, r4
 80067d2:	462b      	mov	r3, r5
 80067d4:	f7f9 fe80 	bl	80004d8 <__aeabi_dmul>
 80067d8:	a36b      	add	r3, pc, #428	; (adr r3, 8006988 <__ieee754_pow+0x700>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7f9 fcc5 	bl	800016c <__adddf3>
 80067e2:	4622      	mov	r2, r4
 80067e4:	4606      	mov	r6, r0
 80067e6:	460f      	mov	r7, r1
 80067e8:	462b      	mov	r3, r5
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7f9 fe73 	bl	80004d8 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7f9 fe6d 	bl	80004d8 <__aeabi_dmul>
 80067fe:	4604      	mov	r4, r0
 8006800:	460d      	mov	r5, r1
 8006802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006806:	4652      	mov	r2, sl
 8006808:	465b      	mov	r3, fp
 800680a:	f7f9 fcaf 	bl	800016c <__adddf3>
 800680e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006812:	f7f9 fe61 	bl	80004d8 <__aeabi_dmul>
 8006816:	4622      	mov	r2, r4
 8006818:	462b      	mov	r3, r5
 800681a:	f7f9 fca7 	bl	800016c <__adddf3>
 800681e:	4652      	mov	r2, sl
 8006820:	4606      	mov	r6, r0
 8006822:	460f      	mov	r7, r1
 8006824:	465b      	mov	r3, fp
 8006826:	4650      	mov	r0, sl
 8006828:	4659      	mov	r1, fp
 800682a:	f7f9 fe55 	bl	80004d8 <__aeabi_dmul>
 800682e:	2200      	movs	r2, #0
 8006830:	4b62      	ldr	r3, [pc, #392]	; (80069bc <__ieee754_pow+0x734>)
 8006832:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006836:	f7f9 fc99 	bl	800016c <__adddf3>
 800683a:	4632      	mov	r2, r6
 800683c:	463b      	mov	r3, r7
 800683e:	f7f9 fc95 	bl	800016c <__adddf3>
 8006842:	9804      	ldr	r0, [sp, #16]
 8006844:	460d      	mov	r5, r1
 8006846:	4604      	mov	r4, r0
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4650      	mov	r0, sl
 800684e:	4659      	mov	r1, fp
 8006850:	f7f9 fe42 	bl	80004d8 <__aeabi_dmul>
 8006854:	2200      	movs	r2, #0
 8006856:	4682      	mov	sl, r0
 8006858:	468b      	mov	fp, r1
 800685a:	4b58      	ldr	r3, [pc, #352]	; (80069bc <__ieee754_pow+0x734>)
 800685c:	4620      	mov	r0, r4
 800685e:	4629      	mov	r1, r5
 8006860:	f7f9 fc82 	bl	8000168 <__aeabi_dsub>
 8006864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006868:	f7f9 fc7e 	bl	8000168 <__aeabi_dsub>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fc78 	bl	8000168 <__aeabi_dsub>
 8006878:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800687c:	f7f9 fe2c 	bl	80004d8 <__aeabi_dmul>
 8006880:	4622      	mov	r2, r4
 8006882:	4606      	mov	r6, r0
 8006884:	460f      	mov	r7, r1
 8006886:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800688a:	462b      	mov	r3, r5
 800688c:	f7f9 fe24 	bl	80004d8 <__aeabi_dmul>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4630      	mov	r0, r6
 8006896:	4639      	mov	r1, r7
 8006898:	f7f9 fc68 	bl	800016c <__adddf3>
 800689c:	4606      	mov	r6, r0
 800689e:	460f      	mov	r7, r1
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4650      	mov	r0, sl
 80068a6:	4659      	mov	r1, fp
 80068a8:	f7f9 fc60 	bl	800016c <__adddf3>
 80068ac:	a338      	add	r3, pc, #224	; (adr r3, 8006990 <__ieee754_pow+0x708>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	9804      	ldr	r0, [sp, #16]
 80068b4:	460d      	mov	r5, r1
 80068b6:	4604      	mov	r4, r0
 80068b8:	f7f9 fe0e 	bl	80004d8 <__aeabi_dmul>
 80068bc:	4652      	mov	r2, sl
 80068be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068c2:	465b      	mov	r3, fp
 80068c4:	4620      	mov	r0, r4
 80068c6:	4629      	mov	r1, r5
 80068c8:	f7f9 fc4e 	bl	8000168 <__aeabi_dsub>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7f9 fc48 	bl	8000168 <__aeabi_dsub>
 80068d8:	a32f      	add	r3, pc, #188	; (adr r3, 8006998 <__ieee754_pow+0x710>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fdfb 	bl	80004d8 <__aeabi_dmul>
 80068e2:	a32f      	add	r3, pc, #188	; (adr r3, 80069a0 <__ieee754_pow+0x718>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7f9 fdf2 	bl	80004d8 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4630      	mov	r0, r6
 80068fa:	4639      	mov	r1, r7
 80068fc:	f7f9 fc36 	bl	800016c <__adddf3>
 8006900:	4b2f      	ldr	r3, [pc, #188]	; (80069c0 <__ieee754_pow+0x738>)
 8006902:	444b      	add	r3, r9
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fc30 	bl	800016c <__adddf3>
 800690c:	4604      	mov	r4, r0
 800690e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006910:	460d      	mov	r5, r1
 8006912:	f7f9 fd77 	bl	8000404 <__aeabi_i2d>
 8006916:	4606      	mov	r6, r0
 8006918:	460f      	mov	r7, r1
 800691a:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <__ieee754_pow+0x73c>)
 800691c:	4622      	mov	r2, r4
 800691e:	444b      	add	r3, r9
 8006920:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006924:	462b      	mov	r3, r5
 8006926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800692a:	f7f9 fc1f 	bl	800016c <__adddf3>
 800692e:	4642      	mov	r2, r8
 8006930:	464b      	mov	r3, r9
 8006932:	f7f9 fc1b 	bl	800016c <__adddf3>
 8006936:	4632      	mov	r2, r6
 8006938:	463b      	mov	r3, r7
 800693a:	f7f9 fc17 	bl	800016c <__adddf3>
 800693e:	9804      	ldr	r0, [sp, #16]
 8006940:	4632      	mov	r2, r6
 8006942:	463b      	mov	r3, r7
 8006944:	4682      	mov	sl, r0
 8006946:	468b      	mov	fp, r1
 8006948:	f7f9 fc0e 	bl	8000168 <__aeabi_dsub>
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	f7f9 fc0a 	bl	8000168 <__aeabi_dsub>
 8006954:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006958:	e60b      	b.n	8006572 <__ieee754_pow+0x2ea>
 800695a:	f04f 0801 	mov.w	r8, #1
 800695e:	e6a8      	b.n	80066b2 <__ieee754_pow+0x42a>
 8006960:	4a454eef 	.word	0x4a454eef
 8006964:	3fca7e28 	.word	0x3fca7e28
 8006968:	93c9db65 	.word	0x93c9db65
 800696c:	3fcd864a 	.word	0x3fcd864a
 8006970:	a91d4101 	.word	0xa91d4101
 8006974:	3fd17460 	.word	0x3fd17460
 8006978:	518f264d 	.word	0x518f264d
 800697c:	3fd55555 	.word	0x3fd55555
 8006980:	db6fabff 	.word	0xdb6fabff
 8006984:	3fdb6db6 	.word	0x3fdb6db6
 8006988:	33333303 	.word	0x33333303
 800698c:	3fe33333 	.word	0x3fe33333
 8006990:	e0000000 	.word	0xe0000000
 8006994:	3feec709 	.word	0x3feec709
 8006998:	dc3a03fd 	.word	0xdc3a03fd
 800699c:	3feec709 	.word	0x3feec709
 80069a0:	145b01f5 	.word	0x145b01f5
 80069a4:	be3e2fe0 	.word	0xbe3e2fe0
 80069a8:	43400000 	.word	0x43400000
 80069ac:	0003988e 	.word	0x0003988e
 80069b0:	000bb679 	.word	0x000bb679
 80069b4:	080072f0 	.word	0x080072f0
 80069b8:	3ff00000 	.word	0x3ff00000
 80069bc:	40080000 	.word	0x40080000
 80069c0:	08007310 	.word	0x08007310
 80069c4:	08007300 	.word	0x08007300
 80069c8:	a39b      	add	r3, pc, #620	; (adr r3, 8006c38 <__ieee754_pow+0x9b0>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7f9 fbcb 	bl	800016c <__adddf3>
 80069d6:	4622      	mov	r2, r4
 80069d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069dc:	462b      	mov	r3, r5
 80069de:	4650      	mov	r0, sl
 80069e0:	4639      	mov	r1, r7
 80069e2:	f7f9 fbc1 	bl	8000168 <__aeabi_dsub>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ee:	f7fa f803 	bl	80009f8 <__aeabi_dcmpgt>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f47f ae0d 	bne.w	8006612 <__ieee754_pow+0x38a>
 80069f8:	4aa3      	ldr	r2, [pc, #652]	; (8006c88 <__ieee754_pow+0xa00>)
 80069fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80069fe:	4293      	cmp	r3, r2
 8006a00:	f340 8103 	ble.w	8006c0a <__ieee754_pow+0x982>
 8006a04:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006a08:	2000      	movs	r0, #0
 8006a0a:	151b      	asrs	r3, r3, #20
 8006a0c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006a10:	fa4a f303 	asr.w	r3, sl, r3
 8006a14:	4433      	add	r3, r6
 8006a16:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006a1a:	4f9c      	ldr	r7, [pc, #624]	; (8006c8c <__ieee754_pow+0xa04>)
 8006a1c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006a20:	4117      	asrs	r7, r2
 8006a22:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006a26:	ea23 0107 	bic.w	r1, r3, r7
 8006a2a:	f1c2 0214 	rsb	r2, r2, #20
 8006a2e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006a32:	fa4a fa02 	asr.w	sl, sl, r2
 8006a36:	2e00      	cmp	r6, #0
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	bfb8      	it	lt
 8006a42:	f1ca 0a00 	rsblt	sl, sl, #0
 8006a46:	f7f9 fb8f 	bl	8000168 <__aeabi_dsub>
 8006a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a52:	4642      	mov	r2, r8
 8006a54:	464b      	mov	r3, r9
 8006a56:	f7f9 fb89 	bl	800016c <__adddf3>
 8006a5a:	a379      	add	r3, pc, #484	; (adr r3, 8006c40 <__ieee754_pow+0x9b8>)
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	2000      	movs	r0, #0
 8006a62:	460d      	mov	r5, r1
 8006a64:	4604      	mov	r4, r0
 8006a66:	f7f9 fd37 	bl	80004d8 <__aeabi_dmul>
 8006a6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460f      	mov	r7, r1
 8006a72:	4620      	mov	r0, r4
 8006a74:	4629      	mov	r1, r5
 8006a76:	f7f9 fb77 	bl	8000168 <__aeabi_dsub>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4640      	mov	r0, r8
 8006a80:	4649      	mov	r1, r9
 8006a82:	f7f9 fb71 	bl	8000168 <__aeabi_dsub>
 8006a86:	a370      	add	r3, pc, #448	; (adr r3, 8006c48 <__ieee754_pow+0x9c0>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fd24 	bl	80004d8 <__aeabi_dmul>
 8006a90:	a36f      	add	r3, pc, #444	; (adr r3, 8006c50 <__ieee754_pow+0x9c8>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	4680      	mov	r8, r0
 8006a98:	4689      	mov	r9, r1
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f7f9 fd1b 	bl	80004d8 <__aeabi_dmul>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	f7f9 fb5f 	bl	800016c <__adddf3>
 8006aae:	4604      	mov	r4, r0
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	f7f9 fb57 	bl	800016c <__adddf3>
 8006abe:	4632      	mov	r2, r6
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	4689      	mov	r9, r1
 8006ac6:	f7f9 fb4f 	bl	8000168 <__aeabi_dsub>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7f9 fb49 	bl	8000168 <__aeabi_dsub>
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	4606      	mov	r6, r0
 8006ada:	460f      	mov	r7, r1
 8006adc:	464b      	mov	r3, r9
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	f7f9 fcf9 	bl	80004d8 <__aeabi_dmul>
 8006ae6:	a35c      	add	r3, pc, #368	; (adr r3, 8006c58 <__ieee754_pow+0x9d0>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	4604      	mov	r4, r0
 8006aee:	460d      	mov	r5, r1
 8006af0:	f7f9 fcf2 	bl	80004d8 <__aeabi_dmul>
 8006af4:	a35a      	add	r3, pc, #360	; (adr r3, 8006c60 <__ieee754_pow+0x9d8>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 fb35 	bl	8000168 <__aeabi_dsub>
 8006afe:	4622      	mov	r2, r4
 8006b00:	462b      	mov	r3, r5
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	a358      	add	r3, pc, #352	; (adr r3, 8006c68 <__ieee754_pow+0x9e0>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f7f9 fb2e 	bl	800016c <__adddf3>
 8006b10:	4622      	mov	r2, r4
 8006b12:	462b      	mov	r3, r5
 8006b14:	f7f9 fce0 	bl	80004d8 <__aeabi_dmul>
 8006b18:	a355      	add	r3, pc, #340	; (adr r3, 8006c70 <__ieee754_pow+0x9e8>)
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	f7f9 fb23 	bl	8000168 <__aeabi_dsub>
 8006b22:	4622      	mov	r2, r4
 8006b24:	462b      	mov	r3, r5
 8006b26:	f7f9 fcd7 	bl	80004d8 <__aeabi_dmul>
 8006b2a:	a353      	add	r3, pc, #332	; (adr r3, 8006c78 <__ieee754_pow+0x9f0>)
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f7f9 fb1c 	bl	800016c <__adddf3>
 8006b34:	4622      	mov	r2, r4
 8006b36:	462b      	mov	r3, r5
 8006b38:	f7f9 fcce 	bl	80004d8 <__aeabi_dmul>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4640      	mov	r0, r8
 8006b42:	4649      	mov	r1, r9
 8006b44:	f7f9 fb10 	bl	8000168 <__aeabi_dsub>
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f7f9 fcc0 	bl	80004d8 <__aeabi_dmul>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 faff 	bl	8000168 <__aeabi_dsub>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b72:	f7f9 fddb 	bl	800072c <__aeabi_ddiv>
 8006b76:	4632      	mov	r2, r6
 8006b78:	4604      	mov	r4, r0
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 fca9 	bl	80004d8 <__aeabi_dmul>
 8006b86:	4632      	mov	r2, r6
 8006b88:	463b      	mov	r3, r7
 8006b8a:	f7f9 faef 	bl	800016c <__adddf3>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 fae7 	bl	8000168 <__aeabi_dsub>
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	f7f9 fae3 	bl	8000168 <__aeabi_dsub>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	4939      	ldr	r1, [pc, #228]	; (8006c90 <__ieee754_pow+0xa08>)
 8006baa:	f7f9 fadd 	bl	8000168 <__aeabi_dsub>
 8006bae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006bb2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006bb6:	da2b      	bge.n	8006c10 <__ieee754_pow+0x988>
 8006bb8:	4652      	mov	r2, sl
 8006bba:	f000 f9b9 	bl	8006f30 <scalbn>
 8006bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bc2:	f7ff bbf6 	b.w	80063b2 <__ieee754_pow+0x12a>
 8006bc6:	4b33      	ldr	r3, [pc, #204]	; (8006c94 <__ieee754_pow+0xa0c>)
 8006bc8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006bcc:	429f      	cmp	r7, r3
 8006bce:	f77f af13 	ble.w	80069f8 <__ieee754_pow+0x770>
 8006bd2:	4b31      	ldr	r3, [pc, #196]	; (8006c98 <__ieee754_pow+0xa10>)
 8006bd4:	440b      	add	r3, r1
 8006bd6:	4303      	orrs	r3, r0
 8006bd8:	d00b      	beq.n	8006bf2 <__ieee754_pow+0x96a>
 8006bda:	a329      	add	r3, pc, #164	; (adr r3, 8006c80 <__ieee754_pow+0x9f8>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006be4:	f7f9 fc78 	bl	80004d8 <__aeabi_dmul>
 8006be8:	a325      	add	r3, pc, #148	; (adr r3, 8006c80 <__ieee754_pow+0x9f8>)
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f7ff bbe0 	b.w	80063b2 <__ieee754_pow+0x12a>
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	f7f9 fab7 	bl	8000168 <__aeabi_dsub>
 8006bfa:	4642      	mov	r2, r8
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	f7f9 fef1 	bl	80009e4 <__aeabi_dcmpge>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f43f aef8 	beq.w	80069f8 <__ieee754_pow+0x770>
 8006c08:	e7e7      	b.n	8006bda <__ieee754_pow+0x952>
 8006c0a:	f04f 0a00 	mov.w	sl, #0
 8006c0e:	e71e      	b.n	8006a4e <__ieee754_pow+0x7c6>
 8006c10:	4621      	mov	r1, r4
 8006c12:	e7d4      	b.n	8006bbe <__ieee754_pow+0x936>
 8006c14:	f04f 0b00 	mov.w	fp, #0
 8006c18:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006c90 <__ieee754_pow+0xa08>
 8006c1c:	f7ff bb95 	b.w	800634a <__ieee754_pow+0xc2>
 8006c20:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006c24:	f7ff bb91 	b.w	800634a <__ieee754_pow+0xc2>
 8006c28:	4638      	mov	r0, r7
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	f7ff bbc3 	b.w	80063b6 <__ieee754_pow+0x12e>
 8006c30:	9200      	str	r2, [sp, #0]
 8006c32:	f7ff bb9f 	b.w	8006374 <__ieee754_pow+0xec>
 8006c36:	bf00      	nop
 8006c38:	652b82fe 	.word	0x652b82fe
 8006c3c:	3c971547 	.word	0x3c971547
 8006c40:	00000000 	.word	0x00000000
 8006c44:	3fe62e43 	.word	0x3fe62e43
 8006c48:	fefa39ef 	.word	0xfefa39ef
 8006c4c:	3fe62e42 	.word	0x3fe62e42
 8006c50:	0ca86c39 	.word	0x0ca86c39
 8006c54:	be205c61 	.word	0xbe205c61
 8006c58:	72bea4d0 	.word	0x72bea4d0
 8006c5c:	3e663769 	.word	0x3e663769
 8006c60:	c5d26bf1 	.word	0xc5d26bf1
 8006c64:	3ebbbd41 	.word	0x3ebbbd41
 8006c68:	af25de2c 	.word	0xaf25de2c
 8006c6c:	3f11566a 	.word	0x3f11566a
 8006c70:	16bebd93 	.word	0x16bebd93
 8006c74:	3f66c16c 	.word	0x3f66c16c
 8006c78:	5555553e 	.word	0x5555553e
 8006c7c:	3fc55555 	.word	0x3fc55555
 8006c80:	c2f8f359 	.word	0xc2f8f359
 8006c84:	01a56e1f 	.word	0x01a56e1f
 8006c88:	3fe00000 	.word	0x3fe00000
 8006c8c:	000fffff 	.word	0x000fffff
 8006c90:	3ff00000 	.word	0x3ff00000
 8006c94:	4090cbff 	.word	0x4090cbff
 8006c98:	3f6f3400 	.word	0x3f6f3400

08006c9c <__ieee754_sqrt>:
 8006c9c:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <__ieee754_sqrt+0x154>)
 8006c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	438b      	bics	r3, r1
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460d      	mov	r5, r1
 8006ca8:	460a      	mov	r2, r1
 8006caa:	460c      	mov	r4, r1
 8006cac:	d10f      	bne.n	8006cce <__ieee754_sqrt+0x32>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	f7f9 fc11 	bl	80004d8 <__aeabi_dmul>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	f7f9 fa55 	bl	800016c <__adddf3>
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	4629      	mov	r1, r5
 8006cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cce:	2900      	cmp	r1, #0
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	dc0e      	bgt.n	8006cf4 <__ieee754_sqrt+0x58>
 8006cd6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006cda:	ea5c 0707 	orrs.w	r7, ip, r7
 8006cde:	d0f2      	beq.n	8006cc6 <__ieee754_sqrt+0x2a>
 8006ce0:	b141      	cbz	r1, 8006cf4 <__ieee754_sqrt+0x58>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	f7f9 fa3f 	bl	8000168 <__aeabi_dsub>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	f7f9 fd1d 	bl	800072c <__aeabi_ddiv>
 8006cf2:	e7e6      	b.n	8006cc2 <__ieee754_sqrt+0x26>
 8006cf4:	1512      	asrs	r2, r2, #20
 8006cf6:	d074      	beq.n	8006de2 <__ieee754_sqrt+0x146>
 8006cf8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006cfc:	07d5      	lsls	r5, r2, #31
 8006cfe:	f04f 0500 	mov.w	r5, #0
 8006d02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d06:	bf48      	it	mi
 8006d08:	0fd9      	lsrmi	r1, r3, #31
 8006d0a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006d0e:	bf44      	itt	mi
 8006d10:	005b      	lslmi	r3, r3, #1
 8006d12:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006d16:	1051      	asrs	r1, r2, #1
 8006d18:	0fda      	lsrs	r2, r3, #31
 8006d1a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006d1e:	4628      	mov	r0, r5
 8006d20:	2216      	movs	r2, #22
 8006d22:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	1987      	adds	r7, r0, r6
 8006d2a:	42a7      	cmp	r7, r4
 8006d2c:	bfde      	ittt	le
 8006d2e:	19b8      	addle	r0, r7, r6
 8006d30:	1be4      	suble	r4, r4, r7
 8006d32:	19ad      	addle	r5, r5, r6
 8006d34:	0fdf      	lsrs	r7, r3, #31
 8006d36:	3a01      	subs	r2, #1
 8006d38:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8006d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d44:	d1f0      	bne.n	8006d28 <__ieee754_sqrt+0x8c>
 8006d46:	f04f 0c20 	mov.w	ip, #32
 8006d4a:	4696      	mov	lr, r2
 8006d4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d50:	4284      	cmp	r4, r0
 8006d52:	eb06 070e 	add.w	r7, r6, lr
 8006d56:	dc02      	bgt.n	8006d5e <__ieee754_sqrt+0xc2>
 8006d58:	d112      	bne.n	8006d80 <__ieee754_sqrt+0xe4>
 8006d5a:	429f      	cmp	r7, r3
 8006d5c:	d810      	bhi.n	8006d80 <__ieee754_sqrt+0xe4>
 8006d5e:	2f00      	cmp	r7, #0
 8006d60:	eb07 0e06 	add.w	lr, r7, r6
 8006d64:	da42      	bge.n	8006dec <__ieee754_sqrt+0x150>
 8006d66:	f1be 0f00 	cmp.w	lr, #0
 8006d6a:	db3f      	blt.n	8006dec <__ieee754_sqrt+0x150>
 8006d6c:	f100 0801 	add.w	r8, r0, #1
 8006d70:	1a24      	subs	r4, r4, r0
 8006d72:	4640      	mov	r0, r8
 8006d74:	429f      	cmp	r7, r3
 8006d76:	bf88      	it	hi
 8006d78:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006d7c:	1bdb      	subs	r3, r3, r7
 8006d7e:	4432      	add	r2, r6
 8006d80:	0064      	lsls	r4, r4, #1
 8006d82:	f1bc 0c01 	subs.w	ip, ip, #1
 8006d86:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006d8a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d92:	d1dd      	bne.n	8006d50 <__ieee754_sqrt+0xb4>
 8006d94:	4323      	orrs	r3, r4
 8006d96:	d006      	beq.n	8006da6 <__ieee754_sqrt+0x10a>
 8006d98:	1c54      	adds	r4, r2, #1
 8006d9a:	bf0b      	itete	eq
 8006d9c:	4662      	moveq	r2, ip
 8006d9e:	3201      	addne	r2, #1
 8006da0:	3501      	addeq	r5, #1
 8006da2:	f022 0201 	bicne.w	r2, r2, #1
 8006da6:	106b      	asrs	r3, r5, #1
 8006da8:	0852      	lsrs	r2, r2, #1
 8006daa:	07e8      	lsls	r0, r5, #31
 8006dac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006db0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006db4:	bf48      	it	mi
 8006db6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006dba:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006dbe:	4616      	mov	r6, r2
 8006dc0:	e781      	b.n	8006cc6 <__ieee754_sqrt+0x2a>
 8006dc2:	0adc      	lsrs	r4, r3, #11
 8006dc4:	3915      	subs	r1, #21
 8006dc6:	055b      	lsls	r3, r3, #21
 8006dc8:	2c00      	cmp	r4, #0
 8006dca:	d0fa      	beq.n	8006dc2 <__ieee754_sqrt+0x126>
 8006dcc:	02e6      	lsls	r6, r4, #11
 8006dce:	d50a      	bpl.n	8006de6 <__ieee754_sqrt+0x14a>
 8006dd0:	f1c2 0020 	rsb	r0, r2, #32
 8006dd4:	fa23 f000 	lsr.w	r0, r3, r0
 8006dd8:	1e55      	subs	r5, r2, #1
 8006dda:	4093      	lsls	r3, r2
 8006ddc:	4304      	orrs	r4, r0
 8006dde:	1b4a      	subs	r2, r1, r5
 8006de0:	e78a      	b.n	8006cf8 <__ieee754_sqrt+0x5c>
 8006de2:	4611      	mov	r1, r2
 8006de4:	e7f0      	b.n	8006dc8 <__ieee754_sqrt+0x12c>
 8006de6:	0064      	lsls	r4, r4, #1
 8006de8:	3201      	adds	r2, #1
 8006dea:	e7ef      	b.n	8006dcc <__ieee754_sqrt+0x130>
 8006dec:	4680      	mov	r8, r0
 8006dee:	e7bf      	b.n	8006d70 <__ieee754_sqrt+0xd4>
 8006df0:	7ff00000 	.word	0x7ff00000

08006df4 <fabs>:
 8006df4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4770      	bx	lr

08006dfc <finite>:
 8006dfc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006e00:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006e04:	0fc0      	lsrs	r0, r0, #31
 8006e06:	4770      	bx	lr

08006e08 <matherr>:
 8006e08:	2000      	movs	r0, #0
 8006e0a:	4770      	bx	lr

08006e0c <nan>:
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	4901      	ldr	r1, [pc, #4]	; (8006e14 <nan+0x8>)
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	7ff80000 	.word	0x7ff80000

08006e18 <rint>:
 8006e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006e1e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8006e22:	f1bc 0f13 	cmp.w	ip, #19
 8006e26:	4604      	mov	r4, r0
 8006e28:	460d      	mov	r5, r1
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4606      	mov	r6, r0
 8006e2e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8006e32:	dc5a      	bgt.n	8006eea <rint+0xd2>
 8006e34:	f1bc 0f00 	cmp.w	ip, #0
 8006e38:	da2b      	bge.n	8006e92 <rint+0x7a>
 8006e3a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006e3e:	4302      	orrs	r2, r0
 8006e40:	d023      	beq.n	8006e8a <rint+0x72>
 8006e42:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006e46:	4302      	orrs	r2, r0
 8006e48:	4256      	negs	r6, r2
 8006e4a:	4316      	orrs	r6, r2
 8006e4c:	0c4b      	lsrs	r3, r1, #17
 8006e4e:	0b36      	lsrs	r6, r6, #12
 8006e50:	4934      	ldr	r1, [pc, #208]	; (8006f24 <rint+0x10c>)
 8006e52:	045b      	lsls	r3, r3, #17
 8006e54:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8006e58:	ea46 0503 	orr.w	r5, r6, r3
 8006e5c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006e60:	4602      	mov	r2, r0
 8006e62:	462b      	mov	r3, r5
 8006e64:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006e68:	4620      	mov	r0, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7f9 f97e 	bl	800016c <__adddf3>
 8006e70:	e9cd 0100 	strd	r0, r1, [sp]
 8006e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e78:	462b      	mov	r3, r5
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	f7f9 f974 	bl	8000168 <__aeabi_dsub>
 8006e80:	4604      	mov	r4, r0
 8006e82:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e86:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	b003      	add	sp, #12
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e92:	4a25      	ldr	r2, [pc, #148]	; (8006f28 <rint+0x110>)
 8006e94:	fa42 f20c 	asr.w	r2, r2, ip
 8006e98:	4011      	ands	r1, r2
 8006e9a:	4301      	orrs	r1, r0
 8006e9c:	d0f5      	beq.n	8006e8a <rint+0x72>
 8006e9e:	0852      	lsrs	r2, r2, #1
 8006ea0:	ea05 0102 	and.w	r1, r5, r2
 8006ea4:	ea50 0601 	orrs.w	r6, r0, r1
 8006ea8:	d00c      	beq.n	8006ec4 <rint+0xac>
 8006eaa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006eae:	f1bc 0f13 	cmp.w	ip, #19
 8006eb2:	bf0c      	ite	eq
 8006eb4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8006eb8:	2600      	movne	r6, #0
 8006eba:	ea25 0202 	bic.w	r2, r5, r2
 8006ebe:	fa43 f30c 	asr.w	r3, r3, ip
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	4917      	ldr	r1, [pc, #92]	; (8006f24 <rint+0x10c>)
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8006ecc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	f7f9 f94a 	bl	800016c <__adddf3>
 8006ed8:	e9cd 0100 	strd	r0, r1, [sp]
 8006edc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ee0:	4622      	mov	r2, r4
 8006ee2:	462b      	mov	r3, r5
 8006ee4:	f7f9 f940 	bl	8000168 <__aeabi_dsub>
 8006ee8:	e008      	b.n	8006efc <rint+0xe4>
 8006eea:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8006eee:	dd08      	ble.n	8006f02 <rint+0xea>
 8006ef0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8006ef4:	d1c9      	bne.n	8006e8a <rint+0x72>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	f7f9 f938 	bl	800016c <__adddf3>
 8006efc:	4604      	mov	r4, r0
 8006efe:	460d      	mov	r5, r1
 8006f00:	e7c3      	b.n	8006e8a <rint+0x72>
 8006f02:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8006f06:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0a:	40ca      	lsrs	r2, r1
 8006f0c:	4210      	tst	r0, r2
 8006f0e:	d0bc      	beq.n	8006e8a <rint+0x72>
 8006f10:	0852      	lsrs	r2, r2, #1
 8006f12:	4210      	tst	r0, r2
 8006f14:	bf1f      	itttt	ne
 8006f16:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8006f1a:	ea20 0202 	bicne.w	r2, r0, r2
 8006f1e:	410e      	asrne	r6, r1
 8006f20:	4316      	orrne	r6, r2
 8006f22:	e7cf      	b.n	8006ec4 <rint+0xac>
 8006f24:	08007320 	.word	0x08007320
 8006f28:	000fffff 	.word	0x000fffff
 8006f2c:	00000000 	.word	0x00000000

08006f30 <scalbn>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	4616      	mov	r6, r2
 8006f34:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f38:	4604      	mov	r4, r0
 8006f3a:	460d      	mov	r5, r1
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	b982      	cbnz	r2, 8006f62 <scalbn+0x32>
 8006f40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f44:	4303      	orrs	r3, r0
 8006f46:	d034      	beq.n	8006fb2 <scalbn+0x82>
 8006f48:	4b2d      	ldr	r3, [pc, #180]	; (8007000 <scalbn+0xd0>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f7f9 fac4 	bl	80004d8 <__aeabi_dmul>
 8006f50:	4b2c      	ldr	r3, [pc, #176]	; (8007004 <scalbn+0xd4>)
 8006f52:	4604      	mov	r4, r0
 8006f54:	429e      	cmp	r6, r3
 8006f56:	460d      	mov	r5, r1
 8006f58:	da0d      	bge.n	8006f76 <scalbn+0x46>
 8006f5a:	a325      	add	r3, pc, #148	; (adr r3, 8006ff0 <scalbn+0xc0>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	e01c      	b.n	8006f9c <scalbn+0x6c>
 8006f62:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006f66:	42ba      	cmp	r2, r7
 8006f68:	d109      	bne.n	8006f7e <scalbn+0x4e>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	f7f9 f8fe 	bl	800016c <__adddf3>
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	e01d      	b.n	8006fb2 <scalbn+0x82>
 8006f76:	460b      	mov	r3, r1
 8006f78:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f7c:	3a36      	subs	r2, #54	; 0x36
 8006f7e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006f82:	4432      	add	r2, r6
 8006f84:	428a      	cmp	r2, r1
 8006f86:	dd0c      	ble.n	8006fa2 <scalbn+0x72>
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	a11a      	add	r1, pc, #104	; (adr r1, 8006ff8 <scalbn+0xc8>)
 8006f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f92:	f000 f83b 	bl	800700c <copysign>
 8006f96:	a318      	add	r3, pc, #96	; (adr r3, 8006ff8 <scalbn+0xc8>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fa9c 	bl	80004d8 <__aeabi_dmul>
 8006fa0:	e7e6      	b.n	8006f70 <scalbn+0x40>
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	dd08      	ble.n	8006fb8 <scalbn+0x88>
 8006fa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006faa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006fbc:	da0b      	bge.n	8006fd6 <scalbn+0xa6>
 8006fbe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006fc2:	429e      	cmp	r6, r3
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	dce0      	bgt.n	8006f8c <scalbn+0x5c>
 8006fca:	a109      	add	r1, pc, #36	; (adr r1, 8006ff0 <scalbn+0xc0>)
 8006fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd0:	f000 f81c 	bl	800700c <copysign>
 8006fd4:	e7c1      	b.n	8006f5a <scalbn+0x2a>
 8006fd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fda:	3236      	adds	r2, #54	; 0x36
 8006fdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fe0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4b07      	ldr	r3, [pc, #28]	; (8007008 <scalbn+0xd8>)
 8006fec:	e7d6      	b.n	8006f9c <scalbn+0x6c>
 8006fee:	bf00      	nop
 8006ff0:	c2f8f359 	.word	0xc2f8f359
 8006ff4:	01a56e1f 	.word	0x01a56e1f
 8006ff8:	8800759c 	.word	0x8800759c
 8006ffc:	7e37e43c 	.word	0x7e37e43c
 8007000:	43500000 	.word	0x43500000
 8007004:	ffff3cb0 	.word	0xffff3cb0
 8007008:	3c900000 	.word	0x3c900000

0800700c <copysign>:
 800700c:	b530      	push	{r4, r5, lr}
 800700e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007016:	ea42 0503 	orr.w	r5, r2, r3
 800701a:	4629      	mov	r1, r5
 800701c:	bd30      	pop	{r4, r5, pc}
	...

08007020 <_init>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr

0800702c <_fini>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr
